<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WinServer2019修改远程端口号</title>
    <url>/WinServer2019%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
    <content><![CDATA[<ul>
<li>先进入注册表</li>
</ul>
<p><code>Win+R</code>输入<code>regedit</code>回车，进入注册表</p>
<pre class="line-numbers language-bash"><code class="language-bash">HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Terminal Server/Wds/rdpwd/Tds/tcp
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Terminal Server/WinStations/RDP-Tcp
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改对应注册表中的<code>PortNumber</code>修改</p>
<ul>
<li>防火墙入站规则添加相应的端口</li>
</ul>
<blockquote>
<p>一般情况下<code>Windows</code>服务器都是禁止<code>ping</code>的，所以如果想要<code>Windows</code>服务器能<code>ping</code>通，如果想要<code>ping</code>通，这时候需要给防火墙给关闭。</p>
</blockquote>
<p>&ensp;修改完成以后需要进行重启一次，这时候为了测试远程端口号是否修改成功，可以在终端测试：</p>
<pre class="line-numbers language-shell"><code class="language-shell">telnet 127.0.0.1 端口号
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果能进去，则说明通了，不行则说明还需要修改。</p>
]]></content>
      <categories>
        <category>WinServer - Windows</category>
      </categories>
      <tags>
        <tag>WinServer</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7.9修改远程端口号踩坑</title>
    <url>/CentOS-7-9%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E5%8F%B7%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<p><code>sshd_config</code>配置文件里面修改端口以后不通，注意下面：</p>
<span id="more"></span>

<pre class="line-numbers language-bash"><code class="language-bash">
<span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /etc/selinux/</span>
<span class="token punctuation">[</span>root@centos7 selinux<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>
config  final  semanage.conf  targeted  tmp
<span class="token punctuation">[</span>root@centos7 selinux<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vi config </span>
<span class="token punctuation">[</span>root@centos7 selinux<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span>

<span class="token comment" spellcheck="true"># This file controls the state of SELinux on the system.</span>
<span class="token comment" spellcheck="true"># SELINUX= can take one of these three values:</span>
<span class="token comment" spellcheck="true">#     enforcing - SELinux security policy is enforced.</span>
<span class="token comment" spellcheck="true">#     permissive - SELinux prints warnings instead of enforcing.</span>
<span class="token comment" spellcheck="true">#     disabled - No SELinux policy is loaded.</span>
SELINUX<span class="token operator">=</span>disabled <span class="token comment" spellcheck="true"># 修改远程端口号要关闭</span>
<span class="token comment" spellcheck="true"># SELINUXTYPE= can take one of three values:</span>
<span class="token comment" spellcheck="true">#     targeted - Targeted processes are protected,</span>
<span class="token comment" spellcheck="true">#     minimum - Modification of targeted policy. Only selected processes are protected.</span>
<span class="token comment" spellcheck="true">#     mls - Multi Level Security protection.</span>
SELINUXTYPE<span class="token operator">=</span>targeted                                                                              
~                                                                               
~                                                                               
~                                                                                             
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS - Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>局域网共享打印机出现0x0000011b错误解决方式</title>
    <url>/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E6%89%93%E5%8D%B0%E6%9C%BA%E5%87%BA%E7%8E%B00x0000011b%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>网上的教程有很多，除了软件（软件不知道是否好坏，是否有病毒），最快最稳定的方式还是修改注册表，不需要卸载更新等其他方式。</p>
</blockquote>
<h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>&ensp;<code>Win</code>+<code>R</code>启动“运行”，然后输入<code>regedit</code>回车，进入注册表</p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240227130332524.png"></p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240227130351806.png"></p>
<h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>&ensp;搜索<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Print</code></p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240227130619030.png"></p>
<h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>&ensp;鼠标右键，新建<code>DWORD(32位)</code>值，然后重新命名为<code>RpcAuthnLevelPrivacyEnabled</code>修改值为<code>0</code></p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240227130833814.png"></p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240227130904059.png"></p>
<h3 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h3><p>&ensp;重启电脑！问题解决</p>
<p><code>注意，共享和接受打印机都要修改！！！！</code></p>
]]></content>
      <categories>
        <category>共享打印机</category>
      </categories>
      <tags>
        <tag>共享打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac电脑Hosts文件修改</title>
    <url>/Mac%E7%94%B5%E8%84%91Hosts%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<p>&ensp;&ensp;因为一些原因想着修改mac的hosts文件，我给文件复制到桌面上一份，但是在桌面上以后，无论如何都删不掉，也无法给权限，一直都是上锁的状态，也查了很多解锁的方式，但是都无法解锁，经过自己的踩坑，找到了问题的原因。</p>
<p>&ensp;问题如图所示：</p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/.png"></p>
<p>&ensp;为什么我在终端中使用命令别人都能执行，为什么我无法解锁呢？然后发现是终端<code>iterm2</code>的原因，给命令复制到<code>Mac</code>自带终端，问题都解决了。</p>
<p>&ensp;<strong>锁死<code>hosts</code>文件：</strong></p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> chflags uchg /etc/hosts
<span class="token function">sudo</span> chflags schg /etc/hosts
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>&ensp;<strong>解锁<code>hosts</code>文件：</strong></p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> chflags -hv noschg /etc/hosts
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>&ensp;推荐自带终端<code>YYDS</code>!!!</p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240125202358864.png"><br>最后找到一个开源的修改hosts文件的软件<a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Powertoys安装后，输入法打字卡顿解决方式</title>
    <url>/%E5%85%B3%E4%BA%8EPowertoys%E5%AE%89%E8%A3%85%E5%90%8E%EF%BC%8C%E8%BE%93%E5%85%A5%E6%B3%95%E6%89%93%E5%AD%97%E5%8D%A1%E9%A1%BF%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>安装这个<code>Powertoys</code>以后打字总是不跟手，打字很卡，特别是喜欢用空格作为确定按键，后来找了很多资料，发现也有很多人有类似的问题，经过研究找到了问题所在：</p>
</blockquote>
<p>&emsp;&emsp;<strong>在<code>Powertoys</code>设置里面安装完成以后会默认开启<code>快速重音</code>这个东西，需要给这个东西给关闭，然后打字就没有过卡顿了。</strong></p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240112082845958.png"></p>
<h3 id="emsp-emsp-问题得到完美解决！！！"><a href="#emsp-emsp-问题得到完美解决！！！" class="headerlink" title="&emsp;&emsp;问题得到完美解决！！！"></a>&emsp;&emsp;问题得到完美解决！！！</h3>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows - Powertoys</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7.8安装Vmware-tools</title>
    <url>/CentOS-7-8%E5%AE%89%E8%A3%85Vmware-tools/</url>
    <content><![CDATA[<h6 id="首先要进入挂载目录下面，看看有没有挂载"><a href="#首先要进入挂载目录下面，看看有没有挂载" class="headerlink" title="首先要进入挂载目录下面，看看有没有挂载"></a><strong>首先要进入挂载目录下面，看看有没有挂载</strong></h6><p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/33a9072df8752e7880ebb38a91b0431a.png"></p>
<p><strong>首先确认 <code>/mnt</code> 目录下是否有 VMware Tools 的内容。使用 <code>ls /mnt</code> 命令来列出内容。</strong></p>
<ol>
<li><p>如果有，创建一个新的目录来复制文件：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/vmware-tools
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>复制文件到您的家目录下的新文件夹：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> -r /mnt/* ~/vmware-tools
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>进入该目录：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/vmware-tools
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>如果 VMware Tools 是压缩的 tar 文件，解压它：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf VMwareTools-x.x.x-xxxxxx.tar.gz
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>确保将 <code>x.x.x-xxxxxx</code> 替换为实际的文件名。</p>
</li>
<li><p>进入解压后的目录（通常是 <code>vmware-tools-distrib</code>）：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> vmware-tools-distrib
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>以 root 用户运行安装脚本：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ./vmware-install.pl
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>安装完成以后重启，之后执行命令：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status vmware-tools
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<p>运行结果</p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231225122556587.png"></p>
<p>安装完成~</p>
]]></content>
      <categories>
        <category>CentOS</category>
        <category>NetWork</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Mac word缺少字体的解决方式</title>
    <url>/%E5%85%B3%E4%BA%8EMac-word%E7%BC%BA%E5%B0%91%E5%AD%97%E4%BD%93%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>&ensp; 本人也是很少用word，但是收到文件字体是<code>仿宋字体GB2312</code>,<code>Mac office 365 word</code>中不能识别到字体，然后打印出来的字体完全是变了格式，因为自动识别成了宋体黑体，不是<code>仿宋字体GB2312</code>,所以就找到了以下解决方案：</p>
<p>&ensp;首先就是下载字体，当然我这已经找好合集了，我只需要传到网盘上面，有需要的自行下载即可（<a href="https://pan.baidu.com/s/1KRGAE_oOPLGgIa2Lm1r4gQ?pwd=9v3a">下载链接</a>）</p>
<h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>&ensp; 找到<code>应用程序</code>中的<code>word</code>鼠标右键，显示包内容，然后回车</p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240102122414174.png"></p>
<h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>&ensp; 一次打开文件夹：<code>/Contents/Resources/DFonts</code>这就是存放字体的路径，完成路径<code>/Applications/Microsoft Word.app/Contents/Resources/DFonts</code></p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240102122650195.png"></p>
<h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>&ensp; 字体解压以后给你需要的字体直接拖进去即可：</p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240102123002189.png"></p>
<h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p>&ensp; 一定需要进行电脑重启，这样字体才能生效，在打开<code>word</code>或者是之前未能识别字体的文档都能识别了，问题解决~</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题之hexo-theme-matery踩坑</title>
    <url>/Hexo%E4%B8%BB%E9%A2%98%E4%B9%8Bhexo-theme-matery%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h2 id="1、序言："><a href="#1、序言：" class="headerlink" title="1、序言："></a>1、序言：</h2><blockquote>
<p>   最近元旦放假，想着自己也没啥事情要做的，自己博客也是好久没有更新过了，自己想换一个主题，然后参照了很多主题，最后选择了github上面的开源主题<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-thme-matery</a>这个主题，然后就有了下面就是自己遇到的一些坑了~</p>
</blockquote>
<h2 id="2、踩坑"><a href="#2、踩坑" class="headerlink" title="2、踩坑"></a>2、踩坑</h2><h3 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h3><p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231231222639509.png"></p>
<p>上图箭头指的就是我踩坑的第一个点了，这个其实也是怪我自己没有好好去看官方文档，其实这里就是你想要的博客名称，但是这个配置文件里面是没有显示的，这个需要你手动去添加，在根目录配置文件里面修改<code>themes/hexo-theme-matery/_config.yml</code>在<code>_config.yml</code>配置文件里面进行添加：</p>
<pre class="line-numbers language-bash"><code class="language-bash">title: Couture's Blog       <span class="token comment" spellcheck="true"># title后面就是你的博客名字，也就是我上面箭头指的地方</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改完成以后，就是下面这样的了，第一个坑算是解决了</p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231231222609248.png"></p>
<h3 id="2-2-副标题"><a href="#2-2-副标题" class="headerlink" title="2.2 副标题"></a>2.2 副标题</h3><p>先说明这个问题如何产生，如下图（当然这个是我已经修改好了），没有修改的话上面这段话显示的是<code>subtitle</code>,我一直以为副标题在配置文件中修改：</p>
<p><code>subtitle</code>配置文件：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">subtitle</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否循环</span>
  <span class="token key atrule">showCursor</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否显示光标</span>
  <span class="token key atrule">startDelay</span><span class="token punctuation">:</span> <span class="token number">300 </span><span class="token comment" spellcheck="true"># 开始延迟</span>
  <span class="token key atrule">typeSpeed</span><span class="token punctuation">:</span> <span class="token number">100 </span><span class="token comment" spellcheck="true"># 打字速度</span>
  <span class="token key atrule">backSpeed</span><span class="token punctuation">:</span> <span class="token number">50 </span><span class="token comment" spellcheck="true"># 删除速度</span>
  <span class="token key atrule">sub</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> 忽有故人心上过<span class="token punctuation">,</span>回首山河已是秋<span class="token punctuation">,</span>恰有相思同沐雪<span class="token punctuation">,</span>此生已算共白头
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是我发现问题根本不是在这里，而是在<code>themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs</code>在博客主题里面的<code>bg-cover-content.ejs</code>这个文件夹里面，第7行8行之间，下面我也给配置文件内容给列出来，对应修改就行了，第二个坑也算是给解决了。</p>
<pre class="line-numbers language-ejs"><code class="language-ejs"><div class="row">
    <div class="col s10 offset-s1 m8 offset-m2 l8 offset-l2">
        <div class="brand">
            <div class="title center-align">
                <% if (config.subtitle && config.subtitle.length > 0) &#123; %>
                <%= config.subtitle %>
                <% &#125; else &#123; %>
                        物来顺应，未来不迎，当时不杂，既过不恋  
                <% &#125; %>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231231222711587.png"></p>
<p>上面是我修改这个副标题的方式，可能看到这篇博客的大佬们还有更好的修改方式，我可能只是用了一种最笨的方式了。</p>
<h3 id="2-3-代码块之究极大坑"><a href="#2-3-代码块之究极大坑" class="headerlink" title="2.3 代码块之究极大坑"></a>2.3 代码块之究极大坑</h3><p>问题产生，如图所示的代码块显示出了明显的问题：</p>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/11111.png"></p>
<p>我最开始想着是我在<code>_config.yml</code>配置文件中没有设置好，但是我看配置文件中的相关的是<code>code</code>,没有代码块的样式设置，只有一些开关如下：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 代码块相关</span>
<span class="token key atrule">code</span><span class="token punctuation">:</span>
  <span class="token key atrule">lang</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 代码块是否显示名称</span>
  <span class="token key atrule">copy</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 代码块是否可复制</span>
  <span class="token key atrule">shrink</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 代码块是否可以收缩</span>
  <span class="token key atrule">break</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 代码是否折行</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这些显示，我是怎么设置都不能解决问题，然后就开始百度查询问题解决方式，最后经过不懈努力，终于是找到了方式，这个<code>github</code>的<code>issue</code>中也有其他的小伙伴提到过，我的解决方案：</p>
<h5 id="2-3-1-首先要安装插件hexo-prism-plugin："><a href="#2-3-1-首先要安装插件hexo-prism-plugin：" class="headerlink" title="2.3.1 首先要安装插件hexo-prism-plugin："></a>2.3.1 首先要安装插件<code>hexo-prism-plugin</code>：</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-prism-plugin --save
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="2-3-2-因为hexo主题自带有highlight语法高亮插件，这个插件要禁用"><a href="#2-3-2-因为hexo主题自带有highlight语法高亮插件，这个插件要禁用" class="headerlink" title="2.3.2 因为hexo主题自带有highlight语法高亮插件，这个插件要禁用"></a>2.3.2 因为<code>hexo</code>主题自带有<code>highlight</code>语法高亮插件，这个插件要禁用</h5><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 禁用</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  
  
<span class="token comment" spellcheck="true"># 禁用以后下面的这些都不用管的</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2.3.3 开始配置<code>hexo-prism-plugin</code>插件，然后插件的配置用途我在下面也进行解释说明</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true		  </span><span class="token comment" spellcheck="true"># 插件是否开启</span>
  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span> <span class="token comment" spellcheck="true"># 插件主题</span>
  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 预加载功能是否开启</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 行号是否开启</span>
  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="2-3-4-看最后的显示效果"><a href="#2-3-4-看最后的显示效果" class="headerlink" title="2.3.4 看最后的显示效果"></a>2.3.4 看最后的显示效果</h5><p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231231222806955.png"></p>
<h5 id="2-4-5-到此这个坑已经是解决了。"><a href="#2-4-5-到此这个坑已经是解决了。" class="headerlink" title="2.4.5 到此这个坑已经是解决了。"></a>2.4.5 到此这个坑已经是解决了。</h5><h3 id="3、致谢"><a href="#3、致谢" class="headerlink" title="3、致谢"></a>3、致谢</h3><p>感谢开源作者<a href="https://github.com/blinkfox">@Blinkfox</a>的贡献精美主题</p>
<p>对我来说这个主题里面的很多功能我是没有启用的，目前看来也已经是够用了，记录一些琐碎的东西，也希望更多伙伴能一起讨论关于这个主题的一些东西，共同学习和进步，希望我的这篇记录也能给你带来些许的帮助~</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac自带文件修改</title>
    <url>/Mac%E8%87%AA%E5%B8%A6%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<h3 id="问题所在："><a href="#问题所在：" class="headerlink" title="问题所在："></a>问题所在：</h3><span id="more"></span>
<img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231112151723433.png" alt="image-20231112151723433" style="zoom:50%;" />

<p>想要修改<code>Mac</code>系统的文件，但是上图来看，没有操作权限</p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ol>
<li><h5 id="禁用SIP并删除文件："><a href="#禁用SIP并删除文件：" class="headerlink" title="禁用SIP并删除文件："></a><strong>禁用SIP并删除文件：</strong></h5><ul>
<li><p>重启电脑，并在启动时按住<code>Command + R</code> 进入恢复模式。</p>
</li>
<li><p>打开终端（在“实用工具”菜单中选择“终端”）。</p>
</li>
<li><p>在终端中输入以下命令来禁用SIP：</p>
<pre><code>csrutil disable
</code></pre>
</li>
<li><p>重启电脑。</p>
</li>
<li><p>重新尝试删除文件：</p>
<pre><code>sudo rm -rf ~/Desktop/hosts
</code></pre>
</li>
</ul>
</li>
<li><h5 id="重新启用SIP："><a href="#重新启用SIP：" class="headerlink" title="重新启用SIP："></a><strong>重新启用SIP：</strong></h5><ul>
<li><p>重启电脑，并在启动时按住<code>Command + R</code> 进入恢复模式。</p>
</li>
<li><p>打开终端，输入以下命令来重新启用SIP：</p>
<pre><code>csrutil enable
</code></pre>
</li>
<li><p>重启电脑。</p>
</li>
</ul>
</li>
</ol>
<p>问题解决!!!</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac - Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 22.04配置静态IP地址</title>
    <url>/Ubuntu-22-04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p>进入系统以后：</p>
<p>编辑网络配置文件（<code>nano</code>或者<code>vim</code>）</p>
<span id="more"></span>
<pre class="line-numbers language-bash"><code class="language-bash">couture@couture:~$ <span class="token function">sudo</span> vim /etc/netplan/00-installer-config.yaml 

<span class="token comment" spellcheck="true"># This is the network config written by 'subiquity'</span>
network:
  ethernets:
    ens33:
      dhcp4: <span class="token boolean">true</span>
  version: 2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将 <code>dhcp4: true</code> 修改为 <code>dhcp4: false</code>，然后在<code>ethernets</code>下添加您的<a href="https://so.csdn.net/so/search?q=%E9%9D%99%E6%80%81IP&spm=1001.2101.3001.7020">静态IP</a>配置</p>
<pre class="line-numbers language-bash"><code class="language-bash">network:
  ethernets:
    enp0s3:
      dhcp4: <span class="token boolean">false</span>
      addresses: <span class="token punctuation">[</span>192.168.1.10/24<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 静态IP和子网掩码</span>
      gateway4: 192.168.1.1  <span class="token comment" spellcheck="true"># 默认网关</span>
      nameservers:
        addresses: <span class="token punctuation">[</span>8.8.8.8, 8.8.4.4<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># DNS服务器</span>
  version: 2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>关闭并且保存文件,然后重启网络</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> netplan apply

<span class="token function">sudo</span> systemctl restart network-manager
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu - Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS网配置模板</title>
    <url>/CentOS%E7%BD%91%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>rootClocalhost~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /etc/sysconf ig/network-scripts/</span>
<span class="token punctuation">[</span>rootClocalhost~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>
<span class="token punctuation">[</span>rootClocalhost~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vi ifcfg-ens160</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /etc/sysconfig/network-scripts/</span>
<span class="token punctuation">[</span>root@localhost network-scripts<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim ifcfg-ens160 </span>

TYPE<span class="token operator">=</span><span class="token string">"Ethernet"</span>
PROXY_METHOD<span class="token operator">=</span><span class="token string">"none"</span>
BROWSER_ONLY<span class="token operator">=</span><span class="token string">"no"</span>
BOOTPROTO<span class="token operator">=</span><span class="token string">"static"</span>
DEFROUTE<span class="token operator">=</span><span class="token string">"yes"</span>
IPV4_FAILURE_FATAL<span class="token operator">=</span><span class="token string">"no"</span>
IPV6INIT<span class="token operator">=</span><span class="token string">"yes"</span>
IPV6_AUTOCONF<span class="token operator">=</span><span class="token string">"yes"</span>
IPV6_DEFROUTE<span class="token operator">=</span><span class="token string">"yes"</span>
IPV6_FAILURE_FATAL<span class="token operator">=</span><span class="token string">"no"</span>
IPV6_ADDR_GEN_MODE<span class="token operator">=</span><span class="token string">"stable-privacy"</span>
NAME<span class="token operator">=</span><span class="token string">"ens160"</span>
UUID<span class="token operator">=</span><span class="token string">"c203d758-1006-4fed-85cf-b485feac9682"</span>
DEVICE<span class="token operator">=</span><span class="token string">"ens160"</span>
ONBOOT<span class="token operator">=</span><span class="token string">"yes"</span>
IPADDR<span class="token operator">=</span>192.168.200.181
NETMASK<span class="token operator">=</span>255.255.255.0
GATEWAY<span class="token operator">=</span>192.168.200.2
DNS1<span class="token operator">=</span>114.114.114.114

<span class="token comment" spellcheck="true"># 重启网卡 </span>
systemctl restart network
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux CentOS</category>
      </categories>
      <tags>
        <tag>CentOS - Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>YMAL文章语法</title>
    <url>/YMAL%E6%96%87%E7%AB%A0%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><code>title</code>：文档或博文的标题。</li>
<li><code>date</code>：文档或博文创建或发布的日期和时间。<span id="more"></span></li>
<li><code>tags</code>：与文档或博文相关的关键词或标签的列表。</li>
<li><code>categories</code>：文档或博文所属的类别或主题的列表。</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 标题
<span class="token key atrule">description</span><span class="token punctuation">:</span> 这是文档的简要描述。
<span class="token key atrule">date</span><span class="token punctuation">:</span> 日期
<span class="token key atrule">author</span><span class="token punctuation">:</span> 作者名
<span class="token key atrule">thumbnail</span><span class="token punctuation">:</span> /path/to/thumbnail.jpg  <span class="token comment" spellcheck="true"># 封面图像或缩略图</span>
<span class="token key atrule">external_link</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.com <span class="token comment" spellcheck="true"># 链接</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">1.0 </span><span class="token comment" spellcheck="true"># 版本号</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> 标签1
  <span class="token punctuation">-</span> 标签2
<span class="token key atrule">categories</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> 分类1
  <span class="token punctuation">-</span> 分类2
<span class="token key atrule">featured</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 顶置</span>
<span class="token punctuation">---</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>YML - Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>多平台使用 Hexo+GithubPage</title>
    <url>/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E4%BD%BF%E7%94%A8-Hexo-GithubPage/</url>
    <content><![CDATA[<p>将一台电脑的博客所有目录直接拷贝到另一台电脑上面</p>
<span id="more"></span>

<pre class="line-numbers language-bash"><code class="language-bash">couture@MacPro  ~/MyBlog  
位于分支 main
无文件要提交，干净的工作区
git@github.com: Permission denied <span class="token punctuation">(</span>publickey<span class="token punctuation">)</span>.
致命错误：无法读取远程仓库。

请确认您有正确的访问权限并且仓库存在。
FATAL Something's wrong. Maybe you can <span class="token function">find</span> the solution here: https://hexo.io/docs/troubleshooting.html
Error: Spawn failed
    at ChildProcess.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/hexo-util/lib/spawn.js:51:21<span class="token punctuation">)</span>
    at ChildProcess.emit <span class="token punctuation">(</span>node:events:514:28<span class="token punctuation">)</span>
    at ChildProcess._handle.onexit <span class="token punctuation">(</span>node:internal/child_process:291:12<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个问题属于电脑没有当前GitHub的账户的ssh公钥，然后给公钥添加到当前电脑即可，添加方式:</p>
<p><a href="https://blog.csdn.net/qq_40047019/article/details/122898308">添加方式连接</a></p>
<p>添加完成以后，即可正常更新博客~</p>
]]></content>
      <tags>
        <tag>hexo - 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 11取消右键二级菜单</title>
    <url>/Windows-11%E5%8F%96%E6%B6%88%E5%8F%B3%E9%94%AE%E4%BA%8C%E7%BA%A7%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<p>因为不习惯<code>Windows11</code>鼠标右键反人类的二级菜单方式，采用命令的方式给屏蔽掉</p>
<p>修改成<code>Windows10</code>样式</p>
<p><strong>搜索<code>CMD</code>，然后点击管理员运行</strong></p>
<pre class="line-numbers language-改win10："><code class="language-改win10：">reg add "HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32" /f /ve
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<p><strong>然后回车执行，会提示<code>successful</code></strong></p>
<p><strong>然后去任务管理里面去重启<code>Windows资源管理器</code></strong></p>
<p><img src="https://s2.loli.net/2023/07/21/p3aCJT6njeslfFH.png"></p>
<p><strong>重启完成以后打开，鼠标右键如下，成功</strong></p>
<p><img src="https://s2.loli.net/2023/07/21/vxnXSlNf8Hp7zsk.png"></p>
<p>如果想改回原始的，命令如下，重复上面一样的操，作执行<code>命令</code>-&gt;<code>重启Windows资源管理器</code></p>
<p><code>Windows11</code>命令：</p>
<pre class="line-numbers language-bash"><code class="language-bash">reg delete <span class="token string">"HKCU\Software\Classes\CLSID\&amp;#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&amp;#125;"</span> /f
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Windows 11</category>
      </categories>
      <tags>
        <tag>Windows 11</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM常快捷键</title>
    <url>/VIM%E5%B8%B8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>下面是一些在 Vim 编辑器中常用的快捷键：</p>
<h4 id="插入模式（Insert-Mode）："><a href="#插入模式（Insert-Mode）：" class="headerlink" title="插入模式（Insert Mode）："></a><strong>插入模式</strong>（Insert Mode）：</h4><span id="more"></span>
<ul>
<li><code>i</code>：在当前光标位置进入插入模式。</li>
<li><code>a</code>：在当前光标后插入文本。</li>
<li><code>I</code>：在当前行的开头插入文本。</li>
<li><code>A</code>：在当前行的末尾插入文本。</li>
<li><code>o</code>：在当前行的下方插入新行。</li>
<li><code>O</code>：在当前行的上方插入新行。</li>
</ul>
<h4 id="命令行模式（Command-Line-Mode）："><a href="#命令行模式（Command-Line-Mode）：" class="headerlink" title="命令行模式（Command Line Mode）："></a><strong>命令行模式</strong>（Command Line Mode）：</h4><ul>
<li><code>:</code>：进入命令行模式。</li>
<li><code>:w</code>：保存文件。</li>
<li><code>:q</code>：退出 Vim。</li>
<li><code>:wq</code>：保存文件并退出 Vim。</li>
<li><code>:q!</code>：强制退出 Vim，丢弃对文件的修改。</li>
</ul>
<h4 id="移动光标："><a href="#移动光标：" class="headerlink" title="移动光标："></a><strong>移动光标</strong>：</h4><ul>
<li><code>h</code>：向左移动光标。</li>
<li><code>j</code>：向下移动光标。</li>
<li><code>k</code>：向上移动光标。</li>
<li><code>l</code>：向右移动光标。</li>
<li><code>gg</code>：跳到文件开头。</li>
<li><code>G</code>：跳到文件末尾。</li>
<li><code>0</code>：跳到当前行的开头。</li>
<li><code>$</code>：跳到当前行的末尾。</li>
<li><code>w</code>：跳到下一个单词的开头。</li>
<li><code>b</code>：跳到上一个单词的开头。</li>
<li><code>Ctrl + f</code>：向下翻页。</li>
<li><code>Ctrl + b</code>：向上翻页。</li>
</ul>
<h4 id="复制、粘贴和删除："><a href="#复制、粘贴和删除：" class="headerlink" title="复制、粘贴和删除："></a><strong>复制、粘贴和删除</strong>：</h4><ul>
<li><code>yy</code>：复制当前行。</li>
<li><code>dd</code>：删除当前行。</li>
<li><code>p</code>：粘贴已复制或删除的文本。</li>
<li><code>x</code>：删除当前光标所在位置的字符。</li>
<li><code>u</code>：撤销上一次操作。</li>
<li><code>Ctrl + r</code>：重做上一次撤销的操作。</li>
</ul>
<h4 id="查找和替换："><a href="#查找和替换：" class="headerlink" title="查找和替换："></a><strong>查找和替换</strong>：</h4><ul>
<li><code>/pattern</code>：向下查找匹配的模式。</li>
<li><code>?pattern</code>：向上查找匹配的模式。</li>
<li><code>n</code>：在当前方向上查找下一个匹配。</li>
<li><code>N</code>：在当前方向上查找上一个匹配。</li>
<li><code>:s/old/new</code>：替换当前行中第一个匹配的字符串。</li>
<li><code>:s/old/new/g</code>：替换当前行中所有匹配的字符串。</li>
<li><code>:%s/old/new/g</code>：替换整个文件中所有匹配的字符串。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><ol>
<li><strong>ls</strong>：列出目录内容。<span id="more"></span></li>
<li><strong>cd</strong>：切换目录。</li>
<li><strong>pwd</strong>：显示当前工作目录的路径。</li>
<li><strong>mkdir</strong>：创建目录。</li>
<li><strong>rm</strong>：删除文件或目录。</li>
<li><strong>cp</strong>：复制文件或目录。</li>
<li><strong>mv</strong>：移动文件或目录，或重命名文件或目录。</li>
<li><strong>cat</strong>：显示文件内容。</li>
<li><strong>grep</strong>：在文件中搜索指定模式。</li>
<li><strong>chmod</strong>：修改文件或目录的权限。</li>
<li><strong>chown</strong>：修改文件或目录的所有者。</li>
<li><strong>chgrp</strong>：修改文件或目录的所属组。</li>
<li><strong>sudo</strong>：以超级用户权限执行命令。</li>
<li><strong>apt-get</strong>（Debian&#x2F;Ubuntu）或 <strong>yum</strong>（CentOS&#x2F;RHEL）：包管理器，用于安装、更新和卸载软件包。</li>
<li><strong>wget</strong>：从网络下载文件。</li>
<li><strong>ssh</strong>：远程登录到另一台计算机。</li>
<li><strong>tar</strong>：打包和解压文件。</li>
<li><strong>df</strong>：显示文件系统的磁盘使用情况。</li>
<li><strong>top</strong>：实时显示系统资源的使用情况和运行的进程。</li>
<li><strong>ps</strong>：显示当前运行的进程。</li>
<li><strong>kill</strong>：终止正在运行的进程。</li>
<li><strong>ifconfig</strong>（已被 ip 命令取代）：显示和配置网络接口。</li>
<li><strong>ping</strong>：发送 ICMP Echo 请求以测试网络连接。</li>
<li><strong>traceroute</strong>：跟踪数据包在网络中的路径。</li>
<li><strong>man</strong>：查看命令的手册页。</li>
</ol>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo:pandoc exited with code null</title>
    <url>/Hexo-pandoc-exited-with-code-null/</url>
    <content><![CDATA[<h4 id="在hexo更新文章遇到的问题："><a href="#在hexo更新文章遇到的问题：" class="headerlink" title="在hexo更新文章遇到的问题："></a>在hexo更新文章遇到的问题：</h4><span id="more"></span>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span><span class="token punctuation">[</span>hexo-renderer-pandoc<span class="token punctuation">]</span> pandoc exited with code null. FATAL Something<span class="token string">'s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html Error: [ERROR][hexo-renderer-pandoc] On /Users/couture/MyBlog/source/_posts/C-windows-环境搭建.md [ERROR][hexo-renderer-pandoc] pandoc exited with code null.

FATAL Something'</span>s wrong. Maybe you can <span class="token function">find</span> the solution here: https://hexo.io/docs/troubleshooting.html
Error:
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span><span class="token punctuation">[</span>hexo-renderer-pandoc<span class="token punctuation">]</span> On /Users/couture/MyBlog/source/_posts/C-windows-环境搭建.md
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span><span class="token punctuation">[</span>hexo-renderer-pandoc<span class="token punctuation">]</span> pandoc exited with code null.
at Hexo.pandocRenderer <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/hexo-renderer-pandoc/index.js:35:11<span class="token punctuation">)</span>
at Hexo.tryCatcher <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/bluebird/js/release/util.js:16:23<span class="token punctuation">)</span>
at Hexo.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/bluebird/js/release/method.js:15:34<span class="token punctuation">)</span>
at /Users/couture/MyBlog/node_modules/hexo/lib/hexo/render.js:81:22
at tryCatcher <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/bluebird/js/release/util.js:16:23<span class="token punctuation">)</span>
at Promise._settlePromiseFromHandler <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/bluebird/js/release/promise.js:547:31<span class="token punctuation">)</span>
at Promise._settlePromise <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/bluebird/js/release/promise.js:604:18<span class="token punctuation">)</span>
at Promise._settlePromiseCtx <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/bluebird/js/release/promise.js:641:10<span class="token punctuation">)</span>
at _drainQueueStep <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/bluebird/js/release/async.js:97:12<span class="token punctuation">)</span>
at _drainQueue <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/bluebird/js/release/async.js:86:9<span class="token punctuation">)</span>
at Async._drainQueues <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/bluebird/js/release/async.js:102:5<span class="token punctuation">)</span>
at Async.drainQueues <span class="token punctuation">[</span>as _onImmediate<span class="token punctuation">]</span> <span class="token punctuation">(</span>/Users/couture/MyBlog/node_modules/bluebird/js/release/async.js:15:14<span class="token punctuation">)</span>
at process.processImmediate <span class="token punctuation">(</span>node:internal/timers:478:21<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<!--more-->


<h4 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h4><h5 id="重新安装hexo-renderer-pandoc模块"><a href="#重新安装hexo-renderer-pandoc模块" class="headerlink" title="重新安装hexo-renderer-pandoc模块"></a>重新安装<code>hexo-renderer-pandoc</code>模块</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-renderer-pandoc
<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-pandoc
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="如不成功，用hexo-renderer-marked代替hexo-renderer-pandoc模块渲染器"><a href="#如不成功，用hexo-renderer-marked代替hexo-renderer-pandoc模块渲染器" class="headerlink" title="如不成功，用hexo-renderer-marked代替hexo-renderer-pandoc模块渲染器"></a>如不成功，用hexo-renderer-marked代替hexo-renderer-pandoc模块渲染器</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-renderer-pandoc
<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-marked
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>问题解决~</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian11 安装 Docker</title>
    <url>/Debian11-%E5%AE%89%E8%A3%85-Docker/</url>
    <content><![CDATA[<h3 id="一、安装Docker"><a href="#一、安装Docker" class="headerlink" title="一、安装Docker"></a>一、安装<code>Docker</code></h3><h4 id="1-更新系统软件包"><a href="#1-更新系统软件包" class="headerlink" title="1.更新系统软件包"></a>1.更新系统软件包</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update
<span class="token function">sudo</span> apt upgrade
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<span id="more"></span>
<h4 id="2-安装所需的依赖库和工具："><a href="#2-安装所需的依赖库和工具：" class="headerlink" title="2.安装所需的依赖库和工具："></a>2.安装所需的依赖库和工具：</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> apt-transport-https ca-certificates curl gnupg lsb-release
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="3-添加Docker官方GPT秘钥："><a href="#3-添加Docker官方GPT秘钥：" class="headerlink" title="3.添加Docker官方GPT秘钥："></a>3.添加<code>Docker</code>官方<code>GPT</code>秘钥：</h3><pre class="line-numbers language-bash"><code class="language-bash">curl -fsSL https://download.docker.com/linux/debian/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="4-设置Docker稳定版存储库"><a href="#4-设置Docker稳定版存储库" class="headerlink" title="4.设置Docker稳定版存储库"></a>4.设置<code>Docker</code>稳定版存储库</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="5-更新软件包索引：-这一步可要可不要，因为前面已经执行了"><a href="#5-更新软件包索引：-这一步可要可不要，因为前面已经执行了" class="headerlink" title="5.更新软件包索引：(这一步可要可不要，因为前面已经执行了)"></a>5.更新软件包索引：(这一步可要可不要，因为前面已经执行了)</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="6-安装Docker引擎："><a href="#6-安装Docker引擎：" class="headerlink" title="6.安装Docker引擎："></a>6.安装Docker引擎：</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="7-添加当前用户到Docker组："><a href="#7-添加当前用户到Docker组：" class="headerlink" title="7.添加当前用户到Docker组："></a>7.添加当前用户到<code>Docker</code>组：</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token variable">$USER</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="安装成功以后提示："><a href="#安装成功以后提示：" class="headerlink" title="安装成功以后提示："></a>安装成功以后提示：</h6><pre class="line-numbers language-bash"><code class="language-bash">root@Debian:~<span class="token comment" spellcheck="true"># docker version #查看版本</span>
Client: Docker Engine - Community
 Version:           24.0.2
 API version:       1.43
 Go version:        go1.20.4
 Git commit:        cb74dfc
 Built:             Thu May 25 21:52:17 2023
 OS/Arch:           linux/amd64
 Context:           default

Server: Docker Engine - Community
 Engine:
  Version:          24.0.2
  API version:      1.43 <span class="token punctuation">(</span>minimum version 1.12<span class="token punctuation">)</span>
  Go version:       go1.20.4
  Git commit:       659604f
  Built:            Thu May 25 21:52:17 2023
  OS/Arch:          linux/amd64
  Experimental:     <span class="token boolean">false</span>
 containerd:
  Version:          1.6.21
  GitCommit:        3dce8eb055cbb6872793272b4f20ed16117344f8
 runc:
  Version:          1.1.7
  GitCommit:        v1.1.7-0-g860f061
 docker-init:
  Version:          0.19.0
  GitCommit:        de40ad0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="二、安装Docker-Compose"><a href="#二、安装Docker-Compose" class="headerlink" title="二、安装Docker Compose"></a>二、安装<code>Docker Compose</code></h3><p>下载 <code>Docker Compose</code> 二进制文件：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> curl -L <span class="token string">"https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>"</span> -o /usr/local/bin/docker-compose
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>添加执行权限：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>验证<code>Docker Compose</code>是否安装成功：</p>
<pre class="line-numbers language-bash"><code class="language-bash">docker-compose version
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Debian</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Debian - Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu UFW 防火墙</title>
    <url>/Ubuntu-UFW-%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<p><code>Ubuntu</code>防火墙（<code>Uncomplicated</code> <code>Firewall</code>，简称<code>ufw</code>）是一个用户友好的前端工具，用于配置底层的<code>iptables</code>防火墙规则。它旨在简化防火墙的配置过程，使其适用于不熟悉<code>iptables</code>命令的用户。</p>
<h3 id="一、安装UFW"><a href="#一、安装UFW" class="headerlink" title="一、安装UFW"></a>一、安装<code>UFW</code></h3><p><code>UFW</code> 是标准<code> Ubuntu 20.04</code> 安装过程中的一部分，它应该已经在你的系统上存在。如果因为某些原因，它没有被安装，你可以通过输入下面的命令安装它：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update
<span class="token function">sudo</span> apt <span class="token function">install</span> ufw
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<span id="more"></span>
<h3 id="二、检查UFW的状态"><a href="#二、检查UFW的状态" class="headerlink" title="二、检查UFW的状态"></a>二、检查<code>UFW</code>的状态</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw status verbose
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="三、防火墙的基本命令"><a href="#三、防火墙的基本命令" class="headerlink" title="三、防火墙的基本命令"></a>三、防火墙的基本命令</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw <span class="token function">enable</span> <span class="token comment" spellcheck="true"># 启用防火墙</span>

<span class="token function">sudo</span> ufw disable <span class="token comment" spellcheck="true"># 禁用防火墙</span>

<span class="token function">sudo</span> ufw status <span class="token comment" spellcheck="true"># 查看防火墙状态</span>

<span class="token function">sudo</span> ufw allow <span class="token operator">&lt;</span>端口号<span class="token operator">></span> <span class="token comment" spellcheck="true"># 允许特定端口</span>

<span class="token function">sudo</span> ufw deny <span class="token operator">&lt;</span>端口号<span class="token operator">></span> <span class="token comment" spellcheck="true"># 禁止特定端口</span>

<span class="token function">sudo</span> ufw allow from <span class="token operator">&lt;</span>IP地址<span class="token operator">></span> <span class="token comment" spellcheck="true"># 允许特定IP地址访问</span>

<span class="token function">sudo</span> ufw deny from <span class="token operator">&lt;</span>IP地址<span class="token operator">></span> <span class="token comment" spellcheck="true"># 禁止特定IP地址访问</span>

<span class="token function">sudo</span> ufw allow from <span class="token operator">&lt;</span>IP地址<span class="token operator">></span> to any port <span class="token operator">&lt;</span>端口号<span class="token operator">></span> <span class="token comment" spellcheck="true"># 允许特定IP地址访问特定端口号 </span>

<span class="token function">sudo</span> ufw status numbered <span class="token comment" spellcheck="true"># 查看规则编号</span>

<span class="token function">sudo</span> ufw delete <span class="token operator">&lt;</span>规则编号<span class="token operator">></span> <span class="token comment" spellcheck="true"># 删除规则</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="四、校园网的案例"><a href="#四、校园网的案例" class="headerlink" title="四、校园网的案例"></a>四、校园网的案例</h3><p>校园网访问在国外服务器上部署的网站，并使用<code>ufw</code>进行限制，您可以按照以下步骤进行操作：</p>
<ol>
<li><p>获取校园网的公网<code>IP</code>地址范围：首先，您需要获取校园网的公网<code>IP</code>地址范围。您可以联系您的网络管理员或查阅校园网相关的文档或资料以获取这些信息。</p>
</li>
<li><p>添加允许规则：使用以下命令，将校园网的公网IP地址范围添加到允许访问的规则中。将 <code>&lt;校园网公网IP范围&gt;</code> 替换为您实际校园网的公网IP地址范围：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow from <span class="token operator">&lt;</span>校园网公网IP范围<span class="token operator">></span> to any
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>例如，如果校园网的公网IP地址范围是 203.0.113.0&#x2F;24，可以执行以下命令：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow from 203.0.113.0/24 to any
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这将允许来自校园网公网IP范围的流量访问任何端口。</p>
</li>
<li><p>添加拒绝规则：为了确保只有校园网的公网IP地址可以访问您的网站，您可以添加一条拒绝规则来阻止其他IP地址的访问。使用以下命令添加拒绝规则：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw deny from any to any
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这将拒绝来自任何其他IP地址的流量访问任何端口。</p>
</li>
<li><p>确认规则设置：您可以使用以下命令确认规则已正确设置：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ufw status
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此命令将显示当前的<code>ufw</code>规则列表，包括允许和拒绝的规则。</p>
</li>
<li><p>测试访问：在完成配置后，您可以尝试使用校园网以外的公网<code>IP</code>地址访问您的网站，以确保它们被正确地拒绝访问。只有来自校园网公网IP范围的流量才应该能够访问您的网站。</p>
</li>
</ol>
<p>请注意，确保在配置之前备份重要的配置文件，并在完成后验证规则已成功设置。同时，了解校园网的公网<code>IP</code>地址范围非常重要，以确保只有受限制的IP地址可以访问您的网站。</p>
]]></content>
      <categories>
        <category>UFW</category>
        <category>Ubuntu UFW 防火墙</category>
      </categories>
      <tags>
        <tag>ufw - 防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>常见网络设备密码</title>
    <url>/%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h3 id="H3C"><a href="#H3C" class="headerlink" title="H3C"></a><code>H3C</code></h3><p>（华三）路由器交换机默认用户名和密码</p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>admin</code>或<code>adminer</code></p>
</blockquote>
<span id="more"></span>
<h3 id="HUAWEI"><a href="#HUAWEI" class="headerlink" title="HUAWEI"></a><code>HUAWEI</code></h3><p><code>V2R900</code>之前版本</p>
<blockquote>
<p>无需使用用户名和密码</p>
</blockquote>
<p><code>V2R900</code>-<code>V2R10C00</code></p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>admin@huawei.com</code></p>
</blockquote>
<h3 id="Cisco"><a href="#Cisco" class="headerlink" title="Cisco"></a><code>Cisco</code></h3><p>思科路由器，交换机大多数默认用户名和密码：</p>
<blockquote>
<p>默认用户名：<code>admin</code>或<code>cisco</code></p>
<p>默认密码：<code>admin</code>或<code>cisco</code></p>
</blockquote>
<h3 id="Tp-Link"><a href="#Tp-Link" class="headerlink" title="Tp-Link"></a><code>Tp-Link</code></h3><p>中心ZTE路由器交换机默认用户名和密码</p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>admin</code></p>
</blockquote>
<h3 id="Juniper"><a href="#Juniper" class="headerlink" title="Juniper"></a><code>Juniper</code></h3><ul>
<li><code>Juniper</code>有两种默认用户名和密码</li>
</ul>
<p><code>netscreen</code>设备：</p>
<blockquote>
<p>默认用户名：<code>netscreen</code></p>
<p>默认密码：<code>netscreen</code></p>
</blockquote>
<p><code>SRX</code>设备：</p>
<blockquote>
<p>默认用户名：<code>root</code></p>
<p>默认密码：无（登录以后自己可以设置）</p>
</blockquote>
<h3 id="ZTE"><a href="#ZTE" class="headerlink" title="ZTE"></a><code>ZTE</code></h3><p>中心<code>ZTE</code>路由器交换机默认用户名和密码</p>
<blockquote>
<p>默认用户名：<code>ZXDSL</code></p>
<p>默认密码：<code>ZXDSL</code></p>
</blockquote>
<h3 id="深信服"><a href="#深信服" class="headerlink" title="深信服"></a><code>深信服</code></h3><p>下一代防火墙默认用户名和密码:</p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>admin</code></p>
</blockquote>
<p>全网行为管理AC默认用户名和密码</p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>switch</code></p>
</blockquote>
<h3 id="Alcatel"><a href="#Alcatel" class="headerlink" title="Alcatel"></a><code>Alcatel</code></h3><p><code>Alcatel</code>路由器默认用户名和密码：</p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>switch</code></p>
</blockquote>
]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
      <tags>
        <tag>交换机 - 常见网络设备密码</tag>
      </tags>
  </entry>
  <entry>
    <title>交换机巡检命令</title>
    <url>/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B7%A1%E6%A3%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="交换机巡检命令"><a href="#交换机巡检命令" class="headerlink" title="交换机巡检命令"></a>交换机巡检命令</h1><h3 id="一、思科交换机"><a href="#一、思科交换机" class="headerlink" title="一、思科交换机"></a>一、思科交换机</h3><span id="more"></span>
<pre class="line-numbers language-powershell"><code class="language-powershell">show interface stats <span class="token comment" spellcheck="true"># 查看交换所有接口当前接口流量</span>
show running<span class="token operator">-</span>config <span class="token comment" spellcheck="true">#  查看当前配置信息</span>
show version <span class="token comment" spellcheck="true"># 查看ISO版本信息及设备正常运行时间</span>
show clock <span class="token comment" spellcheck="true"># 查看设备时钟</span>
show vtp status <span class="token comment" spellcheck="true"># 查看交换机vtp配置模式</span>
show vtp password <span class="token comment" spellcheck="true"># 查看交换机vtp配置口令</span>
show env all <span class="token comment" spellcheck="true"># 插卡设备温度，电源和风扇运转参数及是否报警</span>
show inventory <span class="token comment" spellcheck="true"># 调取设备内部板卡出厂模块型号及序列号</span>
show spanning<span class="token operator">-</span>tree root <span class="token comment" spellcheck="true"># 查看交换机生成树根位置</span>
show interface summary <span class="token comment" spellcheck="true"># 查看交换接口当前接口流量</span>
show interface <span class="token punctuation">|</span>ierrors<span class="token punctuation">|</span>FastEthernet<span class="token punctuation">|</span>GigabitEthernet <span class="token comment" spellcheck="true"># 查看接口是够存在大量input或output errors 包错误</span>
show processses cpu <span class="token comment" spellcheck="true"># 查看设备CPU负载</span>
show access<span class="token operator">-</span>list <span class="token comment" spellcheck="true">#查看访问控制列表配置及匹配数据包数量</span>
show logging <span class="token comment" spellcheck="true"># 查看本机内部日志记录情况</span>
show ip route <span class="token comment" spellcheck="true"># 查看路由表</span>
show firewall <span class="token comment" spellcheck="true"># 检查防火墙的工作模式</span>
show conn count <span class="token comment" spellcheck="true"># 检查防火墙并发数</span>
show xlate count <span class="token comment" spellcheck="true"># 检查防火墙nat工作状态</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="二、华为-H3C交换机"><a href="#二、华为-H3C交换机" class="headerlink" title="二、华为&#x2F;H3C交换机"></a>二、华为&#x2F;H3C交换机</h3><pre class="line-numbers language-bash"><code class="language-bash">system-view <span class="token comment" spellcheck="true"># 进入系统视图</span>
user-interface vty 0 4 <span class="token comment" spellcheck="true">#vty就是用telnet/ssh远程进入交换机的界面</span>
screen-length 0 <span class="token comment" spellcheck="true"># 指定要在屏幕上显示行数，0默认是没有分页</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="1-硬件状态，ISO版本信息检查"><a href="#1-硬件状态，ISO版本信息检查" class="headerlink" title="1. 硬件状态，ISO版本信息检查"></a>1. 硬件状态，ISO版本信息检查</h4><pre class="line-numbers language-bash"><code class="language-bash">display clock <span class="token comment" spellcheck="true">#系统时间</span>
display version <span class="token comment" spellcheck="true">#查看版本信息，最近i一次启动的时间</span>
display environment <span class="token comment" spellcheck="true">#设备温度</span>
display device <span class="token comment" spellcheck="true">#单板运行状态</span>
display device manuinfor <span class="token comment" spellcheck="true">#查看设备序列号</span>
display power <span class="token comment" spellcheck="true">#查看电源状况</span>
display fan <span class="token comment" spellcheck="true">#查看风扇状况</span>
disply cpu-usage task <span class="token comment" spellcheck="true">#查看CPU利用率</span>
dispaly memory <span class="token comment" spellcheck="true">#查看内存大小和占用率</span>
dispaly logbuffer <span class="token comment" spellcheck="true">#日志缓冲区</span>
<span class="token function">dir</span> flash <span class="token comment" spellcheck="true">#查看flash</span>
dis boot-loader <span class="token comment" spellcheck="true">#显示软件映像文件</span>
display arp <span class="token comment" spellcheck="true">#显示arp表（目的IP和目的Mac的映射关系）</span>
display mac-address <span class="token comment" spellcheck="true">#查看mac地址表（二层转发通过mac地址表）</span>
display ntp status <span class="token comment" spellcheck="true">#ntp状态信息</span>
reset counters interface <span class="token comment" spellcheck="true">#清除接口统计信息，方便下次巡检查看接口错误包是否增加</span>
display elabel <span class="token comment" spellcheck="true">#路由器设备命令—查看电子标签信息（华为）改用display device manuinfo</span>
display ndp <span class="token comment" spellcheck="true">#路由器设备命令—华三V5版本支持，现在改用display lldp neighbor-information</span>
display diagnostic-information <span class="token comment" spellcheck="true">#故障信息收集</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-系统运行配置状态检查"><a href="#2-系统运行配置状态检查" class="headerlink" title="2. 系统运行配置状态检查"></a>2. 系统运行配置状态检查</h4><pre class="line-numbers language-bash"><code class="language-bash">display interface <span class="token comment" spellcheck="true">#接口流量、链路状态</span>

dis current-configuration inter <span class="token comment" spellcheck="true">#地址分配</span>

dis current-configuration <span class="token operator">|</span>include ospf <span class="token comment" spellcheck="true">#路由扩散</span>

display ip routing-table <span class="token comment" spellcheck="true">#路由信息</span>

display ip interface <span class="token comment" spellcheck="true">#显示 vlan 端口统计数据</span>

display saved-configuration <span class="token comment" spellcheck="true">#保存配置文件</span>

display logbuffer <span class="token comment" spellcheck="true">#日志信息</span>

display port trunk <span class="token comment" spellcheck="true">#查看参与 trunk 的端口</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-STP信息检查"><a href="#3-STP信息检查" class="headerlink" title="3. STP信息检查"></a>3. STP信息检查</h4><pre class="line-numbers language-bash"><code class="language-bash">display stp root <span class="token comment" spellcheck="true">#查看 stp 根情况</span>

display stp brief <span class="token comment" spellcheck="true">#查看 stp 简单信息</span>

display stp abnormal-port <span class="token comment" spellcheck="true">#查看是否有非正常端口</span>

display stp region-configuration <span class="token comment" spellcheck="true">#生成树区域配置</span>

display lldp neighbor-information <span class="token comment" spellcheck="true">#查看链路层邻居发现协议（邻居信息）</span>

display tcp status <span class="token comment" spellcheck="true">#路由器设备命令—tcp统计数据</span>

display tcp statistics <span class="token comment" spellcheck="true">#交换机设备命令—tcp统计数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-vrrp和端口聚合检查"><a href="#4-vrrp和端口聚合检查" class="headerlink" title="4.vrrp和端口聚合检查"></a>4.vrrp和端口聚合检查</h4><pre class="line-numbers language-bash"><code class="language-bash">display vrrp <span class="token comment" spellcheck="true">#查看虚拟路由冗余协议</span>

display vrrp statistics <span class="token comment" spellcheck="true">#查看主备用状态</span>

display link-aggregation summary <span class="token comment" spellcheck="true">#查看链路聚合组的情况</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Switch</category>
        <category>交换机</category>
      </categories>
      <tags>
        <tag>Switch</tag>
        <tag>交换机</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac(MacBookPro M1)MySQL无法打开解决方式</title>
    <url>/Mac-MacBookPro-M1-MySQL%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>1.在mac系统的活动监视器里面找到mysqld的进程选择将它关闭掉，然后打开mac上的命令行去执行命令。</p>
<span id="more"></span>

<p>2.在命令行之中执行命令去给mysql数据库的安装目录赋予一个可以进行读写和执行任意操作的权限，在服务能够运行的情况下无法启动的原因基本上都是因为权限和配置文件的问题所导致的，命令如下：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R mysql /usr/local/mysql/data
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3.命令执行完毕之后再次输入命令去启动mysql数据库，命令如下：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> /usr/local/mysql/support-files/mysql.server start
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>4.执行完毕成功以后出现：</p>
<pre class="line-numbers language-bash"><code class="language-bash">Starting MySQL
.Logging to <span class="token string">'/usr/local/mysql/data/couturedeMacBook-Pro.local.err'</span><span class="token keyword">.</span>
 SUCCESS<span class="token operator">!</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>小知识</title>
    <url>/%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="DTU和RTU是什么："><a href="#DTU和RTU是什么：" class="headerlink" title="DTU和RTU是什么："></a>DTU和RTU是什么：</h3><p>​	DTU和RTU都是指用于远程监控和控制的设备，但它们有不同的含义。</p>
<span id="more"></span>

<p>DTU是数据传输单元（Data Transfer Unit）的缩写，是一种远程数据传输设备。它通常是安装在现场设备上的一种小型智能终端，可以采集现场设备的数据，并通过无线通信或有线通信方式将数据传输到远程服务器或云平台。DTU通常具有数据采集、处理、传输和存储等多种功能。</p>
<p>RTU是远程终端单元（Remote Terminal Unit）的缩写，是一种用于远程监控和控制的设备。它通常是安装在现场设备上的一种小型智能终端，可以采集现场设备的数据，并通过无线通信或有线通信方式将数据传输到远程监控中心。RTU通常具有数据采集、处理、控制和报警等多种功能。</p>
<h3 id="RS232-RS485接口："><a href="#RS232-RS485接口：" class="headerlink" title="RS232&#x2F;RS485接口："></a>RS232&#x2F;RS485接口：</h3><p>​	RS232和RS485都是串行通信接口标准，它们用于在计算机和其他设备之间传输数据。</p>
<p>RS232是一种串行通信标准，用于在计算机和其他设备之间传输数据。它常用于连接调制解调器、打印机、传真机、条形码扫描器等设备。RS232标准规定了数据传输的电气特性、信号格式、数据传输速率等参数。</p>
<p>RS485也是一种串行通信标准，用于在计算机和其他设备之间传输数据。它通常用于连接多个设备，如传感器、控制器、PLC等。RS485标准规定了数据传输的电气特性、信号格式、数据传输速率等参数，并支持多点通信和差分信号传输，可以实现更远距离的数据传输和更可靠的数据传输。</p>
]]></content>
      <categories>
        <category>Agreement</category>
      </categories>
      <tags>
        <tag>Agreement</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建ChatGPT关闭NGINX缓存实现官方回答效果</title>
    <url>/%E6%90%AD%E5%BB%BAChatGPT%E5%85%B3%E9%97%ADNGINX%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E5%AE%98%E6%96%B9%E5%9B%9E%E7%AD%94%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>下面是Nginx配置反向代理方式，当然不仅仅这一种方式</p>
<span id="more"></span>
<pre class="line-numbers language-bash"><code class="language-bash">server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>

listen 80<span class="token punctuation">;</span>

server_name xx.xx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 域名</span>

<span class="token keyword">return</span> 301 https://<span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>

server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>

listen 443 ssl http2<span class="token punctuation">;</span>

server_name xx.cn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 域名</span>

ssl_certificate /etc/nginx/certs/cert08.pem<span class="token punctuation">;</span>

ssl_certificate_key /etc/nginx/certs/key08.pem<span class="token punctuation">;</span>

location /<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>

  proxy_pass http://zxx.xx.xx:3000<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 服务器的地址</span>

  <span class="token comment" spellcheck="true"># 这里是重点，在这里是关闭缓存方式</span>
  proxy_buffering off<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 禁用缓存</span>
  
  
  proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>

  proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>

  proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>

  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>ChatGPT</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>ChatGPT - NGINX</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu使用ssh连接有输入命令有提示</title>
    <url>/Ubuntu%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E6%9C%89%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%9C%89%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p>Ubuntu使用默认的OpenSSH服务作为SSH服务器，当您使用SSH连接到远程计算机时，如果需要有命令提示，您需要完成以下步骤：</p>
<ol>
<li>登录到您的远程计算机<span id="more"></span>     </li>
<li>打开您的<code>SSH</code>配置文件</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/ssh/sshd_config
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="3">
<li>将以下行添加到配置文件的末尾：</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash">PermitUserEnvironment <span class="token function">yes</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="4">
<li><p>保存并关闭文件</p>
</li>
<li><p>重新启动<code>SSH</code>服务器</p>
</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> restart
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="6">
<li>创建一个<code>.bashrc</code>文件并添加一些变量</li>
</ol>
<pre><code>nano ~/.bashrc
</code></pre>
<ol start="7">
<li>添加以下行到文本中：</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> PS1<span class="token operator">=</span><span class="token string">"\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ "</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这会设置您的提示符。</p>
<ol start="8">
<li><p>保存并关闭文件</p>
</li>
<li><p>重新加载<code>bashrc</code>文件</p>
</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这能确保让<code>.bashrc</code>的变更生效。</p>
<p>从现在开始，在使用<code>SSH</code>连接到远程计算机时，您应该会在输入命令时获得提示。</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>Ubuntu - SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu卸载Nginx和替换配置文件</title>
    <url>/Ubuntu%E5%8D%B8%E8%BD%BDNginx%E5%92%8C%E6%9B%BF%E6%8D%A2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="1、卸载Nginx"><a href="#1、卸载Nginx" class="headerlink" title="1、卸载Nginx"></a>1、卸载Nginx</h3><ol>
<li>停止 Nginx 服务：</li>
</ol>
<span id="more"></span>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl stop nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>删除 Nginx：</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>删除 Nginx 配置文件：</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /etc/nginx/
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>删除 Nginx 日志文件：</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/log/nginx/
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>最后，删除 Nginx 用户和用户组：</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> deluser --remove-home nginx
<span class="token function">sudo</span> delgroup nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>完成以上步骤后，就成功卸载 Nginx。</p>
<h3 id="2、配置文件替换（重置配置文件）"><a href="#2、配置文件替换（重置配置文件）" class="headerlink" title="2、配置文件替换（重置配置文件）"></a>2、配置文件替换（重置配置文件）</h3><p>1.打开终端，输入以下命令停止NGINX服务：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl stop nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2.备份NGINX的当前配置文件：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3.恢复默认的NGINX配置文件：</p>
<pre class="line-numbers language-awk"><code class="language-awk">sudo cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>4.检查配置文件是否有错误：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> nginx -t
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>5.如果没有错误，则重新启动NGINX服务：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>现在，您的NGINX服务应该已经重置并重新启动。</p>
<h3 id="3、安装Nginx"><a href="#3、安装Nginx" class="headerlink" title="3、安装Nginx"></a>3、安装Nginx</h3><ol>
<li>打开命令终端，更新软件仓库信息：</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre><code>sudo apt install nginx
</code></pre>
<ol>
<li>安装完成后，您可以启动NGINX并将其添加到启动项：</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start nginx<span class="token variable"><span class="token variable">`</span> <span class="token variable">`</span></span><span class="token function">sudo</span> systemctl <span class="token function">enable</span> nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>检查NGINX是否正在运行：</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status nginx
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果看到“Active: active (running)”的状态，则说明NGINX已成功安装并正在运行。</p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>运维</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Nginx - 运维</tag>
      </tags>
  </entry>
  <entry>
    <title>CLOUDFLARE关闭缓存</title>
    <url>/CLOUDFLARE%E5%85%B3%E9%97%AD%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>​	关于CLOUDFLARE注册托管什么我就不在这里做过多的介绍了，按照官方指引一步步来就行了，给你的域名托管进去即可。</p>
<p>下面是关闭CLOUDFLARE缓存。</p>
<span id="more"></span>


<p><strong>打开域名管理界面，选择界面规则，然后创建页面规则，页面需要创建两次。</strong></p>
<p><img src="https://s2.loli.net/2023/04/29/ks1eIC9AWdpwlqz.png"></p>
<p><strong>URL填写你的域名地址，创建页面第一次</strong></p>
<p><strong>模板:</strong></p>
<pre><code>(你的域名)/*
</code></pre>
<p><img src="https://s2.loli.net/2023/04/29/T3G9lrQFto8dahf.png"></p>
<p><strong>重复上面的操作再来一次。</strong></p>
<p><strong>第二次模版：</strong></p>
<pre><code>*.(你的域名)/*
</code></pre>
<p><img src="https://s2.loli.net/2023/04/29/v2j5zm1eTPwbISE.png"></p>
<p><strong>配置完成以后的结果：</strong></p>
<p><img src="https://s2.loli.net/2023/04/29/ZWnsuk7IrB1JTi6.png"></p>
]]></content>
      <categories>
        <category>Cloudflare</category>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
        <tag>Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 优化</title>
    <url>/Docker-%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>由于<code>Docker</code>部署项目之后访问有些慢，考虑到服务器的性能比较弱， <code>Docker</code>优化方案解决</p>
</blockquote>
<span id="more"></span>


<p>Docker的缓存会随着时间的推移不断增长，清理缓存可以减小磁盘占用，提高系统性能。以下是清理Docker缓存的方法：</p>
<ol>
<li>清理没有使用的镜像和容器。这些未使用的镜像和容器会占用系统的空间，可以使用以下命令来清理：</li>
</ol>
<ul>
<li>清理未运行的容器：</li>
</ul>
<pre><code>docker container prune -f
</code></pre>
<ul>
<li>清理未使用的镜像：</li>
</ul>
<pre><code>docker image prune -a -f
</code></pre>
<ol start="2">
<li>清理未使用的数据卷。在使用数据卷的情况下，可以使用以下命令来清理没有关联容器的数据卷：</li>
</ol>
<pre><code>docker volume prune -f
</code></pre>
<ol start="3">
<li><p>改变Docker的镜像存储位置。可以在Docker守护进程启动时设置<code>--data-root</code>参数，指定Docker镜像存储的位置，或者通过软链接等方法来改变Docker镜像目录。</p>
</li>
<li><p>定期清理Docker镜像缓存。可以通过以下命令来清理Docker镜像缓存：</p>
</li>
</ol>
<pre><code>docker system prune -a -f --volumes
</code></pre>
<p>这个命令会清理Docker镜像、容器、网络和数据卷等不再使用的资源。</p>
<p>清理Docker缓存是一个健壮的管理实践，可以帮助系统保持最佳性能，减少磁盘占用</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows11跳过开机联网</title>
    <url>/Windows11%E8%B7%B3%E8%BF%87%E5%BC%80%E6%9C%BA%E8%81%94%E7%BD%91/</url>
    <content><![CDATA[<p>这时候在激活界面调出<code>CMD</code>界面,输入命令：</p>
<blockquote>
<p>调出CMD界面的快捷键是：<code>Shift+F10</code>或者是<code>Fn+Shift+F10</code></p>
</blockquote>
<span id="more"></span>

<pre class="line-numbers language-powershell"><code class="language-powershell">obbe\bypasssnro
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行以后回车，等待加载即可！！</p>
]]></content>
      <categories>
        <category>Windows 11 - 运维</category>
      </categories>
      <tags>
        <tag>Windows 11 - 运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 设置开机自动（关闭）启动MySQL</title>
    <url>/Mac-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%EF%BC%88%E5%85%B3%E9%97%AD%EF%BC%89%E5%90%AF%E5%8A%A8MySQL/</url>
    <content><![CDATA[<blockquote>
<p>注意：本次设备是MacBookPro M1Pro版本</p>
</blockquote>
<p>打开终端应用</p>
<p>如果过启动关闭MySQL，输入以下命令：</p>
<span id="more"></span>

<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> launchctl disable system/com.oracle.oss.mysql.mysqld
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>系统会提示输入管理员密码，输入密码后按下回车键。</p>
<p>执行命令后，MySQL将会停止运行，你可以在终端中确认MySQL已被成功关闭。</p>
<p>如果想要启动自动开机MySQL，可以使用以下命令：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> launchctl <span class="token function">enable</span> system/com.oracle.oss.mysql.mysqld
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样可以启动MySQL并开始运行~</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL - Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu SSH连接MySQL报错</title>
    <url>/Ubuntu-SSH%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h3 id="报错内容："><a href="#报错内容：" class="headerlink" title="报错内容："></a>报错内容：</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>28000<span class="token punctuation">]</span><span class="token punctuation">[</span>1698<span class="token punctuation">]</span> Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.211.55.22'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/b1ec3ad37670b94ee13ae571d0dc9f7f.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/e92246d9f5d9f15c20b70b597ccb6d2c.png"></p>
<h3 id="导致问题出现的原因："><a href="#导致问题出现的原因：" class="headerlink" title="导致问题出现的原因："></a>导致问题出现的原因：</h3><p>​	在 MySQL 5.7.6 及以上版本中，为了提高安全性，MySQL 将默认禁止 <code>root</code> 用户从远程主机登录。因此，如果你在安装 MySQL 时选择了默认配置，则在远程主机上使用 <code>root</code> 用户名和密码连接到 MySQL 服务器时将会失败。</p>
<h3 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h3><p>​	首先你得防火墙规则要放通端口<code>3306</code>,如果是虚拟机内网的情况，也可以直接给防火墙关掉。</p>
<p>​	然后可以直接新添加一个用户，用来管理MySQL。</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE USER 'username'@'%' IDENTIFIED BY 'password'; # username 你的用户名  password 你要设置的密码

FLUSH PRIVILEGES; # 刷新
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这时候再次连接就能连接成功了~</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230417123523144.png"></p>
<p> </p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>运维</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac（M1Pro安装Redis）</title>
    <url>/Mac%EF%BC%88M1Pro%E5%AE%89%E8%A3%85Redis%EF%BC%89/</url>
    <content><![CDATA[<p>采用<code>homebrew</code>安装Redis，前提是Mac已经安装Redis</p>
<span id="more"></span>
<pre class="line-numbers language-bash"><code class="language-bash">~ brew <span class="token function">install</span> redis <span class="token comment" spellcheck="true"># 执行这个命令来安装Redis</span>
Running <span class="token variable"><span class="token variable">`</span>brew update --auto-update<span class="token variable">`</span></span><span class="token punctuation">..</span>.
<span class="token operator">==</span><span class="token operator">></span> Downloading https://formulae.brew.sh/api/formula.jws.json

<span class="token comment" spellcheck="true">######################################################################## 100.0%</span>
<span class="token operator">==</span><span class="token operator">></span> Fetching redis
<span class="token operator">==</span><span class="token operator">></span> Downloading https://mirrors.aliyun.com/homebrew/homebrew-bottles/redis-7.0.1
<span class="token comment" spellcheck="true">######################################################################## 100.0%</span>
<span class="token operator">==</span><span class="token operator">></span> Pouring redis-7.0.10.arm64_monterey.bottle.tar.gz
<span class="token operator">==</span><span class="token operator">></span> Caveats
To start redis now and restart at login:
  brew services start redis
<span class="token operator">==</span><span class="token operator">></span> Summary
🍺  /opt/homebrew/Cellar/redis/7.0.10: 14 files, 2.7MB
<span class="token operator">==</span><span class="token operator">></span> Running <span class="token variable"><span class="token variable">`</span>brew cleanup redis<span class="token variable">`</span></span><span class="token punctuation">..</span>.
Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.
Hide these hints with HOMEBREW_NO_ENV_HINTS <span class="token punctuation">(</span>see <span class="token variable"><span class="token variable">`</span><span class="token function">man</span> brew<span class="token variable">`</span></span><span class="token punctuation">)</span>.
➜  ~ brew services start redis
<span class="token operator">==</span><span class="token operator">></span> Downloading https://formulae.brew.sh/api/formula.jws.json
<span class="token comment" spellcheck="true">##O=#  #</span>
Warning: Calling formula.plist_path is deprecated<span class="token operator">!</span> Use formula.launchd_service_path instead.
Please report this issue to the homebrew/services tap <span class="token punctuation">(</span>not Homebrew/brew or Homebrew/homebrew-core<span class="token punctuation">)</span>, or even better, submit a PR to fix it:
  /opt/homebrew/Library/Taps/homebrew/homebrew-services/lib/service/formula_wrapper.rb:58
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">➜  ~ redis-cli <span class="token comment" spellcheck="true"># 启动redis</span>
127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> name couture
OK
127.0.0.1:6379<span class="token operator">></span> get name
<span class="token string">"couture"</span>
127.0.0.1:6379<span class="token operator">></span> <span class="token function">shutdown</span> <span class="token comment" spellcheck="true"># 关闭</span>
not connected<span class="token operator">></span> quit  <span class="token comment" spellcheck="true"># 退出</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>homebrew</code>安装的时候也出现一个问题</p>
<pre class="line-numbers language-bash"><code class="language-bash">Warning: Calling formula.plist_path is deprecated<span class="token operator">!</span> Use formula.launchd_service_path instead.
Please report this issue to the homebrew/services tap <span class="token punctuation">(</span>not Homebrew/brew or Homebrew/homebrew-core<span class="token punctuation">)</span>, or even better, submit a PR to fix it:
  /opt/homebrew/Library/Taps/homebrew/homebrew-services/lib/service/formula_wrapper.rb:58
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>需要修复什么东西</p>
<p>然后只需要执行命令</p>
<pre class="line-numbers language-bash"><code class="language-bash">➜  ~ unset HOMEBREW_BOTTLE_DOMAIN
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>问题解决~</p>
]]></content>
      <categories>
        <category>redis</category>
        <category>Mac</category>
        <category>Homebrew</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 8 字符集报错解决方法</title>
    <url>/CentOS-8-%E5%AD%97%E7%AC%A6%E9%9B%86%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h5 id="首先是错误如下："><a href="#首先是错误如下：" class="headerlink" title="首先是错误如下："></a>首先是错误如下：</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y yum-utils</span>
Failed to <span class="token keyword">set</span> locale, defaulting to C.UTF-8     <span class="token comment" spellcheck="true"># 这里是出现了 UTF-8字符集的问题</span>
Last metadata expiration check: 0:02:34 ago on Fri Apr  7 17:29:02 2023.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h5 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h5><p>执行一下命令：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"export LC_ALL=en_US.UTF-8"</span>  <span class="token operator">>></span>  /etc/profile
<span class="token keyword">echo</span> <span class="token string">"export LC_CTYPE=en_US.UTF-8"</span>  <span class="token operator">>></span>  /etc/profile
<span class="token function">source</span> /etc/profile
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在安装软件，不会有报错提示，问题得到了解决~</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>CentOS 8</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS 8</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 8 安装Docker</title>
    <url>/CentOS-8-%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><span id="more"></span>

<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum remove docker</span>
Failed to <span class="token keyword">set</span> locale, defaulting to C.UTF-8
No match <span class="token keyword">for</span> argument: docker
No packages marked <span class="token keyword">for</span> removal.
Dependencies resolved.
Nothing to do.
Complete<span class="token operator">!</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum remove docker *</span>
Failed to <span class="token keyword">set</span> locale, defaulting to C.UTF-8
No match <span class="token keyword">for</span> argument: docker
Error:
Problem: The operation would result <span class="token keyword">in</span> removing the following protected packages: dnf, kernel-core, setup, sudo, systemd, systemd-udev, yum
<span class="token punctuation">(</span>try to add <span class="token string">'--skip-broken'</span> to skip uninstallable packages or <span class="token string">'--nobest'</span> to use not only best candidate packages<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y yum-utils</span>
Failed to <span class="token keyword">set</span> locale, defaulting to C.UTF-8
Last metadata expiration check: 0:02:34 ago on Fri Apr  7 17:29:02 2023.
Dependencies resolved.
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Package                          Architecture   Version                Repository         Size
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Installing:
yum-utils                        noarch         4.0.21-18.el8          baseos             75 k
Upgrading:
dnf                              noarch         4.7.0-15.el8           baseos            542 k
dnf-data                         noarch         4.7.0-15.el8           baseos            156 k
dnf-plugins-core                 noarch         4.0.21-18.el8          baseos             75 k
libdnf                           x86_64         0.63.0-13.el8          baseos            704 k
libsolv                          x86_64         0.7.20-4.el8           baseos            376 k
python3-dnf                      noarch         4.7.0-15.el8           baseos            550 k
python3-dnf-plugins-core         noarch         4.0.21-18.el8          baseos            258 k
python3-hawkey                   x86_64         0.63.0-13.el8          baseos            117 k
python3-libdnf                   x86_64         0.63.0-13.el8          baseos            779 k
yum                              noarch         4.7.0-15.el8           baseos            208 k
Installing dependencies:
python3-systemd                  x86_64         234-8.el8              appstream          81 k

Transaction Summary
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Install   2 Packages
Upgrade  10 Packages

Total download size: 3.8 M
Downloading Packages:
<span class="token punctuation">(</span>1/12<span class="token punctuation">)</span>: python3-systemd-234-8.el8.x86_64.rpm                    2.9 MB/s <span class="token operator">|</span>  81 kB     00:00
<span class="token punctuation">(</span>2/12<span class="token punctuation">)</span>: yum-utils-4.0.21-18.el8.noarch.rpm                      2.2 MB/s <span class="token operator">|</span>  75 kB     00:00
<span class="token punctuation">(</span>3/12<span class="token punctuation">)</span>: dnf-plugins-core-4.0.21-18.el8.noarch.rpm               4.2 MB/s <span class="token operator">|</span>  75 kB     00:00
<span class="token punctuation">(</span>4/12<span class="token punctuation">)</span>: dnf-4.7.0-15.el8.noarch.rpm                             8.0 MB/s <span class="token operator">|</span> 542 kB     00:00
<span class="token punctuation">(</span>5/12<span class="token punctuation">)</span>: dnf-data-4.7.0-15.el8.noarch.rpm                        3.1 MB/s <span class="token operator">|</span> 156 kB     00:00
<span class="token punctuation">(</span>6/12<span class="token punctuation">)</span>: libsolv-0.7.20-4.el8.x86_64.rpm                          10 MB/s <span class="token operator">|</span> 376 kB     00:00
<span class="token punctuation">(</span>7/12<span class="token punctuation">)</span>: python3-dnf-plugins-core-4.0.21-18.el8.noarch.rpm       8.2 MB/s <span class="token operator">|</span> 258 kB     00:00
<span class="token punctuation">(</span>8/12<span class="token punctuation">)</span>: libdnf-0.63.0-13.el8.x86_64.rpm                         6.5 MB/s <span class="token operator">|</span> 704 kB     00:00
<span class="token punctuation">(</span>9/12<span class="token punctuation">)</span>: python3-hawkey-0.63.0-13.el8.x86_64.rpm                 3.2 MB/s <span class="token operator">|</span> 117 kB     00:00
<span class="token punctuation">(</span>10/12<span class="token punctuation">)</span>: python3-dnf-4.7.0-15.el8.noarch.rpm                    4.7 MB/s <span class="token operator">|</span> 550 kB     00:00
<span class="token punctuation">(</span>11/12<span class="token punctuation">)</span>: yum-4.7.0-15.el8.noarch.rpm                            5.4 MB/s <span class="token operator">|</span> 208 kB     00:00
<span class="token punctuation">(</span>12/12<span class="token punctuation">)</span>: python3-libdnf-0.63.0-13.el8.x86_64.rpm                9.5 MB/s <span class="token operator">|</span> 779 kB     00:00
------------------------------------------------------------------------------------------------
Total                                                            16 MB/s <span class="token operator">|</span> 3.8 MB     00:00
Running transaction check
Transaction check succeeded.
Running transaction <span class="token function">test</span>
Transaction <span class="token function">test</span> succeeded.
Running transaction
Preparing        <span class="token keyword">:</span>                                                                        1/1
Running scriptlet: libsolv-0.7.20-4.el8.x86_64                                            1/1
Upgrading        <span class="token keyword">:</span> libsolv-0.7.20-4.el8.x86_64                                           1/22
Upgrading        <span class="token keyword">:</span> libdnf-0.63.0-13.el8.x86_64                                           2/22
Upgrading        <span class="token keyword">:</span> python3-libdnf-0.63.0-13.el8.x86_64                                   3/22
Upgrading        <span class="token keyword">:</span> python3-hawkey-0.63.0-13.el8.x86_64                                   4/22
Upgrading        <span class="token keyword">:</span> dnf-data-4.7.0-15.el8.noarch                                          5/22
Upgrading        <span class="token keyword">:</span> python3-dnf-4.7.0-15.el8.noarch                                       6/22
Upgrading        <span class="token keyword">:</span> dnf-4.7.0-15.el8.noarch                                               7/22
Running scriptlet: dnf-4.7.0-15.el8.noarch                                               7/22
Installing       <span class="token keyword">:</span> python3-systemd-234-8.el8.x86_64                                      8/22
Upgrading        <span class="token keyword">:</span> python3-dnf-plugins-core-4.0.21-18.el8.noarch                         9/22
Upgrading        <span class="token keyword">:</span> dnf-plugins-core-4.0.21-18.el8.noarch                                10/22
Installing       <span class="token keyword">:</span> yum-utils-4.0.21-18.el8.noarch                                       11/22
Upgrading        <span class="token keyword">:</span> yum-4.7.0-15.el8.noarch                                              12/22
Cleanup          <span class="token keyword">:</span> yum-4.7.0-5.el8.noarch                                               13/22
Running scriptlet: dnf-4.7.0-5.el8.noarch                                               14/22
Cleanup          <span class="token keyword">:</span> dnf-4.7.0-5.el8.noarch                                               14/22
Running scriptlet: dnf-4.7.0-5.el8.noarch                                               14/22
Cleanup          <span class="token keyword">:</span> dnf-plugins-core-4.0.21-7.el8.noarch                                 15/22
Cleanup          <span class="token keyword">:</span> python3-dnf-plugins-core-4.0.21-7.el8.noarch                         16/22
Cleanup          <span class="token keyword">:</span> python3-dnf-4.7.0-5.el8.noarch                                       17/22
Cleanup          <span class="token keyword">:</span> python3-hawkey-0.63.0-5.el8.x86_64                                   18/22
Cleanup          <span class="token keyword">:</span> dnf-data-4.7.0-5.el8.noarch                                          19/22
Cleanup          <span class="token keyword">:</span> python3-libdnf-0.63.0-5.el8.x86_64                                   20/22
Cleanup          <span class="token keyword">:</span> libdnf-0.63.0-5.el8.x86_64                                           21/22
Cleanup          <span class="token keyword">:</span> libsolv-0.7.20-1.el8.x86_64                                          22/22
Running scriptlet: libsolv-0.7.20-1.el8.x86_64                                          22/22
Verifying        <span class="token keyword">:</span> python3-systemd-234-8.el8.x86_64                                      1/22
Verifying        <span class="token keyword">:</span> yum-utils-4.0.21-18.el8.noarch                                        2/22
Verifying        <span class="token keyword">:</span> dnf-4.7.0-15.el8.noarch                                               3/22
Verifying        <span class="token keyword">:</span> dnf-4.7.0-5.el8.noarch                                                4/22
Verifying        <span class="token keyword">:</span> dnf-data-4.7.0-15.el8.noarch                                          5/22
Verifying        <span class="token keyword">:</span> dnf-data-4.7.0-5.el8.noarch                                           6/22
Verifying        <span class="token keyword">:</span> dnf-plugins-core-4.0.21-18.el8.noarch                                 7/22
Verifying        <span class="token keyword">:</span> dnf-plugins-core-4.0.21-7.el8.noarch                                  8/22
Verifying        <span class="token keyword">:</span> libdnf-0.63.0-13.el8.x86_64                                           9/22
Verifying        <span class="token keyword">:</span> libdnf-0.63.0-5.el8.x86_64                                           10/22
Verifying        <span class="token keyword">:</span> libsolv-0.7.20-4.el8.x86_64                                          11/22
Verifying        <span class="token keyword">:</span> libsolv-0.7.20-1.el8.x86_64                                          12/22
Verifying        <span class="token keyword">:</span> python3-dnf-4.7.0-15.el8.noarch                                      13/22
Verifying        <span class="token keyword">:</span> python3-dnf-4.7.0-5.el8.noarch                                       14/22
Verifying        <span class="token keyword">:</span> python3-dnf-plugins-core-4.0.21-18.el8.noarch                        15/22
Verifying        <span class="token keyword">:</span> python3-dnf-plugins-core-4.0.21-7.el8.noarch                         16/22
Verifying        <span class="token keyword">:</span> python3-hawkey-0.63.0-13.el8.x86_64                                  17/22
Verifying        <span class="token keyword">:</span> python3-hawkey-0.63.0-5.el8.x86_64                                   18/22
Verifying        <span class="token keyword">:</span> python3-libdnf-0.63.0-13.el8.x86_64                                  19/22
Verifying        <span class="token keyword">:</span> python3-libdnf-0.63.0-5.el8.x86_64                                   20/22
Verifying        <span class="token keyword">:</span> yum-4.7.0-15.el8.noarch                                              21/22
Verifying        <span class="token keyword">:</span> yum-4.7.0-5.el8.noarch                                               22/22

Upgraded:
dnf-4.7.0-15.el8.noarch                             dnf-data-4.7.0-15.el8.noarch
dnf-plugins-core-4.0.21-18.el8.noarch               libdnf-0.63.0-13.el8.x86_64
libsolv-0.7.20-4.el8.x86_64                         python3-dnf-4.7.0-15.el8.noarch
python3-dnf-plugins-core-4.0.21-18.el8.noarch       python3-hawkey-0.63.0-13.el8.x86_64
python3-libdnf-0.63.0-13.el8.x86_64                 yum-4.7.0-15.el8.noarch
Installed:
python3-systemd-234-8.el8.x86_64                yum-utils-4.0.21-18.el8.noarch

Complete<span class="token operator">!</span>

<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum-config-manager \</span>
<span class="token operator">></span> --add-repo \
<span class="token operator">></span> http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
Failed to <span class="token keyword">set</span> locale, defaulting to C.UTF-8
Adding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo yum install -y docker-ce docker-ce-cli containerd.io</span>
Failed to <span class="token keyword">set</span> locale, defaulting to C.UTF-8
Docker CE Stable - x86_64                                       153 kB/s <span class="token operator">|</span>  40 kB     00:00
Dependencies resolved.
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Package                 Arch   Version                                  Repository        Size
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Installing:
containerd.io           x86_64 1.6.20-3.1.el8                           docker-ce-stable  34 M
docker-ce               x86_64 3:23.0.3-1.el8                           docker-ce-stable  23 M
docker-ce-cli           x86_64 1:23.0.3-1.el8                           docker-ce-stable 7.1 M
Installing dependencies:
checkpolicy             x86_64 2.9-1.el8                                baseos           348 k
container-selinux       noarch 2:2.195.1-1.module_el8.8.0+1254+78119b6e appstream         63 k
docker-ce-rootless-extras
x86_64 23.0.3-1.el8                             docker-ce-stable 4.8 M
fuse-common             x86_64 3.3.0-16.el8                             baseos            22 k
fuse-overlayfs          x86_64 1.10-1.module_el8.8.0+1254+78119b6e      appstream         74 k
fuse3                   x86_64 3.3.0-16.el8                             baseos            54 k
fuse3-libs              x86_64 3.3.0-16.el8                             baseos            95 k
libcgroup               x86_64 0.41-19.el8                              baseos            70 k
libslirp                x86_64 4.4.0-1.module_el8.7.0+1216+b022c01d     appstream         70 k
policycoreutils-python-utils
noarch 2.9-17.el8                               baseos           252 k
python3-audit           x86_64 3.0-0.17.20191104git1c2f876.el8          baseos            86 k
python3-libsemanage     x86_64 2.9-6.el8                                baseos           127 k
python3-policycoreutils noarch 2.9-17.el8                               baseos           2.2 M
python3-setools         x86_64 4.3.0-3.el8                              baseos           624 k
slirp4netns             x86_64 1.2.0-2.module_el8.7.0+1216+b022c01d     appstream         54 k
Installing weak dependencies:
docker-buildx-plugin    x86_64 0.10.4-1.el8                             docker-ce-stable  12 M
docker-compose-plugin   x86_64 2.17.2-1.el8                             docker-ce-stable  12 M
Enabling module streams:
container-tools                rhel8

Transaction Summary
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Install  20 Packages

Total download size: 97 M
Installed size: 367 M
Downloading Packages:
<span class="token punctuation">(</span>1/20<span class="token punctuation">)</span>: container-selinux-2.195.1-1.module_el8.8.0+1254+78119b6 1.6 MB/s <span class="token operator">|</span>  63 kB     00:00
<span class="token punctuation">(</span>2/20<span class="token punctuation">)</span>: fuse-overlayfs-1.10-1.module_el8.8.0+1254+78119b6e.x86_ 1.6 MB/s <span class="token operator">|</span>  74 kB     00:00
<span class="token punctuation">(</span>3/20<span class="token punctuation">)</span>: libslirp-4.4.0-1.module_el8.7.0+1216+b022c01d.x86_64.rp 1.3 MB/s <span class="token operator">|</span>  70 kB     00:00
<span class="token punctuation">(</span>4/20<span class="token punctuation">)</span>: slirp4netns-1.2.0-2.module_el8.7.0+1216+b022c01d.x86_64 2.6 MB/s <span class="token operator">|</span>  54 kB     00:00
<span class="token punctuation">(</span>5/20<span class="token punctuation">)</span>: fuse-common-3.3.0-16.el8.x86_64.rpm                     1.6 MB/s <span class="token operator">|</span>  22 kB     00:00
<span class="token punctuation">(</span>6/20<span class="token punctuation">)</span>: fuse3-3.3.0-16.el8.x86_64.rpm                           3.2 MB/s <span class="token operator">|</span>  54 kB     00:00
<span class="token punctuation">(</span>7/20<span class="token punctuation">)</span>: fuse3-libs-3.3.0-16.el8.x86_64.rpm                      4.0 MB/s <span class="token operator">|</span>  95 kB     00:00
<span class="token punctuation">(</span>8/20<span class="token punctuation">)</span>: libcgroup-0.41-19.el8.x86_64.rpm                        3.0 MB/s <span class="token operator">|</span>  70 kB     00:00
<span class="token punctuation">(</span>9/20<span class="token punctuation">)</span>: checkpolicy-2.9-1.el8.x86_64.rpm                        4.3 MB/s <span class="token operator">|</span> 348 kB     00:00
<span class="token punctuation">(</span>10/20<span class="token punctuation">)</span>: python3-audit-3.0-0.17.20191104git1c2f876.el8.x86_64.r 2.8 MB/s <span class="token operator">|</span>  86 kB     00:00
<span class="token punctuation">(</span>11/20<span class="token punctuation">)</span>: policycoreutils-python-utils-2.9-17.el8.noarch.rpm     4.6 MB/s <span class="token operator">|</span> 252 kB     00:00
<span class="token punctuation">(</span>12/20<span class="token punctuation">)</span>: python3-libsemanage-2.9-6.el8.x86_64.rpm               3.6 MB/s <span class="token operator">|</span> 127 kB     00:00
<span class="token punctuation">(</span>13/20<span class="token punctuation">)</span>: python3-setools-4.3.0-3.el8.x86_64.rpm                 6.8 MB/s <span class="token operator">|</span> 624 kB     00:00
<span class="token punctuation">(</span>14/20<span class="token punctuation">)</span>: python3-policycoreutils-2.9-17.el8.noarch.rpm          7.9 MB/s <span class="token operator">|</span> 2.2 MB     00:00
<span class="token punctuation">(</span>15/20<span class="token punctuation">)</span>: docker-buildx-plugin-0.10.4-1.el8.x86_64.rpm           634 kB/s <span class="token operator">|</span>  12 MB     00:19
<span class="token punctuation">(</span>16/20<span class="token punctuation">)</span>: docker-ce-cli-23.0.3-1.el8.x86_64.rpm                  623 kB/s <span class="token operator">|</span> 7.1 MB     00:11
<span class="token punctuation">(</span>17/20<span class="token punctuation">)</span>: docker-ce-23.0.3-1.el8.x86_64.rpm                      661 kB/s <span class="token operator">|</span>  23 MB     00:36
<span class="token punctuation">(</span>18/20<span class="token punctuation">)</span>: docker-ce-rootless-extras-23.0.3-1.el8.x86_64.rpm      676 kB/s <span class="token operator">|</span> 4.8 MB     00:07
<span class="token punctuation">(</span>19/20<span class="token punctuation">)</span>: containerd.io-1.6.20-3.1.el8.x86_64.rpm                714 kB/s <span class="token operator">|</span>  34 MB     00:48
<span class="token punctuation">(</span>20/20<span class="token punctuation">)</span>: docker-compose-plugin-2.17.2-1.el8.x86_64.rpm          761 kB/s <span class="token operator">|</span>  12 MB     00:15
------------------------------------------------------------------------------------------------
Total                                                           1.9 MB/s <span class="token operator">|</span>  97 MB     00:52
Docker CE Stable - x86_64                                        18 kB/s <span class="token operator">|</span> 1.6 kB     00:00
Importing GPG key 0x621E9F35:
Userid     <span class="token keyword">:</span> <span class="token string">"Docker Release (CE rpm) &lt;docker@docker.com>"</span>
Fingerprint: 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35
From       <span class="token keyword">:</span> https://mirrors.aliyun.com/docker-ce/linux/centos/gpg
Key imported successfully
Running transaction check
Transaction check succeeded.
Running transaction <span class="token function">test</span>
Transaction <span class="token function">test</span> succeeded.
Running transaction
Preparing        <span class="token keyword">:</span>                                                                        1/1
Installing       <span class="token keyword">:</span> docker-compose-plugin-2.17.2-1.el8.x86_64                             1/20
Running scriptlet: docker-compose-plugin-2.17.2-1.el8.x86_64                             1/20
Installing       <span class="token keyword">:</span> fuse3-libs-3.3.0-16.el8.x86_64                                        2/20
Running scriptlet: fuse3-libs-3.3.0-16.el8.x86_64                                        2/20
Installing       <span class="token keyword">:</span> docker-buildx-plugin-0.10.4-1.el8.x86_64                              3/20
Running scriptlet: docker-buildx-plugin-0.10.4-1.el8.x86_64                              3/20
Installing       <span class="token keyword">:</span> docker-ce-cli-1:23.0.3-1.el8.x86_64                                   4/20
Running scriptlet: docker-ce-cli-1:23.0.3-1.el8.x86_64                                   4/20
Installing       <span class="token keyword">:</span> python3-setools-4.3.0-3.el8.x86_64                                    5/20
Installing       <span class="token keyword">:</span> python3-libsemanage-2.9-6.el8.x86_64                                  6/20
Installing       <span class="token keyword">:</span> python3-audit-3.0-0.17.20191104git1c2f876.el8.x86_64                  7/20
Running scriptlet: libcgroup-0.41-19.el8.x86_64                                          8/20
Installing       <span class="token keyword">:</span> libcgroup-0.41-19.el8.x86_64                                          8/20
Running scriptlet: libcgroup-0.41-19.el8.x86_64                                          8/20
Installing       <span class="token keyword">:</span> fuse-common-3.3.0-16.el8.x86_64                                       9/20
Installing       <span class="token keyword">:</span> fuse3-3.3.0-16.el8.x86_64                                            10/20
Installing       <span class="token keyword">:</span> fuse-overlayfs-1.10-1.module_el8.8.0+1254+78119b6e.x86_64            11/20
Running scriptlet: fuse-overlayfs-1.10-1.module_el8.8.0+1254+78119b6e.x86_64            11/20
Installing       <span class="token keyword">:</span> checkpolicy-2.9-1.el8.x86_64                                         12/20
Installing       <span class="token keyword">:</span> python3-policycoreutils-2.9-17.el8.noarch                            13/20
Installing       <span class="token keyword">:</span> policycoreutils-python-utils-2.9-17.el8.noarch                       14/20
Running scriptlet: container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch    15/20
Installing       <span class="token keyword">:</span> container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch    15/20
Running scriptlet: container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch    15/20

Installing       <span class="token keyword">:</span> containerd.io-1.6.20-3.1.el8.x86_64                                  16/20
Running scriptlet: containerd.io-1.6.20-3.1.el8.x86_64                                  16/20
Installing       <span class="token keyword">:</span> libslirp-4.4.0-1.module_el8.7.0+1216+b022c01d.x86_64                 17/20
Installing       <span class="token keyword">:</span> slirp4netns-1.2.0-2.module_el8.7.0+1216+b022c01d.x86_64              18/20
Installing       <span class="token keyword">:</span> docker-ce-rootless-extras-23.0.3-1.el8.x86_64                        19/20
Running scriptlet: docker-ce-rootless-extras-23.0.3-1.el8.x86_64                        19/20
Installing       <span class="token keyword">:</span> docker-ce-3:23.0.3-1.el8.x86_64                                      20/20
Running scriptlet: docker-ce-3:23.0.3-1.el8.x86_64                                      20/20
Running scriptlet: container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch    20/20
Running scriptlet: docker-ce-3:23.0.3-1.el8.x86_64                                      20/20
Verifying        <span class="token keyword">:</span> container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch     1/20
Verifying        <span class="token keyword">:</span> fuse-overlayfs-1.10-1.module_el8.8.0+1254+78119b6e.x86_64             2/20
Verifying        <span class="token keyword">:</span> libslirp-4.4.0-1.module_el8.7.0+1216+b022c01d.x86_64                  3/20
Verifying        <span class="token keyword">:</span> slirp4netns-1.2.0-2.module_el8.7.0+1216+b022c01d.x86_64               4/20
Verifying        <span class="token keyword">:</span> checkpolicy-2.9-1.el8.x86_64                                          5/20
Verifying        <span class="token keyword">:</span> fuse-common-3.3.0-16.el8.x86_64                                       6/20
Verifying        <span class="token keyword">:</span> fuse3-3.3.0-16.el8.x86_64                                             7/20
Verifying        <span class="token keyword">:</span> fuse3-libs-3.3.0-16.el8.x86_64                                        8/20
Verifying        <span class="token keyword">:</span> libcgroup-0.41-19.el8.x86_64                                          9/20
Verifying        <span class="token keyword">:</span> policycoreutils-python-utils-2.9-17.el8.noarch                       10/20
Verifying        <span class="token keyword">:</span> python3-audit-3.0-0.17.20191104git1c2f876.el8.x86_64                 11/20
Verifying        <span class="token keyword">:</span> python3-libsemanage-2.9-6.el8.x86_64                                 12/20
Verifying        <span class="token keyword">:</span> python3-policycoreutils-2.9-17.el8.noarch                            13/20
Verifying        <span class="token keyword">:</span> python3-setools-4.3.0-3.el8.x86_64                                   14/20
Verifying        <span class="token keyword">:</span> containerd.io-1.6.20-3.1.el8.x86_64                                  15/20
Verifying        <span class="token keyword">:</span> docker-buildx-plugin-0.10.4-1.el8.x86_64                             16/20
Verifying        <span class="token keyword">:</span> docker-ce-3:23.0.3-1.el8.x86_64                                      17/20
Verifying        <span class="token keyword">:</span> docker-ce-cli-1:23.0.3-1.el8.x86_64                                  18/20
Verifying        <span class="token keyword">:</span> docker-ce-rootless-extras-23.0.3-1.el8.x86_64                        19/20
Verifying        <span class="token keyword">:</span> docker-compose-plugin-2.17.2-1.el8.x86_64                            20/20

Installed:
checkpolicy-2.9-1.el8.x86_64
container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch
containerd.io-1.6.20-3.1.el8.x86_64
docker-buildx-plugin-0.10.4-1.el8.x86_64
docker-ce-3:23.0.3-1.el8.x86_64
docker-ce-cli-1:23.0.3-1.el8.x86_64
docker-ce-rootless-extras-23.0.3-1.el8.x86_64
docker-compose-plugin-2.17.2-1.el8.x86_64
fuse-common-3.3.0-16.el8.x86_64
fuse-overlayfs-1.10-1.module_el8.8.0+1254+78119b6e.x86_64
fuse3-3.3.0-16.el8.x86_64
fuse3-libs-3.3.0-16.el8.x86_64
libcgroup-0.41-19.el8.x86_64
libslirp-4.4.0-1.module_el8.7.0+1216+b022c01d.x86_64
policycoreutils-python-utils-2.9-17.el8.noarch
python3-audit-3.0-0.17.20191104git1c2f876.el8.x86_64
python3-libsemanage-2.9-6.el8.x86_64
python3-policycoreutils-2.9-17.el8.noarch
python3-setools-4.3.0-3.el8.x86_64
slirp4netns-1.2.0-2.module_el8.7.0+1216+b022c01d.x86_64

Complete<span class="token operator">!</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable docker --now</span>
Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /usr/lib/systemd/system/docker.service.
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "export LC_ALL=en_US.UTF8" >> /etc/profile</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># source /etc/profile</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>
REPOSITORY   TAG       IMAGE ID   CREATED   SIZE
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /etc/docker</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span>
<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
<span class="token operator">></span>   <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://82m9ar63.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,
<span class="token operator">></span>   <span class="token string">"exec-opts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"native.cgroupdriver=systemd"</span><span class="token punctuation">]</span>,
<span class="token operator">></span>   <span class="token string">"log-driver"</span><span class="token keyword">:</span> <span class="token string">"json-file"</span>,
<span class="token operator">></span>   <span class="token string">"log-opts"</span><span class="token keyword">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
<span class="token operator">></span>     <span class="token string">"max-size"</span><span class="token keyword">:</span> <span class="token string">"100m"</span>
<span class="token operator">></span>   <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>
<span class="token operator">></span>   <span class="token string">"storage-driver"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>
<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>
<span class="token operator">></span> EOF
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
<span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://82m9ar63.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,
<span class="token string">"exec-opts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"native.cgroupdriver=systemd"</span><span class="token punctuation">]</span>,
<span class="token string">"log-driver"</span><span class="token keyword">:</span> <span class="token string">"json-file"</span>,
<span class="token string">"log-opts"</span><span class="token keyword">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
<span class="token string">"max-size"</span><span class="token keyword">:</span> <span class="token string">"100m"</span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>
<span class="token string">"storage-driver"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo systemctl daemon-reload</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo systemctl restart docker</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Docker</category>
        <category>DevOps</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云Docker镜像加速</title>
    <url>/%E9%98%BF%E9%87%8C%E4%BA%91Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<h4 id="阿里云镜像源"><a href="#阿里云镜像源" class="headerlink" title="阿里云镜像源"></a>阿里云镜像源</h4><span id="more"></span>

<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /etc/docker</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span>
<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
<span class="token operator">></span>   <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://82m9ar63.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,
<span class="token operator">></span>   <span class="token string">"exec-opts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"native.cgroupdriver=systemd"</span><span class="token punctuation">]</span>,
<span class="token operator">></span>   <span class="token string">"log-driver"</span><span class="token keyword">:</span> <span class="token string">"json-file"</span>,
<span class="token operator">></span>   <span class="token string">"log-opts"</span><span class="token keyword">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
<span class="token operator">></span>     <span class="token string">"max-size"</span><span class="token keyword">:</span> <span class="token string">"100m"</span>
<span class="token operator">></span>   <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>
<span class="token operator">></span>   <span class="token string">"storage-driver"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>
<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>
<span class="token operator">></span> EOF
<span class="token operator">&lt;</span><span class="token operator">!</span>--more--<span class="token operator">></span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://82m9ar63.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,
  <span class="token string">"exec-opts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"native.cgroupdriver=systemd"</span><span class="token punctuation">]</span>,
  <span class="token string">"log-driver"</span><span class="token keyword">:</span> <span class="token string">"json-file"</span>,
  <span class="token string">"log-opts"</span><span class="token keyword">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>
    <span class="token string">"max-size"</span><span class="token keyword">:</span> <span class="token string">"100m"</span>
  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>
  <span class="token string">"storage-driver"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo systemctl daemon-reload</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo systemctl restart docker</span>
<span class="token punctuation">[</span>root@VM-4-3-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
        <category>运维</category>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10&amp;11官方系统盘制作教程</title>
    <url>/Windows10-11%E5%AE%98%E6%96%B9%E7%B3%BB%E7%BB%9F%E7%9B%98%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>本次做系统盘，采用官方的方式制作：</p>
<p>注意：U盘最少要<code>8G</code>及其以上的空U盘，为了避免出错，在开展一下步骤之前还是先给U盘数据备份好，然后对U盘进行格式化</p>
</blockquote>
<span id="more"></span>
<h3 id="第一步：去微软镜像官方下载网站"><a href="#第一步：去微软镜像官方下载网站" class="headerlink" title="第一步：去微软镜像官方下载网站"></a>第一步：去微软镜像官方下载网站</h3><h4 id="Window10镜像-https-www-microsoft-com-zh-cn-software-download-windows10"><a href="#Window10镜像-https-www-microsoft-com-zh-cn-software-download-windows10" class="headerlink" title="Window10镜像: https://www.microsoft.com/zh-cn/software-download/windows10/"></a><code>Window10</code>镜像: <a href="https://www.microsoft.com/zh-cn/software-download/windows10/">https://www.microsoft.com/zh-cn/software-download/windows10/</a></h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031022123.png" alt="image-20230403102222753"></p>
<h4 id="Window11镜像-https-www-microsoft-com-zh-cn-software-download-windows11"><a href="#Window11镜像-https-www-microsoft-com-zh-cn-software-download-windows11" class="headerlink" title="Window11镜像:https://www.microsoft.com/zh-cn/software-download/windows11/"></a><code>Window11镜像</code>:<a href="https://www.microsoft.com/zh-cn/software-download/windows11/">https://www.microsoft.com/zh-cn/software-download/windows11/</a></h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031022354.png"></p>
<h3 id="第二步：以Windows10为例，开始制作系统盘，下载制作工具，点击立即下载工具"><a href="#第二步：以Windows10为例，开始制作系统盘，下载制作工具，点击立即下载工具" class="headerlink" title="第二步：以Windows10为例，开始制作系统盘，下载制作工具，点击立即下载工具"></a>第二步：以<code>Windows10</code>为例，开始制作系统盘，下载制作工具，点击<code>立即下载工具</code></h3><p>​	<img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031025068.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031027631.png"></p>
<h3 id="第三步：下载好以后双击打开运行，会出现下图界面"><a href="#第三步：下载好以后双击打开运行，会出现下图界面" class="headerlink" title="第三步：下载好以后双击打开运行，会出现下图界面"></a>第三步：下载好以后双击打开运行，会出现下图界面</h3><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031028052.png"></p>
<h4 id="第四步：选择接受-再选择为另一台电脑创建安装介质（U盘、DVD、或ISO文件）-下一步-下一步"><a href="#第四步：选择接受-再选择为另一台电脑创建安装介质（U盘、DVD、或ISO文件）-下一步-下一步" class="headerlink" title="第四步：选择接受-&gt;再选择为另一台电脑创建安装介质（U盘、DVD、或ISO文件）-&gt;下一步-&gt;下一步"></a>第四步：选择<code>接受</code>-&gt;再选择<code>为另一台电脑创建安装介质（U盘、DVD、或ISO文件）</code>-&gt;下一步-&gt;下一步</h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031029150.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031034181.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031034314.png"></p>
<h3 id="第五步：选择你要安装系统的U盘，下一步，等待U盘写入完成"><a href="#第五步：选择你要安装系统的U盘，下一步，等待U盘写入完成" class="headerlink" title="第五步：选择你要安装系统的U盘，下一步，等待U盘写入完成"></a>第五步：选择你要安装系统的U盘，下一步，等待U盘写入完成</h3><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031037842.png" alt="image-20230403103728772"></p>
<h3 id="第六步：等待U盘写入百分之百，成功以后会有提示，U盘制作完成"><a href="#第六步：等待U盘写入百分之百，成功以后会有提示，U盘制作完成" class="headerlink" title="第六步：等待U盘写入百分之百，成功以后会有提示，U盘制作完成~"></a>第六步：等待U盘写入百分之百，成功以后会有提示，U盘制作完成~</h3><blockquote>
<p>注意在U盘写入过程中，不要对U盘进行插拔或者是弹出操作，不然会写入不成功，不成功则需要重新操作</p>
<p>上诉过程中截图的是<code>Windows10</code>的制作过程，<code>Windows11</code>也是一模一样，没有差别</p>
</blockquote>
<p>以上就是<code>Windows10&amp;11</code>官方系统盘制作过程，当然系统盘的制作不仅仅是这一种，但是这种是最傻瓜式的，希望小白也都能看懂~</p>
]]></content>
      <categories>
        <category>Windows10</category>
        <category>系统安装</category>
      </categories>
      <tags>
        <tag>Windows 11</tag>
        <tag>Windows 10</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew安装报错Error:Command failed with exit 128: git</title>
    <url>/Homebrew%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99Error-Command-failed-with-exit-128-git/</url>
    <content><![CDATA[<p>安装命令：</p>
<pre class="line-numbers language-shell"><code class="language-shell">brew install telnet
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<p>打印报错信息：</p>
<pre class="line-numbers language-shell"><code class="language-shell">fatal: not in a git directory

Error: Command failed with exit 128: git
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>解决方式：</p>
<p>首先执行命令：</p>
<pre class="line-numbers language-shell"><code class="language-shell">unset HOMEBREW_BOTTLE_DOMAIN
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后执行命令：</p>
<pre class="line-numbers language-shell"><code class="language-shell">git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-core
git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-cask
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>当然执行这个两个命令是不分前后的，都可以，但是都要执行，然后就是成功解决了报错问题!</p>
]]></content>
      <categories>
        <category>macOS</category>
        <category>Homebrew</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows修改固定IP和网络</title>
    <url>/Windows%E4%BF%AE%E6%94%B9%E5%9B%BA%E5%AE%9AIP%E5%92%8C%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="修改固定IP"><a href="#修改固定IP" class="headerlink" title="修改固定IP"></a>修改固定IP</h2><p>​	<strong>修改和固定<code>IP</code>，就是查找的IP的第二种方式的基础上进行操作</strong></p>
<span id="more"></span>

<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401161930369.png"></p>
<p>​	<strong>如上图的更改适配器，进行操作，<code>选择以太网</code>-&gt;<code>鼠标右键</code> -&gt;<code>点击属性</code></strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401162239432.png"></p>
<p>​	<strong>双击下图标注的<code>IPv4</code></strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401162323793-20230401163312323.png"></p>
<p>​	<strong>双击以后会出现下面的这种情况</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401163413779.png"></p>
<p><strong>通常情况下都是自动获取<code>DHCP</code>，双击以后也就是空白的，如果你需要固定IP，需要给对应的<code>ip</code>、<code>子网掩码</code>、<code>网关</code>填写即可。</strong></p>
<h2 id="重置网络"><a href="#重置网络" class="headerlink" title="重置网络"></a>重置网络</h2><blockquote>
<p>注：再非必要情况下最好不要进行网络重置</p>
</blockquote>
<p><strong>搜索<code>cmd</code>,然后右键<code>管理员</code>运行</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401164745531.png" alt="image-20230401164745531"></p>
<p><strong>打开以后输入<code>netsh winsock reset</code>,然后进行回车即可。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401165032282.png" alt="image-20230401165032282"></p>
<p><strong>出现上面这种情况也就代表你的网络重置成功，这时候电脑需要重启，然后将电脑重启即可。</strong></p>
]]></content>
      <categories>
        <category>IP</category>
        <category>Windows</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>IP</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>查询Windows IP</title>
    <url>/%E6%9F%A5%E8%AF%A2Windows-IP/</url>
    <content><![CDATA[<h2 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h2><h3 id="一、如何知道我们本机的IP地址"><a href="#一、如何知道我们本机的IP地址" class="headerlink" title="一、如何知道我们本机的IP地址"></a>一、如何知道我们本机的IP地址</h3><h4 id="第一步：首先电脑上面的快捷键win-R"><a href="#第一步：首先电脑上面的快捷键win-R" class="headerlink" title="第一步：首先电脑上面的快捷键win + R"></a>第一步：<strong>首先电脑上面的快捷键<code>win</code> + <code>R</code></strong></h4><span id="more"></span>

<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401155701051.png"></p>
<h4 id="第二步：然后在打开这个选项中输入cmd-然后回车"><a href="#第二步：然后在打开这个选项中输入cmd-然后回车" class="headerlink" title="第二步：然后在打开这个选项中输入cmd,然后回车"></a>第二步：<strong>然后在打开这个选项中输入<code>cmd</code>,然后回车</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401155900762.png"></p>
<h4 id="第三步：输入命令：ipconfig-然后进行回车"><a href="#第三步：输入命令：ipconfig-然后进行回车" class="headerlink" title="第三步：输入命令：ipconfig,然后进行回车"></a>第三步：<strong>输入命令：<code>ipconfig</code>,然后进行回车</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401160113210.png"></p>
<blockquote>
<p>注意这时候我标注出来的IPv4的地址就是一般所需要的地址</p>
</blockquote>
<h2 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h2><h4 id="第一步：搜索控制面板，然后进行回车"><a href="#第一步：搜索控制面板，然后进行回车" class="headerlink" title="第一步：搜索控制面板，然后进行回车"></a>第一步：搜索控制面板，然后进行回车</h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401160747545.png"></p>
<h4 id="第二步：选择网络和Internet"><a href="#第二步：选择网络和Internet" class="headerlink" title="第二步：选择网络和Internet"></a>第二步：选择<code>网络和Internet</code></h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401160937333.png"></p>
<h4 id="第三步：点击网络共享中心"><a href="#第三步：点击网络共享中心" class="headerlink" title="第三步：点击网络共享中心"></a>第三步：点击网络共享中心</h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401161048431.png"></p>
<p>​	第四步：点击<code>更改适配器</code>-&gt;<code>双击以太网</code>-&gt;点开<code>详细信息</code>就可以看到IP地址</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401161421970.png"></p>
<blockquote>
<p>以上就是如何查看电脑IP的方式，当然查看的IP的方式不仅仅是这这两种，也可以在设置网络里面进行直接的查看，还有其他方式等等…</p>
</blockquote>
]]></content>
      <categories>
        <category>运维</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Console连接交换机</title>
    <url>/Mac-Console%E8%BF%9E%E6%8E%A5%E4%BA%A4%E6%8D%A2%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="一、Mac使用console连接交换机"><a href="#一、Mac使用console连接交换机" class="headerlink" title="一、Mac使用console连接交换机"></a>一、Mac使用console连接交换机</h3><p>首先使用console线和Mac连接，这时候需要用到转换器typeC转USB-A</p>
<span id="more"></span>

<p>Mac上面查看是否com口的驱动安装成功</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这个tty.usbserial-A9KXFHCD就是我们com口的设备</span>
$ <span class="token function">ls</span> /dev/* <span class="token operator">|</span><span class="token function">grep</span> usb
/dev/tty.usbserial-A9KXFHCD
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>安装minicom来通过com连接交换机</p>
<pre class="line-numbers language-bash"><code class="language-bash">➜  ~ brew <span class="token function">install</span> minicom
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>配置minicom</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入到配置</span>
$ minicom -s
            +-----<span class="token punctuation">[</span>configuration<span class="token punctuation">]</span>------+
            <span class="token operator">|</span> Filenames and paths      <span class="token operator">|</span>
            <span class="token operator">|</span> File transfer protocols  <span class="token operator">|</span>
            <span class="token operator">|</span> Serial port setup        <span class="token operator">|</span>			<span class="token comment" spellcheck="true"># 选择此项回车</span>
            <span class="token operator">|</span> Modem and dialing        <span class="token operator">|</span>
            <span class="token operator">|</span> Screen and keyboard      <span class="token operator">|</span>
            <span class="token operator">|</span> Save setup as dfl        <span class="token operator">|</span>
            <span class="token operator">|</span> Save setup as<span class="token punctuation">..</span>          <span class="token operator">|</span>
            <span class="token operator">|</span> Exit                     <span class="token operator">|</span>
            <span class="token operator">|</span> Exit from Minicom        <span class="token operator">|</span>
            +--------------------------+
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">+-----------------------------------------------------------------------+
<span class="token operator">|</span> A -    Serial Device      <span class="token keyword">:</span> /dev/tty.usbserial-A9KXFHCD               <span class="token operator">|</span>	<span class="token comment" spellcheck="true"># 将此设备名称改为前面ls查看到的设备名称</span>
<span class="token operator">|</span> B - Lockfile Location     <span class="token keyword">:</span> /opt/homebrew/Cellar/minicom/2.8/var      <span class="token operator">|</span>
<span class="token operator">|</span> C -   Callin Program      <span class="token keyword">:</span>                                           <span class="token operator">|</span>
<span class="token operator">|</span> D -  Callout Program      <span class="token keyword">:</span>                                           <span class="token operator">|</span>
<span class="token operator">|</span> E -    Bps/Par/Bits       <span class="token keyword">:</span> 9600 8N1                                  <span class="token operator">|</span>	<span class="token comment" spellcheck="true"># 将此项改为9600 8N1</span>
<span class="token operator">|</span> F - Hardware Flow Control <span class="token keyword">:</span> No                                        <span class="token operator">|</span>	<span class="token comment" spellcheck="true"># 将此项改为No</span>
<span class="token operator">|</span> G - Software Flow Control <span class="token keyword">:</span> No                                        <span class="token operator">|</span>
<span class="token operator">|</span> H -     RS485 Enable      <span class="token keyword">:</span> No                                        <span class="token operator">|</span>
<span class="token operator">|</span> I -   RS485 Rts On Send   <span class="token keyword">:</span> No                                        <span class="token operator">|</span>
<span class="token operator">|</span> J -  RS485 Rts After Send <span class="token keyword">:</span> No                                        <span class="token operator">|</span>
<span class="token operator">|</span> K -  RS485 Rx During Tx   <span class="token keyword">:</span> No                                        <span class="token operator">|</span>
<span class="token operator">|</span> L -  RS485 Terminate Bus  <span class="token keyword">:</span> No                                        <span class="token operator">|</span>
<span class="token operator">|</span> M - RS485 Delay Rts Before: 0                                         <span class="token operator">|</span>
<span class="token operator">|</span> N - RS485 Delay Rts After <span class="token keyword">:</span> 0                                         <span class="token operator">|</span>
<span class="token operator">|</span>                                                                       <span class="token operator">|</span>
<span class="token operator">|</span>    Change <span class="token function">which</span> setting?                                              <span class="token operator">|</span>
+-----------------------------------------------------------------------+
<span class="token comment" spellcheck="true"># 回车</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">+-----<span class="token punctuation">[</span>configuration<span class="token punctuation">]</span>------+
<span class="token operator">|</span> Filenames and paths      <span class="token operator">|</span>
<span class="token operator">|</span> File transfer protocols  <span class="token operator">|</span>
<span class="token operator">|</span> Serial port setup        <span class="token operator">|</span>
<span class="token operator">|</span> Modem and dialing        <span class="token operator">|</span>
<span class="token operator">|</span> Screen and keyboard      <span class="token operator">|</span>
<span class="token operator">|</span> Save setup as dfl        <span class="token operator">|</span>	<span class="token comment" spellcheck="true"># 选择此项保存</span>
<span class="token operator">|</span> Save setup as<span class="token punctuation">..</span>          <span class="token operator">|</span>
<span class="token operator">|</span> Exit                     <span class="token operator">|</span>
<span class="token operator">|</span> Exit from Minicom        <span class="token operator">|</span>
+--------------------------+
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash">+-----<span class="token punctuation">[</span>configuration<span class="token punctuation">]</span>------+
<span class="token operator">|</span> Filenames and paths      <span class="token operator">|</span>
<span class="token operator">|</span> File transfer protocols  <span class="token operator">|</span>
<span class="token operator">|</span> Serial port setup        <span class="token operator">|</span>
<span class="token operator">|</span> Modem and dialing        <span class="token operator">|</span>
<span class="token operator">|</span> Screen and keyboard      <span class="token operator">|</span>
<span class="token operator">|</span> Save setup as dfl        <span class="token operator">|</span>
<span class="token operator">|</span> Save setup as<span class="token punctuation">..</span>          <span class="token operator">|</span>
<span class="token operator">|</span> Exit                     <span class="token operator">|</span>	<span class="token comment" spellcheck="true"># 选择此项进入到终端</span>
<span class="token operator">|</span> Exit from Minicom        <span class="token operator">|</span>
+--------------------------+
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进入终端以后输入密码即可</p>
<pre class="line-numbers language-bash"><code class="language-bash">$ Login authentication


Password:
<span class="token operator">&lt;</span>Quidway<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="二、配置华为交换机web访问"><a href="#二、配置华为交换机web访问" class="headerlink" title="二、配置华为交换机web访问"></a>二、配置华为交换机web访问</h3><p>配置vlanif的管理iP，在这里我的所有管理iP都在vlan100的管理iP</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>Quidway<span class="token operator">></span>system-view		<span class="token punctuation">(</span>进入系统视图<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>int vlanif 100		（进入vlan100接口）
<span class="token punctuation">[</span>Quidway-Vlanif100<span class="token punctuation">]</span>ip add 192.168.99.200 24			（为vlan100配置管理ip）
<span class="token punctuation">[</span>Quidway-Vlanif100<span class="token punctuation">]</span>q
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>q
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看web管理的文件包地址</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>Quidway<span class="token operator">></span>sys    <span class="token punctuation">(</span>进入系统视图<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>http server load web.7z   <span class="token punctuation">(</span>加载web包<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>http server <span class="token function">enable</span>    <span class="token punctuation">(</span>开启http服务<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>aaa    <span class="token punctuation">(</span>进入aaa视图<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Quidway-aaa<span class="token punctuation">]</span>local-user admin password cipher Admin123  <span class="token punctuation">(</span>配置管理账号与密码<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Quidway-aaa<span class="token punctuation">]</span>local-user admin privilege level 3   <span class="token punctuation">(</span>配置管理账号级别<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Quidway-aaa<span class="token punctuation">]</span>local-user admin service-type http   <span class="token punctuation">(</span>配置接入类型为http<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Quidway-aaa<span class="token punctuation">]</span>q   <span class="token punctuation">(</span>退出<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>q    <span class="token punctuation">(</span>退出<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Quidway<span class="token operator">></span>save    <span class="token punctuation">(</span>保存<span class="token punctuation">)</span>
Y   <span class="token punctuation">(</span>确认<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此就配置完成了，使用浏览器打开配置的管理vlanip，即可访问到交换机的管理web页面。</p>
<h3 id="三、交换机常用vlan配置，"><a href="#三、交换机常用vlan配置，" class="headerlink" title="三、交换机常用vlan配置，"></a>三、交换机常用vlan配置，</h3><p>vlan配置相关</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看交换机vlan配置信息</span>
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>display vlan

<span class="token comment" spellcheck="true"># 创建vlan100</span>
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>vlan 100
<span class="token punctuation">[</span>Quidway-vlan100<span class="token punctuation">]</span>q

<span class="token comment" spellcheck="true"># 将0/0/21端口从原有vlan中移除</span>
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>int GigabitEthernet 0/0/21
<span class="token punctuation">[</span>Quidway-GigabitEthernet0/0/21<span class="token punctuation">]</span>undo port default vlan
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建端口组，以及添加端口组</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看端口组中的成员</span>
<span class="token punctuation">[</span>Quidway-port-group-200<span class="token punctuation">]</span>display this

<span class="token comment" spellcheck="true"># 创建端口组</span>
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>port-group 100			<span class="token comment" spellcheck="true"># 创建端口组100，100为端口组名称</span>

<span class="token comment" spellcheck="true"># 将端口添加到端口组,将g0/0/1-g0/0/15添加到端口组100</span>
<span class="token punctuation">[</span>Quidway-port-group-100<span class="token punctuation">]</span>group-member GigabitEthernet 0/0/1 to GigabitEthernet 0/0/15

<span class="token comment" spellcheck="true"># 配置端口组中的端口访问模式</span>
<span class="token punctuation">[</span>Quidway-port-group-100<span class="token punctuation">]</span>port link-type access		<span class="token comment" spellcheck="true"># (这里设置为access模式，也可以是trunk模式的)；</span>

<span class="token comment" spellcheck="true"># 将端口组加入到vlan</span>
<span class="token punctuation">[</span>Quidway-port-group-100<span class="token punctuation">]</span>port default vlan 100

<span class="token comment" spellcheck="true"># 将22和21端口从端口组200中移除</span>
<span class="token punctuation">[</span>Quidway<span class="token punctuation">]</span>port-group 200
<span class="token punctuation">[</span>Quidway-port-group-200<span class="token punctuation">]</span>undo  group-member GigabitEthernet 0/0/22 GigabitEthernet 0/0/21
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="四、常用路由配置"><a href="#四、常用路由配置" class="headerlink" title="四、常用路由配置"></a>四、常用路由配置</h3><p>常用配置命令</p>
<pre class="line-numbers language-bash"><code class="language-bash">常用配置命令：
1.进入视图模式
    <span class="token operator">&lt;</span>Huawei<span class="token operator">></span>sys
2.进入接口
    <span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/1				<span class="token comment" spellcheck="true">#进入指定接口</span>
    <span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>user-interface console 0			<span class="token comment" spellcheck="true">#进入console口</span>
    <span class="token punctuation">[</span>Huawei-ui-console0<span class="token punctuation">]</span>authentication-mode password	<span class="token comment" spellcheck="true">#配置console口密码验证</span>
3.查看指定接口信息包括ip地址
    <span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>display ip interface g0/0/1
4.为指定接口配置ip地址
    <span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip add 192.168.1.111 24		<span class="token comment" spellcheck="true">#配ip</span>
    <span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>undo ip add 192.168.1.111 24	<span class="token comment" spellcheck="true">#删除配置的ip</span>
5.查看路由器ip配置表
    <span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>display current-configuration			<span class="token comment" spellcheck="true">#查看ip</span>
    <span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>display  ip routing-table			<span class="token comment" spellcheck="true">#查看路由表</span>
    <span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>display  nat  session  all			<span class="token comment" spellcheck="true">#查看nat地址转换表</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>nat配置命令</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 静态nat：在公网入站接口配置</span>
    <span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>interface  g0/0/0
    <span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>nat server global 39.105.70.100 inside 192.168.1.254	<span class="token comment" spellcheck="true">#将70.100静态nat到1.254</span>

<span class="token comment" spellcheck="true"># 动态pat：</span>
    <span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>acl number 2000				<span class="token comment" spellcheck="true">#使用acl匹配所有ip流量</span>
    <span class="token punctuation">[</span>Huawei-acl-basic-2000<span class="token punctuation">]</span>rule  1 permit
    <span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>interface  g0/0/0
    <span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>nat outbound  2000	<span class="token comment" spellcheck="true">#在出接口应用这个PAT规则</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开启telnet配置</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 路由器开启telnet配置：</span>
user-interface maximum-vty 15
user-interface vty 0 4
authentication-mode aaa         		<span class="token comment" spellcheck="true"># 配置认证模式为aaa</span>
q
aaa                                			  <span class="token comment" spellcheck="true"># 进入aaa视图</span>
local-user admin password cipher huawei    <span class="token comment" spellcheck="true"># 配置用户名为admin，密码为huawei</span>
local-user admin privilege level 3               <span class="token comment" spellcheck="true"># 设置用户权限为3</span>
local-user admin service-type telnet  <span class="token function">ssh</span>     <span class="token comment" spellcheck="true">#  定义用户接入类型为telnet</span>
dis this                                   		  <span class="token comment" spellcheck="true">#查看配置</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Switch</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Switch</tag>
      </tags>
  </entry>
  <entry>
    <title>新装的Windows10,11系统和Office激活教程</title>
    <url>/%E6%96%B0%E8%A3%85%E7%9A%84Windows10-11-%E7%B3%BB%E7%BB%9F%E5%92%8COffice-2016%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>首先我们要准备好激活软件，<code>HEU_KMS_Activator</code>这个软件的下载地址如下：<a href="https://github.com/zbezj/HEU_KMS_Activator/releases/tag/26.1.0">https://github.com/zbezj/HEU_KMS_Activator/releases/tag/26.1.0</a></p>
<span id="more"></span>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071525532.png"><br>标志的压缩包就是要下载的软件，解压即可用，解压密码也在图中有展示。</p>
<h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>下载并解压这个软件：</p>
<p>双击运行此软件！</p>
<h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>打开这个软件，对电脑系统和office进行激活即可</p>
<p>运行上面的 <code>HEU_KMS_Activator_v26.0.0.exe</code>如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071525536.png"></p>
<p>然后就是点击开始就行了，耐心等待进度条走完，激活完成即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071525986.png"></p>
<h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p>等百分之百的时候会有弹窗出来，即激活完毕。</p>
]]></content>
      <categories>
        <category>Windows教程 运维</category>
      </categories>
      <tags>
        <tag>Windows10&amp;Windows11</tag>
      </tags>
  </entry>
  <entry>
    <title>关于网络打印机教程（二）</title>
    <url>/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E6%89%93%E5%8D%B0%E6%9C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>本次教程主要是针对于<code>Windows11</code>打印机连接，以及扫描仪的相关问题解答</p>
</blockquote>
<p>在一般情况下，网络打印机带扫描仪功能，对于<code>Windows7</code>和<code>Windows10</code>操作系统来说，直接去对应的官网和对应的打印机驱动网站直接下载对应的驱动即可，但是<code>Windows11</code>有点不太一样。</p>
<span id="more"></span>
<p>首先就是<code>Windows11</code>怎么添加打印机，<code>设置</code>-&gt;<code>蓝牙和其他设备</code>-&gt;<code>打印机和扫描仪</code>-&gt;<code>添加设备</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211250929234.png"></p>
<p>如果你是已经连接到了打印机，这时候就可以刷新检测到了</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211250932931.png"></p>
<p>如果手没有检测到检查线路连接的同时，手动添加设备，手动添加设备如果你不知道流程，可以回看我的教程（一），按照流程走完，检测到驱动以后会自动安装驱动。自此打印机的驱动算是完成了。</p>
<p>重点是扫描仪，如果打印机带扫描仪功能，<code>Windows10</code>操作系统需要你去官网或者是打印机驱动网下载驱动安装，<code>Windows11</code>则是装完驱动以后，自动扫描，如果检测不到扫描仪，原因可能是打印机驱动问题，还有可能就是系统问题，因为这个不确定因素太多，需要逐一排查。</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>打印机</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>关于网络打印机教程（一）</title>
    <url>/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E6%89%93%E5%8D%B0%E6%9C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>注意：本教程只适合网络打印机且同一局域网打印机</p>
</blockquote>
<h3 id="鼠标右键选择个性化"><a href="#鼠标右键选择个性化" class="headerlink" title="鼠标右键选择个性化"></a>鼠标右键选择<code>个性化</code></h3><span id="more"></span>
<h3 id="首先选择主页："><a href="#首先选择主页：" class="headerlink" title="首先选择主页："></a>首先选择<code>主页</code>：</h3><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211929625.png"></p>
<h3 id="其次选择设备"><a href="#其次选择设备" class="headerlink" title="其次选择设备"></a>其次选择<code>设备</code></h3><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211930726.png"></p>
<h3 id="再选择设备与打印机"><a href="#再选择设备与打印机" class="headerlink" title="再选择设备与打印机"></a>再选择<code>设备与打印机</code></h3><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211933448.png"></p>
<h3 id="然后选择添加打印机"><a href="#然后选择添加打印机" class="headerlink" title="然后选择添加打印机"></a>然后选择<code>添加打印机</code></h3><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211934010.png"></p>
<blockquote>
<p>注意选择以后，这时候会出现自动搜索界面，搜索打印机，如果你想要连接的打印机没有在搜索的列表中，这时候就需要手动添加。如果有的话，直接选中你要连接的打印机下一步即可。等待驱动自动安装完成就结束了。</p>
<p>有的驱动window10系统是不能自动安装驱动，这时候需要手动下载驱动，到打印机驱动网站下载驱动就行了，网址：<a href="http://www.dyjqd.com/%EF%BC%8C%E8%87%AA%E8%A1%8C%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84%E6%89%93%E5%8D%B0%E6%9C%BA%E5%9E%8B%E5%8F%B7%E5%8D%B3%E5%8F%AF%EF%BC%8C%E8%A6%81%E6%B3%A8%E6%84%8F%E4%B8%8B%E8%BD%BD%E6%97%B6%E5%80%99%E9%80%89%E6%8B%A9%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%8C%E4%B8%8D%E8%A6%81%E4%B8%8B%E8%BD%BD%E9%94%99%E8%AF%AF%E3%80%82">http://www.dyjqd.com/，自行下载对应的打印机型号即可，要注意下载时候选择官网下载，不要下载错误。</a></p>
</blockquote>
<h4 id="下面是以惠普HP-LaserJet-M1005-MFP打印机驱动为例子："><a href="#下面是以惠普HP-LaserJet-M1005-MFP打印机驱动为例子：" class="headerlink" title="下面是以惠普HP LaserJet M1005 MFP打印机驱动为例子："></a>下面是以<code>惠普HP LaserJet M1005 MFP</code>打印机驱动为例子：</h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211940929.png"></p>
<p>下载安装即可。</p>
<h4 id="回到刚才如果你在搜索框里面没有找到你的打印机，这时候应该怎么做呢？"><a href="#回到刚才如果你在搜索框里面没有找到你的打印机，这时候应该怎么做呢？" class="headerlink" title="回到刚才如果你在搜索框里面没有找到你的打印机，这时候应该怎么做呢？"></a>回到刚才如果你在搜索框里面没有找到你的打印机，这时候应该怎么做呢？</h4><h4 id="手动添加IP："><a href="#手动添加IP：" class="headerlink" title="手动添加IP："></a>手动添加IP：</h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211942117.png"></p>
<ul>
<li>选择我所需要的打印机未列出，然后选择<code>使用IP地址或主机名添加打印机</code></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211942661.png"></p>
<ul>
<li>这里选择<code>自动检测</code>或<code>TCP/IP</code>都可以，然后输入你打印机的IP地址，然后下一步即可（PS:下图中的IP地址只是一个例子，根据自己打印机的实际情况而定）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211946943.png"></p>
<ul>
<li>最后下一步，然后就等着搜索到打印机，安装驱动即可。</li>
</ul>
<p>最后注意，这个教程只适合网络打印机，局域网的情况下，校园网的前提是IP端口没有限制，在同一个路由器下按理来说都可以用的，这篇文章也只是适合小白，或者是不懂计算机的人，如果你在连接有时候遇到什么问题可以联系我<code>QQ：2842888712</code>，如果你是一个高手，希望你可以批评指正，希望这篇文章对你来说有些许的帮助~</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>打印机</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/Nginx/</url>
    <content><![CDATA[<hr>
<p>[TOC]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-代理问题"><a href="#1-1-代理问题" class="headerlink" title="1.1 代理问题"></a>1.1 代理问题</h4><blockquote>
<p>客户端到底要将请求发送给哪台服务器。</p>
</blockquote>
<span id="more"></span>
<table>
<thead>
<tr>
<th align="center">发送给服务器1还是服务器2</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071023267.png"></td>
</tr>
</tbody></table>
<!--more-->
<h4 id="1-2-负载均衡问题"><a href="#1-2-负载均衡问题" class="headerlink" title="1.2 负载均衡问题"></a>1.2 负载均衡问题</h4><blockquote>
<p>如果所有客户端的请求都发送给了服务器1，那么服务器2将没有任何意义</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">负载均衡问题</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071024949.png" alt="1589265005701"></td>
</tr>
</tbody></table>
<h4 id="1-3-资源优化"><a href="#1-3-资源优化" class="headerlink" title="1.3 资源优化"></a>1.3 资源优化</h4><blockquote>
<p>客户端发送的请求可能是申请动态资源的，也有申请静态资源，但是都是去Tomcat中获取的</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">静态资源访问</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071024993.png"></td>
</tr>
</tbody></table>
<h4 id="1-4-Nginx处理"><a href="#1-4-Nginx处理" class="headerlink" title="1.4 Nginx处理"></a>1.4 Nginx处理</h4><table>
<thead>
<tr>
<th align="center">在搭建集群后，使用Nginx</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071024840.png"></td>
</tr>
</tbody></table>
<h3 id="二、Nginx概述"><a href="#二、Nginx概述" class="headerlink" title="二、Nginx概述"></a>二、Nginx概述</h3><hr>
<blockquote>
<p>Nginx是由俄罗斯人研发的，应对Rambler的网站，并且2004年发布的第一个版本。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Nginx之父</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071024237.png" alt="1586502874584"></td>
</tr>
</tbody></table>
<blockquote>
<p>Nginx的特点：</p>
<ul>
<li>稳定性极强。 7*24小时不间断运行。</li>
<li>Nginx提供了非常丰富的配置实例。</li>
<li>占用内存小，并发能力强。</li>
</ul>
</blockquote>
<h3 id="三、Nginx的安装"><a href="#三、Nginx的安装" class="headerlink" title="三、Nginx的安装"></a>三、Nginx的安装</h3><hr>
<h4 id="3-1-安装Nginx"><a href="#3-1-安装Nginx" class="headerlink" title="3.1 安装Nginx"></a>3.1 安装Nginx</h4><blockquote>
<p>使用Docker-Compose安装，创建docker-compose.yml写入以下内容：</p>
</blockquote>
<pre class="line-numbers language-yml"><code class="language-yml">version: '3.1'
services:
  nginx:
    restart: always
    image: daocloud.io/library/nginx:latest
    container_name: nginx
    ports:
      - 80:80
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">[root@192 ~]# cd /opt
[root@192 opt]# mkdir docker_nginx
[root@192 opt]# cd docker_nginx/
[root@192 docker_nginx]# vim docker-compose.yml
[root@192 docker_nginx]# docker-compose up -d
Creating network "docker_nginx_default" with the default driver
Pulling nginx (daocloud.io/library/nginx:latest)...
latest: Pulling from library/nginx
45b42c59be33: Pull complete
d0d9e9ea897e: Pull complete
66e650438339: Pull complete
76a3dfe4406b: Pull complete
410ff9d97480: Pull complete
Digest: sha256:1a53eb723d17523512bd25c27299046cfa034cce309f4ed330c943a304513f59
Status: Downloaded newer image for daocloud.io/library/nginx:latest
Creating nginx ... done
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>浏览器访问即可（80端口可以省略不写，云服务器记得去开放80端口）</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071024665.png"></p>
<h4 id="3-2-Nginx的配置文件"><a href="#3-2-Nginx的配置文件" class="headerlink" title="3.2 Nginx的配置文件"></a>3.2 Nginx的配置文件</h4><blockquote>
<p>关于Nginx的核心配置文件nginx.conf</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">[root@192 docker_nginx]# docker ps
CONTAINER ID   IMAGE                              COMMAND                  CREATED         STATUS         PORTS                               NAMES
617da0b0dbbb   daocloud.io/library/nginx:latest   "/docker-entrypoint.…"   8 minutes ago   Up 8 minutes   0.0.0.0:80->80/tcp, :::80->80/tcp   nginx
[root@192 docker_nginx]# docker exec -it 617 bash
root@617da0b0dbbb:/# cd /etc/nginx
root@617da0b0dbbb:/etc/nginx# ls
conf.d		koi-utf  mime.types  nginx.conf   uwsgi_params
fastcgi_params	koi-win  modules     scgi_params  win-utf
root@617da0b0dbbb:/etc/nginx# cat nginx.conf 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>查看nginx.conf 配置文件</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# 参数说明
# 以上统称为全局块， 
# worker_processes的数值越大，Nginx的并发能力就越强（由运维人员修改）
# error_log 代表Nginx的错误日志存放的位置

events &#123;
    worker_connections  1024;
&#125;

# 参数说明
# events块
# worker_connections的数值越大，Nginx的并发能力就越强（由运维人员修改）

http &#123;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
&#125;

# 参数说明
# http块
# include代表引入一个外部的文件 -> /mime.types中放着大量的媒体类型
# include /etc/nginx/conf.d/*.conf; -> 引入了conf.d目录下的以.conf为结尾的配置文件
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>nginx.conf 配置文件中发现，最后一行引入了conf.d目录下的*.conf文件</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">root@617da0b0dbbb:/etc/nginx# ls
conf.d		koi-utf  mime.types  nginx.conf   uwsgi_params
fastcgi_params	koi-win  modules     scgi_params  win-utf
root@617da0b0dbbb:/etc/nginx# cd conf.d/
root@617da0b0dbbb:/etc/nginx/conf.d# ls
default.conf
root@617da0b0dbbb:/etc/nginx/conf.d# cat default.conf 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>查看default.conf 配置文件</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh"># 参数说明
# server块
# listen： 代表Nginx监听的端口号
# localhost：代表Nginx接收请求的ip

server &#123;
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / &#123;
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    &#125;
    
    # 参数说明
    # location块
    # root：将接收到的请求根据/usr/share/nginx/html去查找静态资源
    # index： 默认去上述的路径中找到index.html或者index.htm

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html &#123;
        root   /usr/share/nginx/html;
    &#125;

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ &#123;
    #    proxy_pass   http://127.0.0.1;
    #&#125;

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ &#123;
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #&#125;

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht &#123;
    #    deny  all;
    #&#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-3-配置数据卷操作Nginx"><a href="#3-3-配置数据卷操作Nginx" class="headerlink" title="3.3 配置数据卷操作Nginx"></a>3.3 配置数据卷操作Nginx</h4><blockquote>
<p>为了方便修改Nginx配置，修改docker-compose.yml文件，设置 volumes ，重新启动</p>
</blockquote>
<pre class="line-numbers language-yml"><code class="language-yml">version: '3.1'
services:
  nginx:
    restart: always
    image: daocloud.io/library/nginx:latest
    container_name: nginx
    ports:
      - 80:80
    volumes:
      - /opt/docker_nginx/conf.d/:/etc/nginx/conf.d
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">root@617da0b0dbbb:/etc/nginx/conf.d# exit 
exit
[root@192 docker_nginx]# vim docker-compose.yml 
[root@192 docker_nginx]# docker-compose down
Stopping nginx ... done
Removing nginx ... done
Removing network docker_nginx_default
[root@192 docker_nginx]# docker-compose up -d
Creating network "docker_nginx_default" with the default driver
Creating nginx ... done
[root@192 docker_nginx]# ls
conf.d  docker-compose.yml
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>此时再使用浏览器访问则无法访问nginx.html页面了，此时需要在conf.d目录下创建default.conf文件，配置一个server，再重新启动即可</p>
</blockquote>
<pre><code>server &#123;
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    location / &#123;
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    &#125;
&#125;
</code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">[root@192 docker_nginx]# cd conf.d/
[root@192 conf.d]# vim default.conf
[root@192 conf.d]# cd ..
[root@192 docker_nginx]# docker-compose restart
Restarting nginx ... done
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="四、Nginx的反向代理【重点】"><a href="#四、Nginx的反向代理【重点】" class="headerlink" title="四、Nginx的反向代理【重点】"></a>四、Nginx的反向代理【<code>重点</code>】</h3><hr>
<h4 id="4-1-正向代理和反向代理介绍"><a href="#4-1-正向代理和反向代理介绍" class="headerlink" title="4.1 正向代理和反向代理介绍"></a>4.1 正向代理和反向代理介绍</h4><blockquote>
<p>正向代理：</p>
<ul>
<li>正向代理服务是由客户端设立的。</li>
<li>客户端了解代理服务器和目标服务器都是谁。</li>
<li>帮助咱们实现突破访问权限，提高访问的速度，对目标服务器隐藏客户端的ip地址。</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">正向代理</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071025691.png" alt="1586512751639"></td>
</tr>
</tbody></table>
<blockquote>
<p>反向代理：</p>
<ul>
<li>反向代理服务器是配置在服务端的。</li>
<li>客户端是不知道访问的到底是哪一台服务器。</li>
<li>达到负载均衡，并且可以隐藏服务器真正的ip地址。</li>
</ul>
</blockquote>
<p><img src="/Pictures/1586513061851.png" alt="1586513061851"></p>
<h4 id="4-2-基于Nginx实现反向代理"><a href="#4-2-基于Nginx实现反向代理" class="headerlink" title="4.2 基于Nginx实现反向代理"></a>4.2 基于Nginx实现反向代理</h4><blockquote>
<p>创建三个Tomcat，通过数据卷映射，在映射目录下创建ROOT目录，在对应的ROOT目录下再创建index.html（需要创建三个ROOT目录和三个index.html，index.html内容不要相同，用于测试）</p>
</blockquote>
<blockquote>
<p>docker-compose.yml内容如下：</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">version: '3.1'
services:
  tomcat1:
    restart: always
    image: daocloud.io/library/tomcat:8.5.15-jre8
    container_name: tomcat8081
    ports:
      - 8081:8080
    environment:
      TZ: Asia/Shanghai
    volumes:
      - /opt/docker_tomcats/tomcat_webapps8081:/usr/local/tomcat/webapps
  tomcat2:
    restart: always
    image: daocloud.io/library/tomcat:8.5.15-jre8
    container_name: tomcat8082
    ports:
      - 8082:8080
    environment:
      TZ: Asia/Shanghai
    volumes:
      - /opt/docker_tomcats/tomcat_webapps8082:/usr/local/tomcat/webapps
  tomcat3:
    restart: always
    image: daocloud.io/library/tomcat:8.5.15-jre8
    container_name: tomcat8083
    ports:
      - 8083:8080
    environment:
      TZ: Asia/Shanghai
    volumes:
      - /opt/docker_tomcats/tomcat_webapps8083:/usr/local/tomcat/webapps
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>具体步骤如下：</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">[root@192 opt]# mkdir docker_tomcats
[root@192 opt]# cd docker_tomcats/
[root@192 docker_tomcats]# vim docker-compose.yml 
[root@192 docker_tomcats]# docker-compose up -d
Creating network "docker_tomcats_default" with the default driver
Creating tomcat8082 ... done
Creating tomcat8081 ... done
Creating tomcat8083 ... done
[root@192 docker_tomcats]# ls
docker-compose.yml  tomcat_webapps8081  tomcat_webapps8082  tomcat_webapps8083
[root@192 docker_tomcats]# cd tomcat_webapps8081
[root@192 tomcat_webapps8081]# mkdir ROOT
[root@192 tomcat_webapps8081]# cd ROOT
[root@192 ROOT]# vim index.html
[root@192 ROOT]# cd ..
[root@192 tomcat_webapps8081]# cd ..
[root@192 docker_tomcats]# cd tomcat_webapps8082
[root@192 tomcat_webapps8082]# mkdir ROOT
[root@192 tomcat_webapps8082]# cd ROOT
[root@192 ROOT]# vim index.html
[root@192 ROOT]# cd ..
[root@192 tomcat_webapps8082]# cd ..
[root@192 docker_tomcats]# cd tomcat_webapps8083
[root@192 tomcat_webapps8083]# mkdir ROOT
[root@192 tomcat_webapps8083]# cd ROOT
[root@192 ROOT]# vim index.html
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>然后修改nginx的default.conf配置文件，使其通过Nginx访问到tomcat服务器。</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">server &#123;
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    # 基于反向代理访问到Tomcat服务器
    location / &#123;
      proxy_pass http://192.168.25.132:8081/;
    &#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">[root@192 opt]# cd docker_nginx/
[root@192 docker_nginx]# ls
conf.d  docker-compose.yml
[root@192 docker_nginx]# cd conf.d/
[root@192 conf.d]# ls
default.conf
[root@192 conf.d]# vim default.conf 
[root@192 conf.d]# cd ..
[root@192 docker_nginx]# docker-compose restart
Restarting nginx ... done
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>再次访问时，nginx主页直接显示到对应tomcat的页面了</p>
</blockquote>
<h4 id="4-3-关于Nginx的location路径映射"><a href="#4-3-关于Nginx的location路径映射" class="headerlink" title="4.3 关于Nginx的location路径映射"></a>4.3 关于Nginx的location路径映射</h4><blockquote>
<p>优先级关系如下：</p>
</blockquote>
<pre class="line-numbers language-json"><code class="language-json"># <span class="token number">1</span>. 直接匹配
location = / &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  # 精准匹配，主机名后面不能带任何的字符串
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>

# <span class="token number">2</span>. 通用匹配
location /xxx &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  # 匹配所有以/xxx开头的路径
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>

# <span class="token number">3</span>. 正则匹配
location ~ /xxx &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  # 匹配所有以/xxx开头的路径
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>

# <span class="token number">4</span>. 匹配开头路径
location ^~ /images/ &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  # 匹配所有以/images开头的路径
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>

# <span class="token number">5</span>. 匹配后缀
location ~* \.(gif|jpg|png<span class="token punctuation">)</span>$ &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  # 匹配以gif或者jpg或者png为结尾的路径
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>

# <span class="token number">6</span>. 全部通配
location / &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  # 匹配全部路径  
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="五、Nginx负载均衡【重点】"><a href="#五、Nginx负载均衡【重点】" class="headerlink" title="五、Nginx负载均衡【重点】"></a>五、Nginx负载均衡【<code>重点</code>】</h3><hr>
<blockquote>
<p>Nginx为我们默认提供了三种负载均衡的策略：</p>
<p>​	轮询：将客户端发起的请求，平均的分配给每一台服务器。</p>
<p>​	权重：会将客户端的请求，根据服务器的权重值不同，分配不同的数量。</p>
<p>​	ip_hash：基于当前发起请求的客户端的ip地址，如果ip地址不变，始终会将请求发送到当前的服务器上。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071025043.png"></p>
<h4 id="5-1-轮询"><a href="#5-1-轮询" class="headerlink" title="5.1 轮询"></a>5.1 轮询</h4><blockquote>
<p>想实现Nginx轮询负载均衡机制需要修改default.conf配置文件中的内容：</p>
</blockquote>
<pre class="line-numbers language-json"><code class="language-json">upstream 名字 &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  server ip<span class="token operator">:</span>port<span class="token punctuation">;</span>
  server ip<span class="token operator">:</span>port<span class="token punctuation">;</span>
  ...
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
server &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  listen <span class="token number">80</span><span class="token punctuation">;</span>
  listen  <span class="token punctuation">[</span><span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">;</span>
  server_name localhost<span class="token punctuation">;</span>
  
  location / &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    proxy_pass http<span class="token operator">:</span>//upstream的名字/<span class="token punctuation">;</span>
  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>例如：（注意：upstream的名字不要使用下划线）</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">upstream my<span class="token operator">-</span>server <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  server <span class="token number">47.100</span><span class="token punctuation">.</span><span class="token number">241.89</span><span class="token operator">:</span><span class="token number">8081</span><span class="token punctuation">;</span>
  server <span class="token number">47.100</span><span class="token punctuation">.</span><span class="token number">241.89</span><span class="token operator">:</span><span class="token number">8082</span><span class="token punctuation">;</span>
  server <span class="token number">47.100</span><span class="token punctuation">.</span><span class="token number">241.89</span><span class="token operator">:</span><span class="token number">8083</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
server <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  listen <span class="token number">80</span><span class="token punctuation">;</span>
  listen  <span class="token punctuation">[</span><span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">;</span>
  server_name localhost<span class="token punctuation">;</span>
  
  location <span class="token operator">/</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    proxy_pass http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>my<span class="token operator">-</span>server<span class="token operator">/</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">[root@192 opt]# cd docker_nginx/
[root@192 docker_nginx]# ls
conf.d  docker-compose.yml
[root@192 docker_nginx]# cd conf.d/
[root@192 conf.d]# ls
default.conf
[root@192 conf.d]# vim default.conf 
[root@192 conf.d]# cd ..
[root@192 docker_nginx]# docker-compose restart
Restarting nginx ... done
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注：若轮询无法实现，把nginx.conf核心配置文件中的 keepalive_timeout  65 改为 keepalive_timeout  0 即可！</p>
</blockquote>
<h4 id="5-2-权重"><a href="#5-2-权重" class="headerlink" title="5.2 权重"></a>5.2 权重</h4><blockquote>
<p>实现权重的方式</p>
</blockquote>
<pre class="line-numbers language-json"><code class="language-json">upstream 名字 &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  server ip<span class="token operator">:</span>port weight=权重比例<span class="token punctuation">;</span>
  server ip<span class="token operator">:</span>port weight=权重比例<span class="token punctuation">;</span>
  ...
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
server &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  listen <span class="token number">80</span><span class="token punctuation">;</span>
  server_name localhost<span class="token punctuation">;</span>
  
  location / &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    proxy_pass http<span class="token operator">:</span>//upstream的名字/<span class="token punctuation">;</span>
  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>例如：</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">upstream my-server &#123;
  server 47.100.241.89:8081 weight=10;
  server 47.100.241.89:8082 weight=5;
  server 47.100.241.89:80 weight=1;
&#125;
server &#123;
  listen 80;
  listen  [::]:80;
  server_name localhost;
  
  location / &#123;
    proxy_pass http://my-server/;
  &#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">[root@192 docker_nginx]# cd conf.d/
[root@192 conf.d]# ls
default.conf
[root@192 conf.d]# vim default.conf 
[root@192 conf.d]# cd ..
[root@192 docker_nginx]# docker-compose restart
Restarting nginx ... done
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-3-ip-hash"><a href="#5-3-ip-hash" class="headerlink" title="5.3 ip_hash"></a>5.3 ip_hash</h4><blockquote>
<p>ip_hash实现，只需要添加一个  ip_hash 配置即可，在暂时不使用的服务器后面添加down即可</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">upstream 名字 &#123;
  ip_hash; # 配置ip_hash
  server ip:port down;
  server ip:port;
  ...
&#125;
server &#123;
  listen 80;
  server_name localhost;
  
  location / &#123;
    proxy_pass http://upstream的名字/;
  &#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>例如：</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">upstream my-server &#123;
  ip_hash;
  server 192.168.25.140:8081;
  server 192.168.25.140:8082 down;
  server 192.168.25.140:8083 down;
&#125;
server &#123;
  listen 80;
  listen  [::]:80;
  server_name localhost;

  location / &#123;
    proxy_pass http://my-server/;
  &#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="六、Nginx动静分离【重点】"><a href="#六、Nginx动静分离【重点】" class="headerlink" title="六、Nginx动静分离【重点】"></a>六、Nginx动静分离【<code>重点</code>】</h3><hr>
<blockquote>
<p>Nginx的并发能力公式：</p>
<p>worker_processes * worker_connections &#x2F; 4 | 2 &#x3D; Nginx最终的并发能力</p>
<p>动态资源需要&#x2F;4，静态资源需要&#x2F;2.</p>
<p>Nginx通过动静分离，来提升Nginx的并发能力，更快的给用户响应。</p>
</blockquote>
<h4 id="6-1-动态资源代理"><a href="#6-1-动态资源代理" class="headerlink" title="6.1 动态资源代理"></a>6.1 动态资源代理</h4><blockquote>
<p>使用proxy_pass动态代理</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh"># 配置如下
location / &#123;
  proxy_pass 路径;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-2-静态资源代理"><a href="#6-2-静态资源代理" class="headerlink" title="6.2 静态资源代理"></a>6.2 静态资源代理</h4><blockquote>
<p>使用root静态代理</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh"># 配置如下
location / &#123;
  root 静态资源路径;
  index 默认访问路径下的什么资源;
  autoindex on; # 代表展示静态资源全的全部内容，以列表的形式展开。
&#125;

# 先修改docker，添加一个数据卷，映射到Nginx服务器的一个目录
# 添加了index.html和1.jpg静态资源
# 修改配置文件
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">[root@localhost docker_nginx]# ls
conf.d  docker-compose.yml
[root@localhost docker_nginx]# vim docker-compose.yml 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>修改docker-compose.yml为如下内容：</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">version: '3.1'
services:
  nginx:
    restart: always
    image: daocloud.io/library/nginx:latest
    container_name: nginx
    ports:
      - 80:80
    volumes:
      - /opt/docker_nginx/conf.d/:/etc/nginx/conf.d
      - /opt/docker_nginx/img/:/data/img
      - /opt/docker_nginx/html/:/data/html
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>重启再查看，目录已经创建</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">[root@localhost docker_nginx]# docker-compose down
Stopping nginx ... done
Removing nginx ... done
Removing network docker_nginx_default
[root@localhost docker_nginx]# docker-compose up -d
Creating network "docker_nginx_default" with the default driver
Creating nginx ... done
[root@localhost docker_nginx]# ls
conf.d  docker-compose.yml  html  img
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>分别在 html 以及 img 目录中拷贝对应的 html 页面和图片即可，然后修改 Nginx 的 default.conf 配置文件</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">server &#123;
  listen 80;
  listen  [::]:80;
  server_name localhost;

  # 代理到html的静态资源
  location /html &#123;
    root /data;   #由于location后面写的是/html，所以root后的路径就不用写成/data/html，/html会默认放在/data后面
    index student.html;#默认访问student.html
  &#125;

  # 代理到img的静态资源
  location /img &#123;
    root /data;
    autoindex on;#以列表的形式展开
  &#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">[root@localhost docker_nginx]# cd conf.d/
[root@localhost conf.d]# vim default.conf 
[root@localhost conf.d]# cd ..
[root@localhost docker_nginx]# docker-compose restart
Restarting nginx ... done
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>浏览器分别访问以下地址进行测试：</p>
<p>​		<a href="http://39.98.132.196/html/">http://39.98.132.196/html/</a> （查看之前拷贝的student.html页面）</p>
<p>​		<a href="http://39.98.132.196/img/2.jpg">http://39.98.132.196/img/2.jpg</a> （注：2.jpg是拷贝的图片名称）</p>
<p>​		<a href="http://39.98.132.196/img/">http://39.98.132.196/img/</a> （注：可以看到当前目录下的所有文件）</p>
</blockquote>
<h3 id="七、Nginx集群"><a href="#七、Nginx集群" class="headerlink" title="七、Nginx集群"></a>七、Nginx集群</h3><hr>
<blockquote>
<p>单点故障，避免nginx的宕机，导致整个程序的崩溃</p>
<p>准备多台Nginx。</p>
<p>准备keepalived，监听nginx的健康情况。</p>
<p>准备haproxy，提供一个虚拟的路径，统一的去接收用户得请求。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Nginx集群</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071025764.png" alt="1588755548570"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Windows一些常用Command</title>
    <url>/%E5%85%B3%E4%BA%8EWindows%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8Command/</url>
    <content><![CDATA[<h3 id="关机、重启、注销、休眠、定时"><a href="#关机、重启、注销、休眠、定时" class="headerlink" title="关机、重启、注销、休眠、定时"></a>关机、重启、注销、休眠、定时</h3><ul>
<li>关机：<code>shutdown /s</code></li>
<li>重启：<code>shutdown /r</code></li>
<li>注销：<code>shutdown /l</code></li>
<li>休眠：<code>shutdown /h /f</code></li>
<li>取消关机：<code>shutdown /a</code></li>
<li>定时关机：<code>shutdown /s /t 3600</code>（3600 秒后关机）<span id="more"></span></li>
</ul>
<h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><p><strong>切换目录，进入指定文件夹：</strong></p>
<ul>
<li>切换磁盘：<code>d:</code>（进入 d 盘）</li>
<li>切换磁盘和目录：<code>cd /d d:/test</code>（进入 <code>d</code> 盘 <code>test</code> 文件夹）</li>
<li>进入文件夹：<code>cd \test1\test2</code>（进入 <code>test2</code> 文件夹）</li>
<li>返回根目录：<code>cd \</code></li>
<li>回到上级目录：<code>cd ..</code></li>
<li>新建文件夹：<code>md test</code></li>
</ul>
<p><strong>显示目录内容：</strong></p>
<ul>
<li>显示目录中文件列表：<code>dir</code></li>
<li>显示目录结构：<code>tree d:\test</code>（d 盘 test 目录）</li>
<li>显示当前目录位置：<code>cd</code></li>
<li>显示指定磁盘的当前目录位置：<code>cd d:</code></li>
</ul>
<h3 id="网络操作"><a href="#网络操作" class="headerlink" title="网络操作"></a><strong>网络操作</strong></h3><ul>
<li>延迟和丢包率：<code>ping ip/域名</code></li>
<li>Ping 测试 5 次：<code>ping ip/域名 -n 5</code></li>
<li>清除本地 DNS 缓存：<code>ipconfig /flushdns</code></li>
<li>路由追踪：<code>tracert ip/域名</code></li>
</ul>
<h3 id="进程-服务操作"><a href="#进程-服务操作" class="headerlink" title="进程&#x2F;服务操作"></a><strong>进程&#x2F;服务操作</strong></h3><p><strong>进程管理：</strong></p>
<ul>
<li>显示当前正在运行的进程：<code>tasklist</code></li>
<li>运行程序或命令：<code>start 程序名</code></li>
<li>结束进程，按名称：<code>taskkill /im notepad.exe</code>（关闭记事本）</li>
<li>结束进程，按 PID：<code>taskkill /pid 1234</code>（关闭 PID 为 1234 的进程）</li>
</ul>
<p><strong>服务管理：</strong></p>
<ul>
<li>显示当前正在运行的服务：<code>net start</code></li>
<li>启动指定服务：<code>net start 服务名</code></li>
<li>停止指定服务：<code>net stop 服务名</code></li>
</ul>
<h3 id="保存为-bat-可执行文件"><a href="#保存为-bat-可执行文件" class="headerlink" title="保存为 .bat 可执行文件"></a>保存为 .bat 可执行文件</h3><p>我们可以将常用的命令输入记事本中，并保存为后缀为 <code>.bat</code> 的可执行文件。</p>
<p>以后只要双击该文件即可执行指定命令；将文件放入系统【启动】目录中，可以实现开机自动运行。</p>
<h3 id="使用的案例"><a href="#使用的案例" class="headerlink" title="使用的案例"></a>使用的案例</h3><p><strong>使用示例 1：</strong></p>
<p>在资源管理器卡死时，我们可以使用 <code>taskkill</code> 命令重启。将下面命令保存为 <code>ReExplorer.bat</code>，在需要时双击即可强制重启资源管理器。或直接打开 CMD 运行命令也可以。</p>
<p>text</p>
<pre class="line-numbers language-text"><code class="language-text">01taskkill /f /im explorer.exe & start explorer.exe
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>使用示例 2：</strong></p>
<p>迅雷会在后台自动运行 <code>ThunderPlatform.exe</code> 进程和 <code>XLServicePlatform</code> 服务，如果当前没有使用迅雷的话显然没必要。</p>
<p>我们可以将如下代码保存为 <code>killxl.bat</code>，并放入【启动】目录，开机后会自动运行该脚本，清除这两个进程。</p>
<p>text</p>
<pre class="line-numbers language-text"><code class="language-text">0102net stop XLServicePlatform
taskkill /F /im ThunderPlatform.exe
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows Command</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Rider引入nuget无法加载包依赖解方式</title>
    <url>/%E5%85%B3%E4%BA%8ERider%E5%BC%95%E5%85%A5nuget%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E5%8C%85%E4%BE%9D%E8%B5%96%E8%A7%A3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>这个问题已经是困扰我三天了，因为<code>C#</code>使用<code>ride</code>r开发的人相对较少，也可能是我自身遇到这个问题比较特殊，终于找到了<code>nuget</code>无法引入包的解决方案</p>
</blockquote>
<span id="more"></span>
<p>首先看图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211220823203.png"></p>
<p>我在<code>Nuget</code>下面查找<code>Nunit</code>测试包下面都没有加载出来，其他的包也是加载不出来，下面一直显示的包重置，但是我是默认下载下来的，什么也没有修改，然后我就点开了<code>nuget.config</code>这个配置文件</p>
<p>图中也有，我在网上也没有找到相关的配置说明，当时也没有想到去微软官网去看，因为官网讲的基本都是关于VS的配置。</p>
<p>在默认配置中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211220828462.png"></p>
<p>source中默认的feeds连接都是空的，问题就是出在我上面标注出来的包的下载地址。</p>
<p>给下面从微软官方找到的配置地址，复制到<code>nuget.config</code>配置文件中</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- defaultPushSource key works like the 'defaultPushSource' key of NuGet.Config files. --></span>
    <span class="token comment" spellcheck="true">&lt;!-- This can be used by administrators to prevent accidental publishing of packages to nuget.org. --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultPushSource<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://contoso.com/packages/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- Default Package Sources; works like the 'packageSources' section of NuGet.Config files. --></span>
    <span class="token comment" spellcheck="true">&lt;!-- This collection cannot be deleted or modified but can be disabled/enabled by users. --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packageSources</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Contoso Package Source<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://contoso.com/packages/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nuget.org<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://api.nuget.org/v3/index.json<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packageSources</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- Default Package Sources that are disabled by default. --></span>
    <span class="token comment" spellcheck="true">&lt;!-- Works like the 'disabledPackageSources' section of NuGet.Config files. --></span>
    <span class="token comment" spellcheck="true">&lt;!-- Sources cannot be modified or deleted either but can be enabled/disabled by users. --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disabledPackageSources</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nuget.org<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disabledPackageSources</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要给这些enable都勾选上</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211220833403.png"></p>
<p>然后右边的刷新按钮点一下，或者去到设置里面找到</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211220834175.png"></p>
<p>这时候代表已经添加成功。</p>
<p>回到<code>nuget</code>以后,<code>packages</code>搜索框这时候已经加载出来包了，下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211220836706.png"></p>
<p>这时候说明已经成功！！！</p>
<blockquote>
<p>本次版本是<code>.net6,rider版本是2021.3.4</code>，最新版2022版本应该也是可以这样修改，如果能直接加载出来就更好，无法加载可以尝试修改~</p>
</blockquote>
]]></content>
      <categories>
        <category>C#</category>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器（一）</title>
    <url>/%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1-服务器的概述"><a href="#1-服务器的概述" class="headerlink" title="1.服务器的概述"></a>1.服务器的概述</h3><h4 id="1-什么是服务器"><a href="#1-什么是服务器" class="headerlink" title="1.什么是服务器"></a>1.什么是服务器</h4><blockquote>
<p>服务器是计算机的一种，它比普通计算机运行更快、负载更高、价格更贵。服务器在网络中为其它客户机（如PC机、智能手机、ATM等终端甚至是火车系统等大型设备）提供计算或者应用服务。服务器具有高速的CPU运算能力、长时间的可靠运行、强大的V&#x2F;O外部数据吞吐能力以及更好的扩展性。根据服务器所提供的服务，一般来说服务器都具备承担响应服务请求、承担服务、保障服务的能力。服务器作为电子设备，其内部的结构十分的复杂，但与普通的计算机内部结构相差不大，如：cpu、硬盘、内存，系统、系统总线等。</p>
</blockquote>
<span id="more"></span>
<h3 id="2-服务器的作用"><a href="#2-服务器的作用" class="headerlink" title="2.服务器的作用"></a>2.服务器的作用</h3><blockquote>
<p>通俗的说，服务器主要是用来响应终端的服务请求：并进行处理，我们在上网的时候是不可能直接将网客接人互联网的，我们都需要通过服务器米连接网络，真有服务器响应你的联网请求，并且进行处理以后才可以联网：存储的功能，服务器的存储空间一般比较充足，可以存储非常多的信息。</p>
</blockquote>
<h3 id="3-服务器的分类"><a href="#3-服务器的分类" class="headerlink" title="3.服务器的分类"></a>3.服务器的分类</h3><h5 id="3-1-按物理形态："><a href="#3-1-按物理形态：" class="headerlink" title="3.1 按物理形态："></a>3.1 <strong>按物理形态：</strong></h5><p><strong>服务器：</strong>服务器可以理解为放在远程机房的独立计算机，和我们所用的台式机（没有显示器、键微、鼠标）除了外观和配置外，功能上没有差异，你可以通过远程控制自己安装系统及其他软件，同时可以解析和绑定城名，并通过城名或<code>IP</code>访问服务器上的网站。</p>
<p><strong>ECS服务器：</strong>云服务器<code>(Elastic Compute Service)</code>，通常用户可以根据自己的需要选定主机容量、<code>CPU</code>能力、内存大小、带宽及购买时常等，因此也称之为弹性计算服务器，<code>ECS</code>在使用上和独立的服务器没有区别，且可以让企业节省自行购买和维护服务器硬件的成本，<code>ECS</code>已被中小企业广泛使用。</p>
<p><strong>VPS服务器：</strong>虚拟专用服务器<code>(Virtual Private Server)</code>，即将一台独立服务器迎过虚拟技术分割为若干个處拟服务器，每个<code>VPS</code>可以独立安装系统，拥有独立的<code>IP</code>，实现不同<code>VPS</code>间磁盘空问、内存、<code>CPU</code>资源、进程和系统配置的隔商，为用户和应用程序模拟出“独占”使用计算资源的体验。<code>VPS</code>可以像独立服务器一样，重装操作系统，安裝程序，单独重启服务器，形式上和<code>ECS</code>没有区別，但总体性能和付费灵活性不如<code>ECS</code></p>
<p><strong>虚拟主机：</strong>即将一台己安装樣作系统和安全防范的服务器通过技术手段分制为若千个独立的空间，分配给用户独立使用，用户只需要上传网站程序，解析和绑定域名即可使用。虚拟主机不同于服务器，用户无法安装操作系统和操作软件，只能运行网站脚本语言、<code>html</code>文件、图片及其他静态文件等。虚拟主机相当于着干个用户一起租用一台服务器，价格实惠，简单易用，因此大多数企业网站选择了虚拟主机，而自助建站及云建站使用的也是虚拟主机。</p>
<h5 id="3-2-按物理位置："><a href="#3-2-按物理位置：" class="headerlink" title="3.2 按物理位置："></a>3.2 按物理位置：</h5><p><strong>国内主机</strong><br><strong>国外主机（美国、德国等地区的主机）</strong><br>1、备案方而：国内主机必须备案因外主机不需要提交备案资料的。<br>2、访问速度：国内主机国内访问快，海外主机海外访问快。<br>3、线路：国内主机有线路限制，海外主机没有，因内主机线路以联通和电信为主，相同的线路访问不存在速度限制，但相互访问就有点问题了</p>
<h3 id="4-服务器的关键参数指标"><a href="#4-服务器的关键参数指标" class="headerlink" title="4.服务器的关键参数指标"></a>4.服务器的关键参数指标</h3><h5 id="4-1-操作系统："><a href="#4-1-操作系统：" class="headerlink" title="4.1 操作系统："></a>4.1 操作系统：</h5><p><strong>Windows Server：</strong><br>重要版本<code>Windows NT Server 4.0</code>、 <code>Windows 2000 Server</code>、 <code>Windows Server 2003</code>、 <code>Windows Server 2003 R2</code>、<code>Windows Server 2008</code> 、 <code>Windows Server 2008 R2 </code>、 <code>Windows Server 2012</code>。<code> Windows</code>服务器操作系统派应用，结<br>合<code>.NET</code>开发环境，为微软企业用户提供了良好的应用框架。<br><strong>Netware：</strong><br>在一些特定行业和事业单位中，NetWare优秀的批处理功能和安全、稳定的系统性能也有很大的生存空间。NetWare常<br>用的版本有<code>Novell</code>的<code>3.11</code>、 <code>3.12</code>、 <code>4.10</code>、<code>5.0</code>等中英文版。<br><strong>Unix：</strong><br><code>Unix</code>服务器操作系统由<code>AT&amp;T</code>公司和<code>SCO</code>公司共同推出，主要支持大型的文件系统服务、数据服务等应用。市面上流传的<br>主要有<code>SCO SVR</code>、<code> BSD Unix</code>、 <code>SUN Solaris</code>、 <code>IBM-AIX</code>、 <code>HP-U</code>、 <code>FreeBSDX</code>。<br><strong>Linux：</strong><br><code>Linux</code>操作系统虽然与<code>UNIX</code>操作系统类似，但是它不是<code>UNIX</code>操作系统的变种。<code>Torvald</code>从开始编写内核代码时就仿效<code>UNIX</code>，<br>几乎所有<code>UNIX</code>的工具与外壳都可以运行在<code>LINUX</code>上。(linux系统相比windows更安全，运行效率更高）</p>
<h5 id="4-2-支持脚本："><a href="#4-2-支持脚本：" class="headerlink" title="4.2 支持脚本："></a>4.2 支持脚本：</h5><p>即是否网站程序常见的开发语言，主要有<code>asp</code>及<code>.net</code>、<code> php</code>、<code> jsp</code>, -般需要根据网站程序所使用的开发语言选择，支持的开发语言越少主机越安全和高效</p>
<h5 id="4-3-空间容量："><a href="#4-3-空间容量：" class="headerlink" title="4.3 空间容量："></a><strong>4.3 空间容量：</strong></h5><p>存放文件的空间大小，企业网站一般可以根据图片和视频文件大小来选择，以及主机使用的年限，一般1-5G就够用了</p>
<h5 id="4-4主机带宽："><a href="#4-4主机带宽：" class="headerlink" title="4.4主机带宽："></a><strong>4.4主机带宽：</strong></h5><p>主机支持的最大下行访问速度，即直接影响网站访问速度，但虚拟主机并不是带宽越大访问就会越快，还需要考虑同一台服务器上有多少个网站和其他网站是否会消耗带宽资源。</p>
<h5 id="4-5-访问流量："><a href="#4-5-访问流量：" class="headerlink" title="4.5 访问流量："></a>4.5 访问流量：</h5><p>当一台服务器分割的虚拟主机超过一定数量（如100，很多主机商一台服务器放置了数百个虚拟主机）时，为了限制因某个虚拟主机的网站大量消耗访问带宽（流量）资源，主机提供商不得不在成本和大多数用户的访问速度中找一个平衡点，所以就使用了限制访问流量这个指标。而对于用户来说，当然是不限制流量才没有后顾之忧。</p>
<h5 id="4-6-并发量："><a href="#4-6-并发量：" class="headerlink" title="4.6 并发量："></a>4.6 并发量：</h5><p>即同一时刻请求访问网站的用户数量，虚拟主机提供商为尽可能保障每个虚拟主机用户的网站稳定和公平性，不得己设置了并发量参数，从而可以在一定程度上确保一台服务器上的其他虚拟主机能稳定的访问。对于小型网站来说，同一时刻在线并动态请求的用户数量并不会太大，因此一般的用户感觉不出来自己的网站访问受限。</p>
<h5 id="4-7-CPU和内存："><a href="#4-7-CPU和内存：" class="headerlink" title="4.7 CPU和内存："></a>4.7 CPU和内存：</h5><p>和普通电脑一样，代表服务器的运行计算能力，也就是对网站程序的响应速度和效率，如果在不考虑成本的情况下，当然是CPU多核、内存越大性能越高，但企业网站的数据量是有限的，一般双核、4G就可以满足基本使用。</p>
<h5 id="4-8-服务器ip类型：独立ip和共享ip："><a href="#4-8-服务器ip类型：独立ip和共享ip：" class="headerlink" title="4.8 服务器ip类型：独立ip和共享ip："></a>4.8 服务器ip类型：独立ip和共享ip：</h5><p>首先，两者的概念不一样，独立<code>IP</code>是指一个服务器拥有自己独立的<code>IP</code>地址，共享<code>IP</code>是指多个服务器共用一个公网IP地址，<br>群英把两者的优缺点简单概述如下几点：<br>1.价格方面：共享<code>IP</code>要比独立<code>IP</code>便宜.<br>2.风险问题：共享<code>IP</code>易受到外来网络攻击，且其中一个网站出现问题就会波及其他站点，而独立<code>IP</code>就不会受到这种连带的<br>波及问题.<br>3.收永影响：独立<code>IP</code>更有利于被搜素引擎收录，权重更高.<br>4.城名绑定区别：独立<code>IP</code>可以实现泛域名绑定，而共享<code>IP</code>无法实现泛域名绑定.<br>5.能香直接使用<code>IP</code>访问：独立IP可以直接使用<code>IP</code>访问，共享<code>IP</code>不能，若访问就会收到报错的提示。</p>
<h5 id="4-9-扩展性能："><a href="#4-9-扩展性能：" class="headerlink" title="4.9 扩展性能："></a>4.9 扩展性能：</h5><p>支持语言，是否支持伪静态、字体</p>
<h3 id="5-管理服务器"><a href="#5-管理服务器" class="headerlink" title="5. 管理服务器"></a>5. 管理服务器</h3><h5 id="5-1-FTP是什么？"><a href="#5-1-FTP是什么？" class="headerlink" title="5.1 FTP是什么？"></a>5.1 <strong>FTP是什么？</strong></h5><blockquote>
<p><code>FTP</code> <code>(File Transfer Protocol</code>，文件传输协议）是 <code>TCPAP</code> 协议组中的协议之一。<code>FTP</code>协议包括两个组成部分，其一为<br><code>FTP</code>服务器，其二为<code>FTP</code>客户端。<br>作用:<br>对于客户端：是为了客户端链接主机来管理自己的主机文件<br>对于主机商：可以用<code>FTP</code>可以用来实现限制不同虚拟主机分配给用户对服务器的管理权限</p>
</blockquote>
<h5 id="5-2-FTP链接模式："><a href="#5-2-FTP链接模式：" class="headerlink" title="5.2 FTP链接模式："></a>5.2 FTP链接模式：</h5><p>主动模式（<code>port</code>模式）<br>客户端发送控制链接到服务器的<code>FTP</code>墙口，一般是默认设置为<code>21</code>，然后服务器的数据端口主动去连接用户的客户蠲<code>n+1</code>的数据端口<br>被动模式（ <code>passive</code>模式）<br>客户端发送控制链接到服务器的<code>FTP</code>端口，一般是默认设置为<code>21</code>，客服躅的数据端口<code>n+1</code>端口，主动链接的服务器的数据<code>20</code>端口</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>C# windows 环境搭建</title>
    <url>/C-windows-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>注：本次学习开发使用的软件<code>jetbrians Rider</code></p>
</blockquote>
<h3 id="C-语言，其实也叫做-net语言，所有我们准备必要的开发环境，下载链接-https-dotnet-microsoft-com-zh-cn-download"><a href="#C-语言，其实也叫做-net语言，所有我们准备必要的开发环境，下载链接-https-dotnet-microsoft-com-zh-cn-download" class="headerlink" title="C# 语言，其实也叫做.net语言，所有我们准备必要的开发环境，下载链接: https://dotnet.microsoft.com/zh-cn/download"></a>C# 语言，其实也叫做.net语言，所有我们准备必要的开发环境，下载链接: <a href="https://dotnet.microsoft.com/zh-cn/download">https://dotnet.microsoft.com/zh-cn/download</a></h3><span id="more"></span>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211120647988.png"></p>
<h3 id="上面两者软件都可以，更推荐长期版本，兼容性比较好。"><a href="#上面两者软件都可以，更推荐长期版本，兼容性比较好。" class="headerlink" title="上面两者软件都可以，更推荐长期版本，兼容性比较好。"></a>上面两者软件都可以，更推荐长期版本，兼容性比较好。</h3><h3 id="下载完成以后双击安装即可："><a href="#下载完成以后双击安装即可：" class="headerlink" title="下载完成以后双击安装即可："></a>下载完成以后双击安装即可：</h3><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211120649963.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211120648869.png"></p>
<h3 id="当进度条走完时，代表已经安装成功。"><a href="#当进度条走完时，代表已经安装成功。" class="headerlink" title="当进度条走完时，代表已经安装成功。"></a>当进度条走完时，代表已经安装成功。</h3><p>安装成功</p>
<h3 id="验证自己有没有安装成功，在cmd中，输入命令"><a href="#验证自己有没有安装成功，在cmd中，输入命令" class="headerlink" title="验证自己有没有安装成功，在cmd中，输入命令"></a>验证自己有没有安装成功，在<code>cmd</code>中，输入命令</h3><pre class="line-numbers language-shell"><code class="language-shell">dotnet --list-sdks
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211120809434.png"></p>
<h3 id="出现这个即代表安装成功，环境搭建完成。"><a href="#出现这个即代表安装成功，环境搭建完成。" class="headerlink" title="出现这个即代表安装成功，环境搭建完成。"></a>出现这个即代表安装成功，环境搭建完成。</h3><p><strong>然后安装 <code>Jerbetbrians Rider</code></strong></p>
<p><strong>官网下载：</strong><a href="https://www.jetbrains.com/rider/">https://www.jetbrains.com/rider/</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211120814198.png"></p>
<p><strong>下载以后双击：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211131101754.png"></p>
<p><strong>当出现这个界面的时候，即软件代表安装成功！</strong></p>
<p><strong>然后就是新建项目</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211131104971.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211131104951.png"></p>
<p><strong>运行：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211131106148.png"></p>
<p><strong>运行结果<code>Hello, World！</code></strong></p>
<p><strong>环境搭建结束</strong></p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/Redis/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238373.jfif"></p>
<span id="more"></span>


<p>[TOC]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-数据库压力过大"><a href="#1-1-数据库压力过大" class="headerlink" title="1.1 数据库压力过大"></a>1.1 数据库压力过大</h4><blockquote>
<p>由于用户量增大，请求数量也随之增大，数据压力过大</p>
</blockquote>
<h4 id="1-2-数据不同步"><a href="#1-2-数据不同步" class="headerlink" title="1.2 数据不同步"></a>1.2 数据不同步</h4><blockquote>
<p>多台服务器之间，数据不同步</p>
</blockquote>
<h4 id="1-3-传统锁失效"><a href="#1-3-传统锁失效" class="headerlink" title="1.3 传统锁失效"></a>1.3 传统锁失效</h4><blockquote>
<p>多台服务器之间的锁，已经不存在互斥性了。</p>
</blockquote>
<h3 id="二、Redis介绍"><a href="#二、Redis介绍" class="headerlink" title="二、Redis介绍"></a>二、Redis介绍</h3><hr>
<h4 id="2-1-关于关系型数据库和NOSQL数据库（键值对存储）"><a href="#2-1-关于关系型数据库和NOSQL数据库（键值对存储）" class="headerlink" title="2.1 关于关系型数据库和NOSQL数据库（键值对存储）"></a>2.1 关于关系型数据库和NOSQL数据库（键值对存储）</h4><blockquote>
<p>关系型数据库是基于关系表的数据库，最终会将数据持久化到磁盘上，而nosql数据库是基于特殊的结构，并将数据存储到内存的数据库。从性能上而言，nosql数据库要优于关系型数据库，从安全性上而言关系型数据库要优于nosql数据库，所以在实际开发中一个项目中nosql和关系型数据库会一起使用，达到性能和安全性的双保证。</p>
<p>NOSQL产品: redis，mongodb，memcached…</p>
</blockquote>
<blockquote>
<ul>
<li>Redis就是一款NoSQL</li>
<li>NoSQL -&gt; 非关系型数据库 -&gt; Not Only SQL。</li>
<li>Key-Value：Redis …</li>
<li>文档型：ElasticSearch，Solr，Mongodb …</li>
<li>面向列：Hbase，Cassandra …</li>
<li>图形化：Neo4j …</li>
<li>除了关系型数据库都是非关系型数据库</li>
<li>NoSQL只是一种概念，泛指非关系型数据库，和关系型数据库做一个区分</li>
</ul>
</blockquote>
<!--more-->
<h4 id="2-2-Redis介绍"><a href="#2-2-Redis介绍" class="headerlink" title="2.2 Redis介绍"></a>2.2 Redis介绍</h4><blockquote>
<ul>
<li><p>有一位意大利人，在开发一款LLOOGG的统计页面，因为MySQL的性能不好，自己研发了一款非关系型数据库，并命名为Redis。Salvatore。</p>
</li>
<li><p>Redis（Remote Dictionary Server）即远程字典服务，Redis是由C语言去编写，Redis是一款基于Key-Value的NoSQL，而且Redis是基于内存存储数据的，Redis还提供了多种持久化机制，性能可以达到110000&#x2F;s读取数据以及81000&#x2F;s写入数据，Redis还提供了主从，哨兵以及集群的搭建方式，可以更方便的横向扩展以及垂直扩展。</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Redis之父</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238413.png" alt="1586747559955"></td>
</tr>
</tbody></table>
<h3 id="三、Redis安装"><a href="#三、Redis安装" class="headerlink" title="三、Redis安装"></a>三、Redis安装</h3><hr>
<h4 id="3-1-安装Redis"><a href="#3-1-安装Redis" class="headerlink" title="3.1 安装Redis"></a>3.1 安装Redis</h4><blockquote>
<p>官网：<a href="https://redis.io/">https://redis.io</a></p>
<p>下载：<a href="http://download.redis.io/releases">http://download.redis.io/releases</a></p>
<p>中文网：<a href="https://www.redis.net.cn/">https://www.redis.net.cn/</a></p>
</blockquote>
<blockquote>
<p>官网提供安装方式如下：（安装redis编译的c环境，此步骤没有编译）</p>
<p>Installation</p>
<p>Download, extract and compile Redis with:</p>
<p>$ wget &lt;<a href="http://download.redis.io/releases/redis-5.0.5.tar.gz">http://download.redis.io/releases/redis-5.0.5.tar.gz</a> &gt;</p>
<p>$ tar xzf redis-5.0.5.tar.gz $ cd redis-5.0.5</p>
<p>$ make</p>
<p>The binaries that are now compiled are available in the src directory. Run Redis with:</p>
<p>$ src&#x2F;redis-server</p>
<p>You can interact with Redis using the built-in client:</p>
<p>$ src&#x2F;redis-cli</p>
<p>redis&gt; set foo bar</p>
<p>OK</p>
<p>redis&gt; get foo</p>
<p>“bar”</p>
</blockquote>
<h4 id="3-3-安装步骤"><a href="#3-3-安装步骤" class="headerlink" title="3.3 安装步骤"></a>3.3 安装步骤</h4><blockquote>
<p>1.把下载好的redis-6.2.6.tar.gz安装包拷贝到当前虚拟机root目录下，解压到&#x2F;usr&#x2F;local下</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# tar -zxvf redis-6.2.6.tar.gz -C /usr/local
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2.编译的c环境，注：安装时如果显示yum正在运行，需要先将yum进程kill后再执行该命令</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# yum install gcc-c++
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3.进入redis-6.2.6目录 使用make命令编译redis（若报错，先make distclean，再make）</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost redis-6.2.6]# make
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>4.使用make PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis-6.2.6 install命令安装（安装后会出现bin目录）</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost redis-6.2.6]# make PREFIX=/usr/local/redis-6.2.6 install
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>5.启动redis服务端（前台启动）</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost redis-6.2.6]# cd bin
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# ./redis-server 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238861.png"></p>
<p>启动后看到如上欢迎页面，但此窗口不能关闭，窗口关闭就认为redis也关闭了，所以我们需要在后台启动，然后再启动客户端进行连接，所以首先Ctrl+C退出。</p>
<p>解决：可以通过修改配置文件配置redis的后台启动（即服务器启动了但不会创建控制台窗口）</p>
<p>步骤如下：</p>
<p>1.切换到redis-6.2.6目录下，把当前目录下的redis.conf文件拷贝到bin目录下</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# cd ../
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost redis-6.2.6]# cp redis.conf bin/redis.conf
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2.切换到bin目录下，修改redis.conf文件</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost redis-6.2.6]# cd bin
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# vim redis.conf 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3.将redis.conf文件中的daemonize的值从no修改成yes表示后台启动</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238640.png"></p>
<p>4.启动redis服务端（后台启动）</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# ./redis-server redis.conf
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>5.查看是否启动成功</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# ps -ef | grep redis
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>6.启动客户端</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# ./redis-cli
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>7.存取数据进行测试</p>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> set name jack
OK
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> get name
"jack"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<h4 id="3-4-Redis的配置文件"><a href="#3-4-Redis的配置文件" class="headerlink" title="3.4 Redis的配置文件"></a>3.4 Redis的配置文件</h4><table>
<thead>
<tr>
<th>配置项名称</th>
<th>配置项值范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>daemonize</td>
<td>yes、no</td>
<td>yes表示启用守护进程，默认是no即不以守护进程方式运行。其中Windows系统下不支持启用守护进程方式运行</td>
</tr>
<tr>
<td>port</td>
<td></td>
<td>指定 Redis 监听端口，默认端口为 6379</td>
</tr>
<tr>
<td>bind</td>
<td></td>
<td>绑定的主机地址,如果需要设置远程访问则直接将这个属性备注下或者改为bind * 即可,这个属性和下面的protected-mode控制了是否可以远程访问 。</td>
</tr>
<tr>
<td>protected-mode</td>
<td>yes 、no</td>
<td>默认是yes，即开启。设置外部网络连接redis服务，设置方式如下：1、关闭protected-mode模式，此时外部网络可以直接访问2、开启protected-mode保护模式，需配置bind ip或者设置访问密码</td>
</tr>
<tr>
<td>timeout</td>
<td>300</td>
<td>当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能</td>
</tr>
<tr>
<td>loglevel</td>
<td>debug、verbose、notice、warning</td>
<td>日志级别，默认为 notice</td>
</tr>
<tr>
<td>databases</td>
<td>16</td>
<td>设置数据库的数量，默认的数据库是0。整个通过客户端工具可以看得到</td>
</tr>
<tr>
<td>rdbcompression</td>
<td>yes、no</td>
<td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大。</td>
</tr>
<tr>
<td>dbfilename</td>
<td>dump.rdb</td>
<td>指定本地数据库文件名，默认值为 dump.rdb</td>
</tr>
<tr>
<td>dir</td>
<td></td>
<td>指定本地数据库存放目录</td>
</tr>
<tr>
<td>requirepass</td>
<td></td>
<td>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td>
</tr>
<tr>
<td>maxclients</td>
<td>0</td>
<td>设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息。</td>
</tr>
<tr>
<td>maxmemory</td>
<td>XXX <bytes></td>
<td>指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区。配置项值范围列里XXX为数值。</td>
</tr>
</tbody></table>
<h3 id="四、redis-benchmark官方自带的性能测试工具"><a href="#四、redis-benchmark官方自带的性能测试工具" class="headerlink" title="四、redis-benchmark官方自带的性能测试工具"></a>四、redis-benchmark官方自带的性能测试工具</h3><hr>
<h4 id="4-1-在安装的redis中可以看到redis-benchmark"><a href="#4-1-在安装的redis中可以看到redis-benchmark" class="headerlink" title="4.1 在安装的redis中可以看到redis-benchmark"></a>4.1 在安装的redis中可以看到redis-benchmark</h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238733.png"></p>
<h4 id="4-2-关于redis-benchmark-的一些参数"><a href="#4-2-关于redis-benchmark-的一些参数" class="headerlink" title="4.2 关于redis-benchmark 的一些参数"></a>4.2 关于redis-benchmark 的一些参数</h4><p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238626.png"></p>
<blockquote>
<p>测试：100个并发，十万个请求，单机测试</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# ./redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238323.png"></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; SET &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;                                                     	<br>100000 requests completed in 0.94 seconds   	表示对十万个请求进行写入测试<br>100 parallel clients 		100个并发客户端<br>3 bytes payload		每次写入3个字节<br>keep alive: 1		只有一台服务器处理请求<br>host configuration “save”: 3600 1 300 100 60 10000		RDB持久化方式默认开启的规则<br>host configuration “appendonly”: no		AOF持久化方式未开启<br>multi-thread: no		多线程未开启</p>
<p>99.998% &lt;&#x3D; 12.559 milliseconds (cumulative count 99999)<br>99.999% &lt;&#x3D; 12.567 milliseconds (cumulative count 100000)<br>100.000% &lt;&#x3D; 12.567 milliseconds (cumulative count 100000)  请求在多少毫秒处理完成</p>
<p>throughput summary: 106837.61 requests per second	每秒处理请求数</p>
</blockquote>
<blockquote>
<p>另一种写法：</p>
<p>只测试 set 和 get 命令后退出</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# ./redis-benchmark -h 127.0.0.1 -p 6379 -t set,get -n 10000 -q
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="五、Redis的数据类型【重点】"><a href="#五、Redis的数据类型【重点】" class="headerlink" title="五、Redis的数据类型【重点】"></a>五、Redis的数据类型【重点】</h3><hr>
<blockquote>
<p>常用的5种数据结构：</p>
<ul>
<li>key-string：一个key对应一个值。</li>
<li>key-hash：一个key对应一个Map。</li>
<li>key-list：一个key对应一个列表。</li>
<li>key-set：一个key对应一个集合。</li>
<li>key-zset：一个key对应一个有序的集合。</li>
</ul>
<p>另外三种数据结构：</p>
<ul>
<li>HyperLogLog：计算近似值的。</li>
<li>GEO：地理位置。</li>
<li>BIT：一般存储的也是一个字符串，存储的是一个byte[]。</li>
</ul>
<p>redis是一种高级的key-value的存储系统，其中的key是字符串类型，尽可能满足如下几点：</p>
<p>1.key不要太长，最好不要操作1024个字节，这不仅会消耗内存还会降低查找效率</p>
<p>2.key不要太短，如果太短会降低key的可读性</p>
<p>3.在项目中，key最好有一个统一的命名规范（根据企业的需求）</p>
<p>value最常用的五种数据类型：</p>
<p>1.字符串(String)：最常用的，一般用于存储一个值</p>
<p>2.列表(List)：使用list结构实现栈和队列结构</p>
<p>3.集合(Set) ：交集，差集和并集的操作</p>
<p>4.有序集合(sorted set) ：排行榜，积分存储等操作</p>
<p>5.哈希(Hash)：存储一个对象数据的</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238255.png"></p>
<h4 id="5-1-字符串-String"><a href="#5-1-字符串-String" class="headerlink" title="5.1 字符串(String)"></a>5.1 字符串(String)</h4><blockquote>
<p>set key value：设定key持有指定的字符串value，如果该key存在则进行覆盖操作，总是返回”OK”</p>
<p>get key：获取key的value。如果与该key关联的value不是String类型，redis将返回错误信息，因为get命令只能用于获取String value，如果该key不存在，返回null</p>
<p>setex key seconds value：设置key以及对应的value，还可以设置过期时间</p>
<p>setnx key value：当key不存在时，设置对应的value，当key存在时，不做任何操作</p>
<p>incr key：将指定的key的value原子性的递增1.如果该key不存在，其初始值为0，在incr之后其值为1。如果value的值不能转成整型，如hello，该操作将执行失败并返回相应的错误信息。</p>
<p>decr key：将指定的key的value原子性的递减1.如果该key不存在，其初始值为0，在incr之后其值为-1。如果value的值不能转成整型，如hello，该操作将执行失败并返回相应的错误信息。</p>
<p>incrby key increment：将指定的key的value原子性增加increment，如果该key不存在，器初始值为0，在incrby之后，该值为increment。如果该值不能转成整型，如hello则失败并返回错误信息。</p>
<p>decrby key decrement：将指定的key的value原子性减少decrement，如果该key不存在，器初始值为0，在decrby之后，该值为decrement。如果该值不能转成整型，如hello则失败并返回错误信息。</p>
</blockquote>
<blockquote>
<p>使用场景如下：</p>
</blockquote>
<blockquote>
<p>1.简单的缓存存储（最常用）</p>
<p>2.消息的失效性（过期时间的设置）</p>
<p>3.分布式锁的实现（redisson）</p>
</blockquote>
<h4 id="5-2-列表-List"><a href="#5-2-列表-List" class="headerlink" title="5.2 列表(List)"></a>5.2 列表(List)</h4><blockquote>
<p>lpush key value1 value2…：在指定的key所关联的list的头部插入所有的values，如果该key不存在，该命令在插入的之前创建一个与该key关联的空链表，之后再向该链表的头部插入数据。插入成功，返回元素的个数。</p>
<p>rpush key value1 value2…：在该list的尾部添加元素。</p>
<p>lrange key start end：获取链表中从start到end的元素的值，start、end可为负数，若为-1则表示链表尾部的元素，-2则表示倒数第二个，依次类推….</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238502.png"></p>
<p>lpop key：返回并弹出指定的key关联的链表中的第一个元素，即头部元素。</p>
<p>rpop key：从尾部弹出元素。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238251.png"></p>
<p>llen key：返回指定的key关联的链表中的元素的数量。</p>
</blockquote>
<blockquote>
<p>使用场景如下：</p>
</blockquote>
<blockquote>
<p>消息流的场景：</p>
<p>1.用户的id作为key，发送的消息作为value，例如：朋友圈发布，微博发布，公众号发布…</p>
</blockquote>
<h4 id="5-3-集合-Set，不允许出现重复的元素"><a href="#5-3-集合-Set，不允许出现重复的元素" class="headerlink" title="5.3 集合(Set，不允许出现重复的元素)"></a>5.3 集合(Set，不允许出现重复的元素)</h4><blockquote>
<p>sadd key value1  value2…：向set中添加数据，如果该key的值已有则不会重复添加。</p>
<p>smembers key：获取set中所有的成员。</p>
<p>scard key：获取set中成员的数量。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239420.png"></p>
<p>sismember key member：判断参数中指定的成员是否在该set中，1表示存在，0表示不存在或者该key本身就不存在。</p>
<p>srem key member1  member2… ：删除set中指定的成员。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239230.png"></p>
<p>srandmember key：随机返回set中的一个成员。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239870.png"></p>
<p>spop key：随机返回set中的一个成员并从set中移除。</p>
<p>sdiff key1 key2：返回key1与key2中相差的成员，而且与key的顺序有关，即返回差集。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239621.png"></p>
<p>sdiffstore destination key1 key2：将key1、key2相差的成员存储在destination上。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239477.png"></p>
<p>sinter key[key1,key2…]：返回交集。</p>
<p>sinterstore destination key1 key2：将返回的交集存储在destination上。</p>
<p><img src="E:/notes/Day75-Redis/1.%E8%AF%BE%E4%BB%B6/34.redis/01.%E8%AF%BE%E4%BB%B6/Pictures/18.png"></p>
<p>sunion key1 key2：返回并集。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239623.png"></p>
<p>sunionstore destination key1 key2：将返回的并集存储在destination上</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239546.png"></p>
</blockquote>
<blockquote>
<p>使用场景如下：</p>
</blockquote>
<blockquote>
<p>公司年会，随机抽奖小程序</p>
<p>1.把所有用户统一存入set集合中</p>
<p>2.查看所有抽奖人数</p>
<p>3.随机抽取指定得奖人数并从set集合中删除</p>
<p>实现：</p>
<p>1.sadd  choujiang  userid1,userid2,userid3…</p>
<p>2.smembers  choujiang</p>
<p>3.spop  choujiang  [count]</p>
</blockquote>
<blockquote>
<p>微信点赞，微博收藏</p>
<p>1.点赞，创建集合并加入对应用户</p>
<p>2.取消点赞，从集合中删除对应用户</p>
<p>3.检查用户是否点过赞</p>
<p>4.获取点赞用户列表</p>
<p>5.获取点赞用户数量</p>
<p>实现：</p>
<p>1.sadd  dianzan userid1,userid2,userid3…</p>
<p>2.srem dianzan userid1</p>
<p>3.sismember dianzan userid1</p>
<p>4.smembers dianzan</p>
<p>5.scard dianzan</p>
</blockquote>
<blockquote>
<p>可能认识的人推荐</p>
<p>1.两个集合取交集</p>
<p>实现：</p>
<p>1.sinter user1list,user2list…</p>
<p>2.sinterstore list user1list,user2list…</p>
</blockquote>
<h4 id="5-4-有序集合-sorted-set"><a href="#5-4-有序集合-sorted-set" class="headerlink" title="5.4 有序集合(sorted set)"></a>5.4 有序集合(sorted set)</h4><blockquote>
<p>zadd key score member score2 member2 … ：将所有成员以及该成员的分数存放到sorted-set中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239166.png"></p>
<p>zcard key：获取集合中的成员数量。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239334.png"></p>
<p>zcount key min max：获取分数在[min,max]之间的成员。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239837.png"></p>
<p>zincrby key increment member：设置指定成员的增加的分数。</p>
<p>zrangebyscore key min max [withscores] [limit offset count]：返回分数在[min,max]的成员并按照分数从低到高排序。[withscores]：显示分数；[limit offset count]：offset，表明从脚标为offset的元素开始并返回count个成员。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239543.png"></p>
<p>zrevrangebyscore key min max [withscores] [limit offset count]：上面类似（score需从大到小），从高到底排序</p>
</blockquote>
<blockquote>
<p>使用场景如下：</p>
</blockquote>
<blockquote>
<p>排行榜实现</p>
<p>1.对播放的视频，分数自增1</p>
<p>2.展示排行榜前十的视频</p>
<p>实现：</p>
<p>1.zincrby  videos  1  video1id</p>
<p>2.zrevrangebyscore videos  100 0  withscores limit 0 10 （zrevrangebyscore从大到小排序）</p>
</blockquote>
<h4 id="5-5-哈希-Hash"><a href="#5-5-哈希-Hash" class="headerlink" title="5.5 哈希(Hash)"></a>5.5 哈希(Hash)</h4><blockquote>
<p>hset key field value：为指定的key设定field&#x2F;value对（键值对）。</p>
<p>hget key field：返回指定的key中的field的值。</p>
<p>hgetall key：获取key中的所有filed-vaule。</p>
<p>hlen key：获取key所包含的field的数量。</p>
<p>hincrby key field increment：设置key中filed的值增加increment</p>
<p>hdel key field [field …]：删除key中的属性</p>
</blockquote>
<blockquote>
<p>使用场景如下：</p>
</blockquote>
<blockquote>
<p>购物车场景：</p>
<p>1.用户的id作为key</p>
<p>2.商品的id作为field（属性）</p>
<p>3.商品的数量作为value（属性值）</p>
<p>购物车操作：</p>
<p>1.用户添加购物车：hset cart:1001  20001   1    （id为1001的用户添加了一个id为20001的商品，数量为1个）</p>
<p>2.增加对应商品数量：hincrby cart:1001  20001  1</p>
<p>3.查询商品总数：hlen cart:1001</p>
<p>4.删除该用户的某个商品：hdel cart:1001  20001</p>
<p>5.查询该用户购物车信息：hgetall cart:1001</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239965.png"></p>
<h4 id="5-6-通用操作"><a href="#5-6-通用操作" class="headerlink" title="5.6 通用操作"></a>5.6 通用操作</h4><blockquote>
<p>keys patten：获取所有与patten匹配的key，*表示任意字符，?表示一个字符。</p>
<p>del key1 key2….：删除指定的key。</p>
<p>exists key：判断该key是否存在，1表示存在，0表示不存在。</p>
<p>expire key second：为当前key设置过期时间（单位：秒）。</p>
<p>ttl key：查看当前key剩余过期时间。</p>
<p>flushall:   删除所有key（慎用）</p>
<p>flushdb:  删除所有key（慎用）</p>
</blockquote>
<h3 id="六、Jedis的使用【重点】"><a href="#六、Jedis的使用【重点】" class="headerlink" title="六、Jedis的使用【重点】"></a>六、Jedis的使用【重点】</h3><hr>
<blockquote>
<p>1.修改&#x2F;usr&#x2F;local&#x2F;redis-5.0.4&#x2F;bin目录下的redis.conf配置文件，然后启动redis服务端</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240709.png"></p>
<p>修改redis.conf文件中的bind为：0.0.0.0，然后把保护模式关掉</p>
</blockquote>
<blockquote>
<p>如需设置密码，可以使用以下两种方式：</p>
<p>方式一：通过修改 redis.conf 文件，设置Redis的密码校验</p>
<p>requirepass 密码</p>
<p>方式二：在不修改 redis.conf 文件的前提下，在第一次链接Redis时，输入命令：Config set requirepass 密码</p>
<p>后续连接redis客户端的时候，需要先 AUTH 做一下校验</p>
<p>127.0.0.1:6379&gt; auth 密码</p>
</blockquote>
<blockquote>
<p>2.创建Maven工程，导入依赖</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- jedis客户端 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>3.编写实体类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qf<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>4.编写测试类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qf<span class="token punctuation">.</span>jedis<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson2<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>qf<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisPool<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisPoolConfig<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取客户端对象</span>
        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.126.129"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//如果有密码，必须设置</span>
        <span class="token comment" spellcheck="true">//jedis.auth("root");</span>

        <span class="token comment" spellcheck="true">//存储String类型数据</span>
        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span><span class="token string">"java2203"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//取String值</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//存对象</span>
        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String userJson <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>userJson<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//取对象</span>
        String jsonStringUser <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonStringUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
        User db_user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonStringUser<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>db_user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//关闭</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过池拿jedis对象</span>
        <span class="token comment" spellcheck="true">//配置一些参数</span>
        JedisPoolConfig jedisPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置参数</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大连接数</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大空闲</span>
        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最小空闲</span>

        <span class="token comment" spellcheck="true">//创建JedisPool对象</span>
        JedisPool jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">,</span><span class="token string">"192.168.126.129"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取jedis对象</span>
        Jedis jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//如果有密码，必须设置</span>
        <span class="token comment" spellcheck="true">//jedis.auth("root");</span>

        <span class="token comment" spellcheck="true">//操作List集合</span>
        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"sina001"</span><span class="token punctuation">,</span><span class="token string">"今天中午吃什么？"</span><span class="token punctuation">,</span><span class="token string">"今天晚上喝什么"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"sina001"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//操作Set集合</span>
        jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"userList"</span><span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token string">"rose"</span><span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"userList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//有序Set以及Hash</span>
        <span class="token comment" spellcheck="true">//....</span>

        <span class="token comment" spellcheck="true">//关闭</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="七、Redis中的事务【了解】"><a href="#七、Redis中的事务【了解】" class="headerlink" title="七、Redis中的事务【了解】"></a>七、Redis中的事务【了解】</h3><hr>
<blockquote>
<p>Redis中的事务和MySQL中的事务有本质的区别，Redis中的事务是一个单独的隔离操作，事务中所有的命令都会序列化，按照顺序执行，事务在执行的过程中，不会被其他客户端发来的命令所打断，因为Redis服务端是个单线程的架构，不同的Client虽然看似可以同时保持连接，但发出去的命令是序列化执行的，这在通常的数据库理论下是最高级别的隔离。</p>
<p>Redis中的事务的作用就是串联多个命令，防止别的命令插队。</p>
<p>常用命令：multi、exec、discard、watch、unwatch</p>
<p>当输入multi命令时，之后输入的命令都会被放在队列中，但不会执行，直到输入exec后，Redis会将队列中的命令依次执行，discard用来撤销Exec之前被暂存的命令，并不是回滚。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240256.png"></p>
</blockquote>
<blockquote>
<p>watch&#x2F;unwatch</p>
<p>在执行multi之前，先执行watch key1 [key2…] ，watch提供的乐观锁功能（初始时一个版本号，exec之后会更新当前版本号），在你exec的那一刻，如果被watch的键发生过改动，则multi到exec之间的指令全部不执行。</p>
<p>watch表示监控，相当于加锁，但在执行完exec时就会解锁。</p>
<p>unwatch取消所有锁。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240336.png"></p>
</blockquote>
<blockquote>
<p>Redis中的事务的特性总结</p>
<p>1.单独的隔离操作</p>
<p>​	事务中的所有命令都会序列化，然后按顺序执行，在执行过程中，不会被其他客户端发送的命令打断。</p>
<p>2.没有隔离级别的概念</p>
<p>​	队列中的命令没有被提交之前都不会执行。</p>
<p>3.不能保证原子性</p>
<p>​	Redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，不会回滚</p>
</blockquote>
<h3 id="八、Redis消息订阅与发布【了解】"><a href="#八、Redis消息订阅与发布【了解】" class="headerlink" title="八、Redis消息订阅与发布【了解】"></a>八、Redis消息订阅与发布【了解】</h3><hr>
<blockquote>
<p>subscribe channel   订阅频道      例如：subscribe cctv5</p>
<p>publish channel content  在指定频道中发布内容  例如：publish cctv5 basketball</p>
<p>同时打开两个客户端，一个订阅频道，一个在频道中发布内容，订阅频道的客户端会接收到消息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240777.png"></p>
</blockquote>
<h3 id="九、Redis图形化程序界面【了解】"><a href="#九、Redis图形化程序界面【了解】" class="headerlink" title="九、Redis图形化程序界面【了解】"></a>九、Redis图形化程序界面【了解】</h3><hr>
<blockquote>
<p> Redis中默认有16个库，可以在不同的库中存储数据，默认使用0号库存储数据，使用select 0-15可以选择不同的库。</p>
<p> <img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240008.png"></p>
</blockquote>
<blockquote>
<p>安装之前，需要修改redis.conf文件中的bind为：0.0.0.0（之前已经修改过了）</p>
</blockquote>
<blockquote>
<p>下载地址：<a href="https://github.com/lework/RedisDesktopManager-Windows">https://github.com/lework/RedisDesktopManager-Windows</a></p>
</blockquote>
<blockquote>
<p>安装之后，输入IP地址登录即可看到如下界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240715.png"></p>
</blockquote>
<h3 id="十、Redis中的持久化【重点】"><a href="#十、Redis中的持久化【重点】" class="headerlink" title="十、Redis中的持久化【重点】"></a>十、Redis中的持久化【重点】</h3><hr>
<blockquote>
<p>Redis有两种持久化方式：RDB和AOF。</p>
</blockquote>
<h4 id="1-RDB（Redis-DataBase）"><a href="#1-RDB（Redis-DataBase）" class="headerlink" title="1.RDB（Redis DataBase）"></a>1.RDB（Redis DataBase）</h4><blockquote>
<p>将内存中的数据以快照的方式写入磁盘中，在redis.conf文件中，我们可以找到如下配置：</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240254.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240309.png"></p>
<p>save 900 1</p>
<p>save 300 10</p>
<p>save 60 10000</p>
<p>配置含义：</p>
<p>900秒内，如果超过1个key被修改，则发起快照保存</p>
<p>300秒内，如果超过10个key被修改，则发起快照保存</p>
<p>60秒内，如果1万个key被修改，则发起快照保存</p>
<p>RDB方式存储的数据会在</p>
<p>dump.rdb文件中（在哪个目录启动redis服务端，该文件就会在对应目录下生成），该文件不能查看，如需备份，对Redis操作完成之后，只需拷贝该文件即可（Redis服务端启动时会自动加载该文件）</p>
</blockquote>
<h4 id="2-AOF（Append-Of-File）"><a href="#2-AOF（Append-Of-File）" class="headerlink" title="2.AOF（Append Of File）"></a>2.AOF（Append Of File）</h4><blockquote>
<p>AOF默认是不开启的，需要手动开启，同样是在redis.conf文件中开启，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240657.png"></p>
<p>配置文件中的appendonly修改为yes，开启AOF持久化。开启后，启动redis服务端，发现多了一个appendonly.aof文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240766.png"></p>
<p>之后任何的操作都会保存在appendonly.aof文件中，可以进行查看，Redis启动时会将appendonly.aof文件中的内容执行一遍。</p>
<p>如果AOF和RDB同时开启，系统会默认读取AOF的数据。</p>
</blockquote>
<h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h4><blockquote>
<p><strong>RDB优点与缺点</strong></p>
<p>优点</p>
<p>如果要进行大规模数据的恢复，RDB方式要比AOF方式恢复速度要快。</p>
<p>RDB是一个非常紧凑(compact)的文件,它保存了某个时间点的数据集，非常适合用作备份，同时也非常适合用作灾难性恢复，它只有一个文件，内容紧凑，通过备份原文件到本机外的其他主机上，一旦本机发生宕机，就能将备份文件复制到redis安装目录下，通过启用服务就能完成数据的恢复。</p>
<p>缺点</p>
<p>RDB这种持久化方式不太适应对数据完整性要求严格的情况，因为，尽管我们可以用过修改快照实现持久化的频率，但是要持久化的数据是一段时间内的整个数据集的状态，如果在还没有触发快照时，本机就宕机了，那么对数据库所做的写操作就随之而消失了并没有持久化本地dump.rdb文件中。</p>
<p><strong>AOF优点与缺点</strong></p>
<p>优点</p>
<p>AOF有着多种持久化策略：</p>
<p>appendfsync always:每修改同步，每一次发生数据变更都会持久化到磁盘上，性能较差，但数据完整性较好。</p>
<p>appendfsync everysec: 每秒同步，每秒内记录操作，异步操作，如果一秒内宕机，有数据丢失。</p>
<p>appendfsync no:不同步。</p>
<p>AOF文件是一个只进行追加操作的日志文件，对文件写入不需要进行seek，即使在追加的过程中，写入了不完整的命令（例如：磁盘已满），可以使用redis-check-aof工具可以修复这种问题</p>
<p>Redis可以在AOF文件变得过大时，会自动地在后台对AOF进行重写：重写后的新的AOF文件包含了恢复当前数据集所需的最小命令集合。整个重写操作是绝对安全的，因为Redis在创建AOF文件的过程中，会继续将命令追加到现有的AOF文件中，即使在重写的过程中发生宕机，现有的AOF文件也不会丢失。一旦新AOF文件创建完毕，Redis就会从旧的AOF文件切换到新的AOF文件，并对新的AOF文件进行追加操作。</p>
<p>缺点</p>
<p>对于相同的数据集来说，AOF文件要比RDB文件大。</p>
<p>根据所使用的持久化策略来说，AOF的速度要慢于RDB。一般情况下，每秒同步策略效果较好。不使用同步策略的情况下，AOF与RDB速度一样快。</p>
</blockquote>
<h3 id="十一、Redis的主从复制-【重点】"><a href="#十一、Redis的主从复制-【重点】" class="headerlink" title="十一、Redis的主从复制 【重点】"></a>十一、Redis的主从复制 【重点】</h3><hr>
<blockquote>
<p>主从复制是指将一台Redis服务器的数据，复制到其它的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。</p>
<p>默认情况下，每台Redis服务器都是主节点，且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240740.png"></p>
<blockquote>
<p>主从复制的作用：</p>
<p>1.数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p>
<p>2.故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，但实际上是一种服务的冗余.</p>
<p>3.负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p>
<p>4.高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础.</p>
</blockquote>
<blockquote>
<p><strong>配置步骤：</strong></p>
<p>1.查看当前库的信息：</p>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> info replication
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241232.png"></p>
<p>2.关闭当前运行的redis，打开四个链接，进行测试，拷贝三个redis.conf文件（改成6379，6380，6381）</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241363.png"></p>
<p>3.分别修改这三个文件信息，需要修改：端口，pid名字，log文件名字，dump.rdb名字</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241463.png"></p>
<p>port 6379</p>
<p>pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid</p>
<p>logfile “6379.log”</p>
<p>dbfilename dump6379.rdb</p>
<p>port 6380</p>
<p>pidfile &#x2F;var&#x2F;run&#x2F;redis_63780pid</p>
<p>logfile “6380.log”</p>
<p>dbfilename dump6380.rdb</p>
<p>port 6381</p>
<p>pidfile &#x2F;var&#x2F;run&#x2F;redis_6381.pid</p>
<p>logfile “6381.log”</p>
<p>dbfilename dump6381.rdb</p>
<p>4.分别在三个链接中启动6379，6380，6381三台redis-server，在第四个链接中查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241739.png"></p>
<p>查看状态</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241022.png"></p>
<p>5.配置一主二从</p>
<p>默认情况下，每台Redis都是主节点，我们只需要配置从机即可，我们这里使用6379为主机，6380和6381为从机.</p>
<p>在对应6380的链接中进行配置：</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# ./redis-cli -p 6380

127.0.0.1:6380> slaveof 127.0.0.1 6379
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241702.png"></p>
<p>6380从机配置成功之后，可以去主机中查看对应信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241494.png"></p>
<p>6381从机配置方式和6380一样，配置成功之后可以再去看一下主机</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241741.png"></p>
<p>6.由于这里使用的是命令进行配置，所以是暂时的，一般公司配置会在配置文件中进行配置，属于永久性配置，相当于一打开当前服务器，该服务器就是从机，一般主机可以写，从机不能写只能读，主机中的所有信息和数据都会被从机保存！</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241875.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241162.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241729.png"></p>
<p>即使主机断开链接（127.0.0.1:6379&gt;shutdown），从机仍然可以连接到主机，如果使用的是命令行配置的从机，从机一旦断开链接后，就会变回主机了，如果再次变回从机，仍旧可以获取主机中的值.</p>
<p>如果主机断开链接，从机可以使用命令：127.0.0.1:6380&gt;slaveof no one 使自己成为主机</p>
<p>7.主从复制原理</p>
<p>Slave启动成功连接到master后会发送一个sync同步命令，Master接到命令后，会启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕后，master将传送整个数据文件到salve，并完成一次完整的同步.</p>
<p>全量复制：salve服务在接收到数据库文件数据后，将其存盘并加载到内存中.</p>
<p>增量复制：master继续将新的所有收集到的修改命令依次传递给salve，完成同步.</p>
</blockquote>
<blockquote>
<p>如果是配置文件配置，可直接在对应的redis.conf文件中添加： slaveof 127.0.0.1 6379 （和命令一样）</p>
</blockquote>
<h3 id="十二、Redis的哨兵模式【重点】"><a href="#十二、Redis的哨兵模式【重点】" class="headerlink" title="十二、Redis的哨兵模式【重点】"></a>十二、Redis的哨兵模式【重点】</h3><hr>
<blockquote>
<p>当主服务器宕机后，并且我们并没有及时发现，这时候就可能会出现数据丢失或程序无法运行。此时，redis的哨兵模式就派上用场了，可以用它来做redis的高可用.</p>
<p>每个哨兵都是监控主节点，主节点宕机，哨兵不会宕机！</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241034.png"></p>
<blockquote>
<p>功能作用：</p>
<p>1.监控(monitoring)：Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。</p>
<p>2.提醒(Notifation)：当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</p>
<p>3.自动故障转移(Automatic failover)：当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址， 使得集群可以使用新主服务器代替失效服务器。</p>
</blockquote>
<blockquote>
<p><strong>配置步骤：</strong></p>
<p>1.创建哨兵配置文件</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# vim sentinel.conf
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>sentinel.conf文件内容如下：（格式：sentinel monitor 被监控名称 host port 1）</p>
<p>sentinel monitor myredis 127.0.0.1 6379 1</p>
<p>注意：需要修改redis.conf文件中的bind为：0.0.0.0（之前已经修改过了），如果是三台阿里云服务器，每个服务器都要设置sentinel.conf文件并启动哨兵，127.0.0.1改成主机的IP地址，（从机也是监控主机IP，相当于三台服务器的sentinel.conf的内容都是一样的：sentinel monitor myredis 主机IP地址 6379 1），后面的数字1表示有1个sentinel认为一个master失效时，master就算真正失效，slave会以投票的方式选举成为主机，一般设置的值为从机数量一半以上，比如说：三个从机就设置为：2</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241771.png"></p>
<p>2.启动哨兵</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost bin]# ./redis-sentinel sentinel.conf
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/Pictures%5C59.png"></p>
<p>3.如果Master节点断开了（主机宕机了），过一会，会发送哨兵日志，并自动通过算法在其他两个从机中选择一个成为主机.</p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241535.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242550.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242883.png"></p>
<p>如果之前的主机6379又重新启动了，过一会，哨兵检测到了之后，会把6379设置为从机！</p>
<p>哨兵模式的优缺点</p>
<p>优点</p>
<p>1.哨兵集群模式是基于主从模式的，所有主从的优点，哨兵模式同样具有。</p>
<p>2.主从可以切换，故障可以转移，系统可用性更好。</p>
<p>3.哨兵模式是主从模式的升级，系统更健壮，可用性更高。</p>
<p>缺点</p>
<p>1.Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</p>
<p>2.实现哨兵模式的配置也不简单，甚至可以说有些繁琐</p>
</blockquote>
<h3 id="十三、Redis缓存穿透，击穿，雪崩，倾斜"><a href="#十三、Redis缓存穿透，击穿，雪崩，倾斜" class="headerlink" title="十三、Redis缓存穿透，击穿，雪崩，倾斜"></a>十三、Redis缓存穿透，击穿，雪崩，倾斜</h3><hr>
<h4 id="1-1-缓存穿透（查不到）"><a href="#1-1-缓存穿透（查不到）" class="headerlink" title="1.1 缓存穿透（查不到）"></a>1.1 缓存穿透（查不到）</h4><blockquote>
<p>概念：当用户去查询数据的时候，发现redis内存数据库中没有，于是向持久层数据库查询，发现也没有，于是查询失败，当用户过多时，缓存都没有查到，于是都去查持久层数据库，这会给持久层数据库造成很大的压力，此时相当于出现了缓存穿透。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242308.png"></p>
<blockquote>
<p> 解决方案：</p>
<p> 1.布隆过滤器：是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的压力，但是，布隆过滤器有误差，说myql 有该id ，不一定有，说myql 没有该id，一定没有 ！</p>
<p> <img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242234.png"></p>
<p> 2.缓存空对象：当存储层查不到时，即使返回的空对象也将其缓存起来，同时设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护后端数据.</p>
<p> <img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242723.png"></p>
<p> 但会有两个问题：</p>
<p> 1.如果空值被缓存起来，就意味着需要更多的空间存储更多的键，会有很多空值的键.</p>
<p> 2.即使对空值设置了过期时间，还是会存在 缓存层和存储层会有一段时间窗口不一致，这对于需要保持一致性的业务会有影响.</p>
</blockquote>
<h4 id="1-2-缓存击穿（访问量大，缓存过期）"><a href="#1-2-缓存击穿（访问量大，缓存过期）" class="headerlink" title="1.2 缓存击穿（访问量大，缓存过期）"></a>1.2 缓存击穿（访问量大，缓存过期）</h4><blockquote>
<p>指对某一个key的频繁访问，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就会直接请求数据库，就像在一个屏障上凿开了一个洞，例如微博由于某个热搜导致宕机.</p>
<p>​</p>
<p>其实就是：当某个key在过期的瞬间，有大量的请求并发访问，这类数据一段是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并回写缓存，导致数据库瞬间压力过大。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242941.png"></p>
<blockquote>
<p>解决方案：</p>
<p>1.设置热点数据永不过期：从缓存层面上来说，不设置过期时间，就不会出现热点key过期后产生的问题.</p>
<p>2.添加互斥锁：使用分布式锁，保证对每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可，这种方式将高并发的压力转移到了分布式锁上，对分布式锁也是一种极大的考验.</p>
</blockquote>
<h4 id="1-3-缓存雪崩"><a href="#1-3-缓存雪崩" class="headerlink" title="1.3 缓存雪崩"></a>1.3 缓存雪崩</h4><blockquote>
<p>指在某一个时间段，缓存集中过期失效或Redis宕机导致的，例如双十一抢购热门商品，这些商品都会放在缓存中，假设缓存时间为一个小时，一个小时之后，这些商品的缓存都过期了，访问压力瞬间都来到了数据库上，此时数据库会产生周期性的压力波峰，所有的请求都会到达存储层，存储层的调用量暴增，造成存储层挂掉的情况.</p>
</blockquote>
<p><img src="/Pictures%5C67.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242355.png"></p>
<blockquote>
<p>其实比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网，因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，此时的数据库还是可以顶住压力的，而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，有可能瞬间就把服务器压垮.</p>
<p>解决方案：</p>
<p>1.配置Redis的高可用：其实就是搭建集群环境，有更多的备用机.</p>
<p>2.限流降级：在缓存失效后，通过加锁或者队列来控制读服务器以及写缓存的线程数量，比如对某个key只允许一个线程查询数据和写缓存，其他线程等待.</p>
<p>3.数据预热：在项目正式部署之前，把可能用的数据预先访问一边，这样可以把一些数据加载到缓存中，在即将发生大并发访问之前手动触发加载缓存中不同的key，设置不同的过期时间，让缓存失效的时间尽量均衡.</p>
</blockquote>
<h4 id="1-4-缓存倾斜"><a href="#1-4-缓存倾斜" class="headerlink" title="1.4 缓存倾斜"></a>1.4 缓存倾斜</h4><blockquote>
<p>指某一台redis服务器压力过大而导致该服务器宕机.</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242384.png"></p>
<h3 id="十四、Redis集群搭建"><a href="#十四、Redis集群搭建" class="headerlink" title="十四、Redis集群搭建"></a>十四、Redis集群搭建</h3><hr>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242006.png"></p>
<h3 id="十五、Redis其他常见问题"><a href="#十五、Redis其他常见问题" class="headerlink" title="十五、Redis其他常见问题"></a>十五、Redis其他常见问题</h3><hr>
<h4 id="1-key的生存时间到了，Redis会立即删除吗？"><a href="#1-key的生存时间到了，Redis会立即删除吗？" class="headerlink" title="1.key的生存时间到了，Redis会立即删除吗？"></a>1.key的生存时间到了，Redis会立即删除吗？</h4><blockquote>
<p><strong>不会立即删除</strong></p>
<p>1.1定期删除：Redis每隔一段时间就去会去查看Redis设置了过期时间的key，会再100ms的间隔中默认查看3个key。</p>
<p>1.2惰性删除：如果当你去查询一个已经过了生存时间的key时，Redis会先查看当前key的生存时间，是否已经到了，直接删除当前key，并且给用户返回一个空值。</p>
</blockquote>
<h4 id="2-Redis的淘汰机制"><a href="#2-Redis的淘汰机制" class="headerlink" title="2.Redis的淘汰机制"></a>2.Redis的淘汰机制</h4><blockquote>
<p>在Redis内存已经满的时候，添加了一个新的数据，执行淘汰机制。(redis.conf中配置)</p>
<p>2.1  volatile-lru：在内存不足时，Redis会在设置过了生存时间的key中干掉一个最近最少使用的key。</p>
<p>2.2  allkeys-lru：在内存不足时，Redis会在全部的key中干掉一个最近最少使用的key。</p>
<p>2.3  volatile-lfu：在内存不足时，Redis会在设置过了生存时间的key中干掉一个最近最少频次使用的key。</p>
<p>2.4  allkeys-lfu：在内存不足时，Redis会在全部的key中干掉一个最近最少频次使用的key。</p>
<p>2.5  volatile-random：在内存不足时，Redis会在设置过了生存时间的key中随机干掉一个。</p>
<p>2.6  allkeys-random：在内存不足时，Redis会在全部的key中随机干掉一个。</p>
<p>2.7  volatile-ttl：在内存不足时，Redis会在设置过了生存时间的key中干掉一个剩余生存时间最少的key。</p>
<p>2.8  noeviction：（默认）在内存不足时，直接报错。</p>
<p>方案：指定淘汰机制的方式：maxmemory-policy具体策略，设置Redis的最大内存：maxmemory 字节大小</p>
</blockquote>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/RabbitMQ/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><blockquote>
<p>模块之间的耦合度过高，一旦一个模块宕机后，全部功能都不能用了，并且同步通讯的成本过高，用户体验差。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">RabbitMQ引言</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071256754.png"></td>
</tr>
</tbody></table>
<span id="more"></span>
<h3 id="二、RabbitMQ介绍"><a href="#二、RabbitMQ介绍" class="headerlink" title="二、RabbitMQ介绍"></a>二、RabbitMQ介绍</h3><hr>
<blockquote>
<p>市面上比较火爆的几款MQ：</p>
<p>ActiveMQ，RocketMQ，Kafka，RabbitMQ。</p>
<ul>
<li><p>语言的支持：ActiveMQ，RocketMQ只支持Java语言，Kafka可以支持多门语言，RabbitMQ支持多种语言。</p>
</li>
<li><p>效率方面：ActiveMQ，RocketMQ，Kafka效率都是毫秒级别，RabbitMQ是微秒级别的。</p>
</li>
<li><p>消息丢失，消息重复问题： RabbitMQ针对消息的持久化，和重复问题都有比较成熟的解决方案。</p>
</li>
<li><p>学习成本：RabbitMQ非常简单。</p>
</li>
</ul>
<p>RabbitMQ是由Rabbit公司去研发和维护的，最终是在Pivotal，由Erlang语言开发（并发的编程语言）</p>
<p>RabbitMQ严格的遵循AMQP协议，高级消息队列协议，帮助我们在进程之间传递异步消息。</p>
</blockquote>
<blockquote>
<p>​	RabbitMQ是用Erlang实现的一个高并发高可靠AMQP消息队列服务器。支持消息的持久化、事务、拥塞控制、负载均衡等特性，使得RabbitMQ拥有更加广泛的应用场景。RabbitMQ跟Erlang和AMQP有关。下面简单介绍一下Erlang和AMQP。</p>
<p>​	 Erlang是一门动态类型的函数式编程语言，它也是一门解释型语言，由Erlang虚拟机解释执行。从语言模型上说，Erlang是基于Actor模型的实现。在Actor模型里面，万物皆Actor，每个Actor都封装着内部状态，Actor相互之间只能通过消息传递这一种方式来进行通信。对应到Erlang里，每个Actor对应着一个Erlang进程，进程之间通过消息传递进行通信。相比共享内存，进程间通过消息传递来通信带来的直接好处就是消除了直接的锁开销(不考虑Erlang虚拟机底层实现中的锁应用)。</p>
<p>​	AMQP(Advanced Message Queue Protocol)定义了一种消息系统规范。这个规范描述了在一个分布式的系统中各个子系统如何通过消息交互。而RabbitMQ则是AMQP的一种基于erlang的实现。AMQP将分布式系统中各个子系统隔离开来，子系统之间不再有依赖。子系统仅依赖于消息。子系统不关心消息的发送者，也不关心消息的接受者。</p>
</blockquote>
<blockquote>
<p>优点</p>
<p>1、解耦：降低系统模块的耦合度</p>
<p>2、提高系统响应时间</p>
<p>3、异步消息</p>
<p>4、过载保护，流量削峰</p>
</blockquote>
<blockquote>
<p>1.应用解耦</p>
<p>场景：双11购物，用户下单后，订单系统需要通知库存系统，传统的做法就是订单系统调用库存系统的接口.</p>
<p>这种做法有一个缺点:</p>
<ul>
<li>当库存系统出现故障时，订单就会失败.</li>
<li>订单系统和库存系统高耦合.</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071256494.png" alt="1617864607294"></p>
<blockquote>
<p>引入消息队列</p>
<ul>
<li><p>订单系统: 用户下单后，订单系统完成持久化处理，将消息写入消息队列,返回用户订单下单成功。</p>
</li>
<li><p>库存系统: 订阅下单的消息,获取下单消息，进行库操作。 就算库存系统出现故障，消息队列也能保证消息的可靠投递，不会导致消息丢失</p>
</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071256472.png" alt="1617864757691"></p>
<blockquote>
<p>2.异步处理<br>场景说明：用户注册后，需要发注册邮件和注册短信，传统的做法有两种  1. 串行的方式   2. 并行的方式</p>
<p>串行方式: 将注册信息写入数据库后,发送注册邮件，再发送注册短信，以上三个任务全部完成后才返回给客户端。 这有一个问题是，邮件，短信并不是必须的，它只是一个通知,而这种做法让客户端等待没有必要等待的东西.</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071256803.png" alt="1617865002916"></p>
<blockquote>
<p>并行方式:将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257793.png" alt="1617865040355"></p>
<blockquote>
<p>假设三个业务节点分别使用50ms，串行方式使用时间150ms,并行使用时间100ms。虽然并性已经提高的处理时间，但是，前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,英爱是写入数据库后就返回.</p>
</blockquote>
<blockquote>
<p>消息队列</p>
<p>引入消息队列后，把发送邮件，短信不是必须的业务逻辑异步处理，引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计)，引入消息队列后处理后，响应时间是串行的3倍，是并行的2倍</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257549.png" alt="1617865161427"></p>
<blockquote>
<p>3.流量削峰</p>
<p>流量削峰一般在秒杀活动中应用广泛</p>
<p>场景:秒杀活动，一般会因为流量过大，导致应用挂掉，为了解决这个问题，一般在应用前端加入消息队列。</p>
<p>作用:<br>1.可以控制活动人数，超过此一定阀值的订单直接丢弃</p>
<p>2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单)</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257803.png" alt="1617865250142"></p>
<blockquote>
<p>这样我们就可以采用队列的机制来处理，如同我们在超市结算一样，并不会一窝蜂一样涌入收银台，而是排队结算，一个接着一个的处理，不能插队，因为同时结算就只能达到这么多。</p>
</blockquote>
<h3 id="三、RabbitMQ安装"><a href="#三、RabbitMQ安装" class="headerlink" title="三、RabbitMQ安装"></a>三、RabbitMQ安装</h3><hr>
<pre class="line-numbers language-yml"><code class="language-yml">version: "3.1"
services:
  rabbitmq:
    image: daocloud.io/library/rabbitmq:management
    restart: always
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./data:/var/lib/rabbitmq
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sh"><code class="language-sh">[root@192 ~]# cd /opt
[root@192 opt]# mkdir docker_rabbitmq
[root@192 opt]# cd docker_rabbitmq/
[root@192 docker_rabbitmq]# vim docker-compose.yml
[root@192 docker_rabbitmq]# docker-compose up -d
Creating network "docker_rabbitmq_default" with the default driver
Pulling rabbitmq (daocloud.io/library/rabbitmq:management)...
management: Pulling from library/rabbitmq
01bf7da0a88c: Pull complete
f3b4a5f15c7a: Pull complete
57ffbe87baa1: Pull complete
5ef3ef76b1b5: Pull complete
82a3ce07c0eb: Pull complete
1da219d9bd70: Pull complete
446554ac749d: Pull complete
8e4c09e200e7: Pull complete
7a8620611ebf: Pull complete
c70a2924b273: Pull complete
3b0b9e36b4e9: Pull complete
7619a9a42512: Pull complete
965a8e1f1b1c: Pull complete
Digest: sha256:4cc2267788b21e0f34523b4f2d9b32ee1c2867bf2de75d572158d6115349658c
Status: Downloaded newer image for daocloud.io/library/rabbitmq:management
Creating rabbitmq ... done
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>浏览器访问：<a href="http://ip:15672/">http://ip:15672</a>  （注：ip指当前云服务器的地址，云服务器记得开放 15672 和 5672 端口）</p>
<p>用户名和密码默认都是：guest</p>
</blockquote>
<h3 id="四、RabbitMQ架构【重点】"><a href="#四、RabbitMQ架构【重点】" class="headerlink" title="四、RabbitMQ架构【重点】"></a>四、RabbitMQ架构【<code>重点</code>】</h3><hr>
<h4 id="4-1-官方的简单架构图"><a href="#4-1-官方的简单架构图" class="headerlink" title="4.1 官方的简单架构图"></a>4.1 官方的简单架构图</h4><blockquote>
<ul>
<li><p>Publisher - 生产者：发布消息到RabbitMQ中的Exchange</p>
</li>
<li><p>Consumer - 消费者：监听RabbitMQ中的Queue中的消息</p>
</li>
<li><p>Exchange - 交换机：和生产者建立连接并接收生产者的消息</p>
</li>
<li><p>Queue - 队列：Exchange会将消息分发到指定的Queue，Queue和消费者进行交互</p>
</li>
<li><p>Routes - 路由：交换机以什么样的策略将消息发布到Queue</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">简单架构图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257617.png" alt="1587703812776"></td>
</tr>
</tbody></table>
<h4 id="4-2-RabbitMQ的完整架构图"><a href="#4-2-RabbitMQ的完整架构图" class="headerlink" title="4.2 RabbitMQ的完整架构图"></a>4.2 RabbitMQ的完整架构图</h4><blockquote>
<p>完整架构图</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">完整架构图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257828.png" alt="1587705504342"></td>
</tr>
</tbody></table>
<h4 id="4-3-RabbitMQ-通讯方式"><a href="#4-3-RabbitMQ-通讯方式" class="headerlink" title="4.3 RabbitMQ 通讯方式"></a>4.3 RabbitMQ 通讯方式</h4><blockquote>
<p><a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p>
</blockquote>
<h4 id="4-4-Hello-World案例演示"><a href="#4-4-Hello-World案例演示" class="headerlink" title="4.4 Hello-World案例演示"></a>4.4 Hello-World案例演示</h4><blockquote>
<ol>
<li>导入依赖</li>
</ol>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.15.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ol start="2">
<li>创建生产者 Publisher</li>
</ol>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//生产者</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Publisher..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置连接参数</span>
        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.25.132"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取连接</span>
        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取Channel</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置队列参数</span>
        <span class="token comment" spellcheck="true">//参数1：queue - 指定队列的名称</span>
        <span class="token comment" spellcheck="true">//参数2：durable - 当前队列是否需要持久化,值为true时表示持久化，rabbitmq宕机或重启后，队列依然在</span>
        <span class="token comment" spellcheck="true">//参数3：exclusive - 当前队列是否为排他队列，值为true时表示与当前连接（connection）绑定，连接关闭，队列消失</span>
        <span class="token comment" spellcheck="true">//参数4：autoDelete - 当前队列是否自动删除，值为true时表示队列中的消息一旦被消费，该队列会消失</span>
        <span class="token comment" spellcheck="true">//参数5：arguments - 指定当前队列的相关参数</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"helloworldQueue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//发布消息到exchange，同时指定路由的规则</span>
        <span class="token comment" spellcheck="true">// 参数1：指定exchange，目前测试没有创建交换机，使用""</span>
        <span class="token comment" spellcheck="true">// 参数2：指定路由的规则，或者使用具体的队列名称</span>
        <span class="token comment" spellcheck="true">// 参数3：指定传递的消息所携带的properties，目前测试不需要，使用null</span>
        <span class="token comment" spellcheck="true">// 参数4：指定发布的具体消息，byte[]类型，目前测试需要，传递数据进行类型转换</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"helloworldQueue"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"helloworld"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//关闭资源</span>
        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ol start="3">
<li>创建消费者 Consumer</li>
</ol>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//消费者</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置连接参数</span>
        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.25.132"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取连接</span>
        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取Channel</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//监听队列</span>
        DefaultConsumer defaultConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"来自生产者的消息："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//消费消息</span>
        <span class="token comment" spellcheck="true">//参数1：queue - 指定消费哪个队列</span>
        <span class="token comment" spellcheck="true">//参数2：autoAck - 指定是否自动ACK （true表示接收到消息后，会立即告知RabbitMQ，false表示不告知）</span>
        <span class="token comment" spellcheck="true">//参数3：consumer - 指定消费回调</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"helloworldQueue"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>defaultConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//关闭资源</span>
        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>分别启动生产者和消费者进行测试（生产一次才能消费一次）</p>
</blockquote>
<h4 id="4-5-基本原理"><a href="#4-5-基本原理" class="headerlink" title="4.5 基本原理"></a>4.5 基本原理</h4><blockquote>
<p>RabbitMQ是消息队列的一种实现，那么一个消息队列到底需要什么？答案是队列，即Queue，那么接下来所有名词都是围绕这个<strong>Queue</strong>来拓展的。</p>
<p>​	就RabbimtMQ而言，Queue是其中的一个逻辑上的实现，我们需要连接到RabbitMQ来操作队列进而实现业务功能，所以就会有<strong>Connection</strong>，我们发一条消息连接一次，这样很显然是浪费资源的，建立连接的过程也很耗时，所以我们就会做一个东西让他来管理连接，当我用的时候，直接从里边拿出来已经建立好的连接发信息，那么<strong>ConnectionFactory</strong>应运而生。</p>
<p>​	接下来，当程序开发时，可能不止用到一个队列，可能有订单的队列、消息的队列、任务的队列等等，那么就需要给不同的queue发信息，那么和每一个队列连接的这个概念，就叫<strong>Channel</strong>。</p>
<p>​	再往下来，当我们开发的时候还有时候会用到这样一种功能，就是当我发送一条消息，需要让几个queue都收到，那么怎么解决这个问题呢，难道我要给每一个queue发送一次消息？那岂不是浪费带宽又浪费资源，我们能想到什么办法呢，当然是我们发送给RabbitMQ服务器一次，然后让RabbitMQ服务器自己解析需要给哪个Queue发，那么<strong>Exchange</strong>就是干这件事的<br>但是我们给Exchange发消息，他怎么知道给哪个Queue发呢？这里就用到了<strong>RoutingKey和BindingKey</strong><br>BindingKey是Exchange和Queue绑定的规则描述，这个描述用来解析当Exchange接收到消息时，Exchange接收到的消息会带有RoutingKey这个字段，Exchange就是根据这个RoutingKey和当前Exchange所有绑定的BindingKey做匹配，如果满足要求，就往BindingKey所绑定的Queue发送消息，这样我们就解决了我们向RabbitMQ发送一次消息，可以分发到不同的Queue的过程</p>
<p>至此，我们就把所有的名词贯通咯，接下来做个概要描述：</p>
<ul>
<li>Broker:提供一种传输服务,它的角色就是维护一条从生产者到消费者的路线，保证数据能按照指定的方式进行传输</li>
<li>ConnectionFactory：与RabbitMQ服务器连接的管理器</li>
<li>Connection：与RabbitMQ服务器的TCP连接</li>
<li>Channel：与Exchange的连接，一个Connection可以包含多个Channel。之所以需要Channel，是因为TCP连接的建立和释放都是十分昂贵的，为了多路复用。RabbitMQ建议客户端线程之间不要共用Channel，但是建议尽量共用Connection。</li>
<li>Queue:消息的载体,每个消息都会被投到一个或多个队列。</li>
<li>Exchange：接受消息生产者的消息，并根据消息的RoutingKey和 Exchange绑定的BindingKey，以及Binding规则将消息路由给服务器中的队列。ExchangeType决定了Exchange路由消息的行为，例如，在RabbitMQ中，ExchangeType有direct、Fanout和Topic三种，不同类型的Exchange路由的行为是不一样的。</li>
<li>Message Queue：消息队列，用于存储还未被消费者消费的消息。</li>
<li>Message: 由Header和Body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、由哪个Message Queue接受、优先级是多少等。而Body是真正需要传输的APP数据。</li>
<li>RoutingKey：由Producer发送Message时指定，指定当前消息被谁接受</li>
<li>BindingKey：由Consumer在Binding Exchange与Message Queue时指定，指定当前Exchange下，什么样的RoutingKey会被下派到当前绑定的Queue中</li>
<li>Binding:联系了Exchange与Message Queue。Exchange在与多个Message Queue发生Binding后会生成一张路由表，路由表中存储着Message Queue所需消息的限制条件即Binding Key。当Exchange收到Message时会解析其Header得到Routing Key，Exchange根据Routing Key与<strong>Exchange Type</strong>将Message路由到Message Queue。Binding Key由Consumer在Binding Exchange与Message Queue时指定，而Routing Key由Producer发送Message时指定，两者的匹配方式由Exchange Type决定。</li>
<li>Server: 接受客户端连接，实现AMQP消息队列和路由功能的进程。</li>
<li>Virtual Host:其实是一个虚拟概念，类似于权限控制组，可以通过命令分配给用户Virtual Host的权限，默认的guest用户是管理员权限，初始空间有&#x2F;，一个Virtual Host里面可以有若干个Exchange和Queue，但是权限控制的最小粒度是Virtual Host</li>
</ul>
</blockquote>
<h3 id="五、SpringBoot整合RabbitMQ的使用【重点】"><a href="#五、SpringBoot整合RabbitMQ的使用【重点】" class="headerlink" title="五、SpringBoot整合RabbitMQ的使用【重点】"></a>五、SpringBoot整合RabbitMQ的使用【<code>重点</code>】</h3><hr>
<h4 id="5-1-导入依赖"><a href="#5-1-导入依赖" class="headerlink" title="5.1 导入依赖"></a>5.1 导入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-2-在application-properties中增加配置"><a href="#5-2-在application-properties中增加配置" class="headerlink" title="5.2 在application.properties中增加配置"></a>5.2 在application.properties中增加配置</h4><pre class="line-numbers language-sh"><code class="language-sh">#对于rabbitMQ的支持
spring.rabbitmq.host=192.168.153.136
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-3-Hello-World-简单队列"><a href="#5-3-Hello-World-简单队列" class="headerlink" title="5.3 Hello-World 简单队列"></a>5.3 Hello-World 简单队列</h4><blockquote>
<p>一个生产者，一个默认的交换机，一个队列，一个消费者</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">结构图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257229.png" alt="1587715551088"></td>
</tr>
</tbody></table>
<blockquote>
<p>1）创建配置类，用于创建队列对象</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleQueueConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"simpleQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>2）创建生产者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleQueueProducer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SimpleQueueProducer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//发送消息，第一个参数为队列名称，第二参数为消息内容</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"simpleQueue"</span><span class="token punctuation">,</span><span class="token string">"简单模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>3）创建消费者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleQueueCustomer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues<span class="token operator">=</span><span class="token string">"simpleQueue"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//监听指定的消息队列</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SimpleQueueCustomer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"来SimpleQueueProducer的信息："</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>4）在src\test\java\com\qf\Rabbitmq01ApplicationTests.java进行测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>SimpleQueueProducer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">Rabbitmq01ApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> SimpleQueueProducer simpleQueueProducer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSimpleQueueProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        simpleQueueProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>如果传递的是 JavaBean 对象，该实体类需要实现序列化接口，具体流程如下：</p>
</blockquote>
<blockquote>
<ol>
<li>导入lombok依赖，创建User类</li>
</ol>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ol start="2">
<li>修改生产者中的代码</li>
</ol>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//生产者</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimplePublisher</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SimplePublisher..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//rabbitTemplate.convertAndSend("","simpleQueue","简单模式");</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"simpleQueue"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ol start="3">
<li>修改消费者中的代码</li>
</ol>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//消费者</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleConsumer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//    @RabbitListener(queues = "simpleQueue")</span>
<span class="token comment" spellcheck="true">//    public void receive(String content)&amp;#123;</span>
<span class="token comment" spellcheck="true">//        System.out.println("SimpleConsumer...");</span>
<span class="token comment" spellcheck="true">//        System.out.println("来自SimplePublisher的消息："+content);</span>
<span class="token comment" spellcheck="true">//    &amp;#125;</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"simpleQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SimpleConsumer..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"来自SimplePublisher的消息："</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ol start="4">
<li>运行测试类即可！</li>
</ol>
</blockquote>
<h4 id="5-4-Work-工作队列"><a href="#5-4-Work-工作队列" class="headerlink" title="5.4 Work 工作队列"></a>5.4 Work 工作队列</h4><blockquote>
<p>一个生产者，一个默认的交换机，一个队列，两个消费者</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">结构图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257641.png" alt="1587718055260"></td>
</tr>
</tbody></table>
<blockquote>
<p> 1）创建配置类，用于创建队列对象</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>work<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkQueueConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"workQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>2）创建生产者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>work<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkQueueProducer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WorkQueueProducer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"workQueue"</span><span class="token punctuation">,</span><span class="token string">"工作队列模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>3）创建消费者，本案例创建两个消费者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>work<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkQueueCustomer_01</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues<span class="token operator">=</span><span class="token string">"workQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WorkQueueCustomer_01："</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>work<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkQueueCustomer_02</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues<span class="token operator">=</span><span class="token string">"workQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WorkQueueCustomer_02："</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>4）在测试类中添加对象和方法进行测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> WorkQueueProducer workQueueProducer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWorkQueueProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        workQueueProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-5-Publish-Subscribe-发布订阅模式"><a href="#5-5-Publish-Subscribe-发布订阅模式" class="headerlink" title="5.5 Publish&#x2F;Subscribe 发布订阅模式"></a>5.5 Publish&#x2F;Subscribe 发布订阅模式</h4><blockquote>
<p>一个生产者，一个交换机，两个队列，两个消费者</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">结构图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257569.png" alt="1587720941513"></td>
</tr>
</tbody></table>
<blockquote>
<p>使用该模式需要借助交换机，生产者将消息发送到交换机，再通过交换机到达队列.</p>
<p>有四种交换机：direct&#x2F;topic&#x2F;headers&#x2F;fanout，默认交换机是direct，发布与订阅的实现使用第四个交换器类型fanout</p>
<p>使用交换机时，每个消费者有自己的队列，生产者将消息发送到交换机(X)，每个队列都要绑定到交换机</p>
</blockquote>
<blockquote>
<p>本例中：</p>
<p>创建2个消息队列</p>
<p>创建一个fanout交换机对象</p>
<p>Bind交换机和队列</p>
</blockquote>
<blockquote>
<p> 1）创建配置类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>fanout<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BindingBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>FanoutExchange<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//创建两个队列</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">fanoutQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanoutQueue1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">fanoutQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanoutQueue2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//创建一个交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> FanoutExchange <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">"fanoutExchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//将两个队列绑定到交换机上</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">bindingFanoutQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">fanoutQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">bindingFanoutQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">fanoutQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>2）创建生产者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>fanout<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutProducer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FanoutProducer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//第一个参数是交换机的名称 ，第二个参数是routerKey 这里设置为空字符串即可，第三个参数是要发送的消息</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"fanoutExchange"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"发布/订阅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>3）创建消费者，本案例创建两个消费者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>fanout<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutCustomer_01</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanoutQueue1"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FanoutCustomer_01："</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>fanout<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutCustomer_02</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanoutQueue2"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FanoutCustomer_02："</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>4）在测试类中添加对象和方法进行测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> FanoutProducer fanoutProducer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFanoutProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    fanoutProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-6-Routing-路由模式"><a href="#5-6-Routing-路由模式" class="headerlink" title="5.6 Routing 路由模式"></a>5.6 Routing 路由模式</h4><blockquote>
<p>一个生产者，一个交换机，两个队列，两个消费者</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">结构图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257024.png" alt="1587724886159"></td>
</tr>
</tbody></table>
<blockquote>
<p>生产者将消息发送到direct交换机（路由模式需要借助直连交换机实现），在绑定队列和交换机的时候有一个路由key，生产者发送的消息会指定一个路由key，那么消息只会发送到相应key相同的队列，接着监听该队列的消费者消费消息。也就是让消费者有选择性的接收消息。</p>
</blockquote>
<blockquote>
<p>本例中：</p>
<p>创建2个消息队列</p>
<p>创建一个direct交换机对象</p>
<p>Bind交换机和队列</p>
</blockquote>
<blockquote>
<p>1）创建配置类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>direct<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BindingBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">directQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"directQueue1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">directQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"directQueue2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"directExchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">bingDirectQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">directQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">bingDirectQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">directQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>2）创建生产者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>direct<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectProducer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> DirectExchange directExchange<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DirectProducer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>directExchange<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"zhangsanContent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>directExchange<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"lisiContent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>3）创建两个消费者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>direct<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectCustomer_01</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"directQueue1"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DirectCustomer_01："</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>direct<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectCustomer_02</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"directQueue2"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DirectCustomer_02："</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>4）在测试类中添加对象和方法进行测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> DirectProducer directProducer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDirectProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    directProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-7-Topic-主题模式"><a href="#5-7-Topic-主题模式" class="headerlink" title="5.7 Topic 主题模式"></a>5.7 Topic 主题模式</h4><blockquote>
<p>一个生产者，一个交换机，两个队列，两个消费者</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">结构图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257254.png" alt="1587727436898"></td>
</tr>
</tbody></table>
<blockquote>
<p>又称通配符模式（可以理解为模糊匹配，路由模式相当于精确匹配）</p>
<p>使用直连交换机可以改善我们的系统，但是它仍有局限性，它不能实现多重条件的路由。</p>
<p>在消息系统中，我们不仅想要订阅基于路由键的队列，还想订阅基于生产消息的源。这时候可以使用topic交换机。</p>
<p>使用主题交换机时不能采用任意写法的路由键，路由键的形式应该是由点分割的有意义的单词。例如”goods.stock.info”等。路由key最多255字节。</p>
</blockquote>
<blockquote>
<p>*号代表一个单词</p>
<p>#号代表0个或多个单词</p>
</blockquote>
<blockquote>
<p>1）创建配置类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>topic<span class="token punctuation">;</span>


<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BindingBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>TopicExchange<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">topicQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"topicQueue1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">topicQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"topicQueue2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> TopicExchange <span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"topicExchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">bingTopicQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">topicQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"wangwu.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">bingTopicQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">topicQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"zhaoliu.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>2）创建生产者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>topic<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>TopicExchange<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicProducer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> TopicExchange topicExchange<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TopicProducer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"wangwu.abc"</span><span class="token punctuation">,</span><span class="token string">"wangwuContent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"zhaoliu.xyz.qwer"</span><span class="token punctuation">,</span><span class="token string">"zhaoliuContent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>3）创建两个消费者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>topic<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicCustomer_01</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"topicQueue1"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TopicCustomer_01："</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>topic<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicCustomer_02</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"topicQueue2"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TopicCustomer_02："</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>4）在测试类中添加对象和方法进行测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> TopicProducer topicProducer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopicProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    topicProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-8手动Ack"><a href="#5-8手动Ack" class="headerlink" title="5.8手动Ack"></a>5.8手动Ack</h4><blockquote>
<p>RabbitMQ中的Ack： 主要是确认消息被消费者消费完成后通知服务器将队列里面的消息清除，spring-boot-data-amqp 是自动ACK机制，就意味着 MQ 会在消息发送完毕后，自动帮我们去ACK，然后删除队列中的消息，这样会存在一些问题：如果消费者处理消息需要较长时间，或者在消费消息的时候出现异常，都会出现问题，手动Ack可以避免消息重复消费。</p>
</blockquote>
<h5 id="5-8-1-原生方式测试"><a href="#5-8-1-原生方式测试" class="headerlink" title="5.8.1 原生方式测试"></a>5.8.1 原生方式测试</h5><blockquote>
<p>1.以简单模式为例，只需要修改消费者即可，启动生产者进行测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>helloworld<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//消费者</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者启动..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建连接</span>
        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置参数</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.25.134"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浏览器访问的是：15672</span>

        <span class="token comment" spellcheck="true">//获取连接</span>
        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//获取Channel</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//回调，创建Consumer</span>
        DefaultConsumer defaultConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//获取消息</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//模拟异常</span>
                    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//手动ack</span>
                    <span class="token comment" spellcheck="true">//参数1：deliveryTag:投递过来消息的标签,由MQ打的，从1开始，1,2,3...</span>
                    <span class="token comment" spellcheck="true">//参数2：multiple：是否批量确认之前已经消费过的消息，一般为false</span>
                    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//捕获所有异常</span>
                    <span class="token comment" spellcheck="true">//第三个参数：requeue -> true表示重新放入队列，false -> 放弃该消息</span>
                    <span class="token comment" spellcheck="true">//channel.basicNack(envelope.getDeliveryTag(), false, true);</span>
                    <span class="token comment" spellcheck="true">//抛弃此条消息</span>
                    channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//关闭，否则一直循环当前操作</span>
                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//获取消息</span>
        <span class="token comment" spellcheck="true">//1.队列名称（从哪个队列中获取消息）</span>
        <span class="token comment" spellcheck="true">//2.true表示自动ack（消费完消息之后，自动告诉rabbitmq）</span>
        <span class="token comment" spellcheck="true">//  false表示手动ack，需要自己收到调用方法</span>
        <span class="token comment" spellcheck="true">//3.回调</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>defaultConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//关闭，消费方一般不关闭，有消息过来就需要及时处理</span>
        <span class="token comment" spellcheck="true">//channel.close();</span>
        <span class="token comment" spellcheck="true">//connection.close();</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="5-8-2-SpringBoot中测试"><a href="#5-8-2-SpringBoot中测试" class="headerlink" title="5.8.2 SpringBoot中测试"></a>5.8.2 SpringBoot中测试</h5><blockquote>
<p>1.在 application.properties 中添加配置</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">#配置手动Ack
spring.rabbitmq.listener.simple.acknowledge-mode=manual
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>2.在之前测试的任意模式中添加 AckCustomer 演示</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//消费者：监听队列中的消息，然后获取消息</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"simpleQueue"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AckCustomer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//处理消息（获取消息，进一步操作）</span>
    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span>Channel channel<span class="token punctuation">,</span>Message msg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AckCustomer..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取消息内容</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>message<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取消息："</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//手动确认</span>
                <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deliveryTag："</span><span class="token operator">+</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//捕获所有异常</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息处理..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//重新放入队列中</span>
                    <span class="token comment" spellcheck="true">//channel.basicNack(msg.getMessageProperties().getDeliveryTag(),false,true);</span>
                    <span class="token comment" spellcheck="true">//放弃消息</span>
                    channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//关闭</span>
                    channel<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注释或打开异常进行测试即可！</p>
</blockquote>
<h3 id="六、事务与confirm机制"><a href="#六、事务与confirm机制" class="headerlink" title="六、事务与confirm机制"></a>六、事务与confirm机制</h3><hr>
<h4 id="6-1-消息的可靠性"><a href="#6-1-消息的可靠性" class="headerlink" title="6.1 消息的可靠性"></a>6.1 消息的可靠性</h4><blockquote>
<p>思考？</p>
<p>1.如果消息已经到达RabbitMQ，RabbitMQ宕机了，消息是不是就丢失了？</p>
<p>可以使用Queue的持久化机制</p>
<p>2.消费者在消费消息的时候，程序执行到一半，消费者宕机了怎么办？</p>
<p>可以手动Ack</p>
<p>3.生产者发送消息时，由于网络问题，导致消息没有发送到RabbitMQ怎么办？</p>
<p>RabbitMQ提供了事务操作和Confirm以及Return机制</p>
</blockquote>
<blockquote>
<p>保证消息的传递可以使用RabbitMQ中的事务，事务可以保证消息100%传递，可以通过事务的回滚去记录日志，后面定时再次发送当前消息，但是事务操作效率太低。</p>
<p>RabbitMQ中除了事务，还提供了Confirm的确认机制，这个效率比事务高很多。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257525.png" alt="1587727436898"></p>
<h4 id="6-2-RabbitMQ事务"><a href="#6-2-RabbitMQ事务" class="headerlink" title="6.2 RabbitMQ事务"></a>6.2 RabbitMQ事务</h4><blockquote>
<p>RabbitMQ的事务是对AMQP协议的实现，通过设置<code>Channel</code> 的模式来完成，具体操作如下：</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">txSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开启事务</span>
<span class="token comment" spellcheck="true">// ....本地事务操作</span>
channel<span class="token punctuation">.</span><span class="token function">txCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//提交事务</span>
channel<span class="token punctuation">.</span><span class="token function">txRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//回滚事务</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color="red"><strong>特别说明：RabbitMQ的事务机制是同步操作，会极大的降低RabbitMQ的性能。</strong></font></p>
<h4 id="6-3-Confirm机制"><a href="#6-3-Confirm机制" class="headerlink" title="6.3 Confirm机制"></a>6.3 Confirm机制</h4><blockquote>
<p>由于RabbitMQ的事务性能的问题，于是就又推出了发送方确认模式。</p>
</blockquote>
<h5 id="6-3-1-创建工具类"><a href="#6-3-1-创建工具类" class="headerlink" title="6.3.1 创建工具类"></a>6.3.1 创建工具类</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>utils<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQUtils</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 1. 创建连接工厂（ConnectionFactory）
     * 2. 创建连接 (Connection)
     * 3. 创建通道  (Channel)
     Connection conn = connectionFactory.newConnection();
     Channel channel = conn.createChannel();
    */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> ConnectionFactory connectionFactory<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.25.134"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioException<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            ioException<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Channel channel<span class="token punctuation">,</span> Connection connection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> channel<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> connection<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="6-3-2-单条消息确认"><a href="#6-3-2-单条消息确认" class="headerlink" title="6.3.2 单条消息确认"></a>6.3.2 单条消息确认</h5><pre class="line-numbers language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启发送方确认模式</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>1.在RabbitMq控制台页面，创建一个direct类型的交换机，再创建一个队列并绑定</p>
</blockquote>
<blockquote>
<p>channel.waitForConfirms(); &#x2F;&#x2F;对于单条消息的确认，true表示成功</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>confirm<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RabbitMQUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComfirmTest1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取连接</span>
        Connection connection <span class="token operator">=</span> RabbitMQUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取Channel</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开启confirm</span>
        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//发送消息（前提：队列已经通过routingKey绑定到该交换机上）</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"myExchange"</span><span class="token punctuation">,</span><span class="token string">"my"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"消息内容"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//判断消息到达交换机，true表示到达，若没有交换机则系统会直接报错</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息已到达交换机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//关闭</span>
        RabbitMQUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="6-3-2-批量消息确认"><a href="#6-3-2-批量消息确认" class="headerlink" title="6.3.2 批量消息确认"></a>6.3.2 批量消息确认</h5><blockquote>
<p>channel.waitForConfirmsOrDie();  &#x2F;&#x2F;批量消息确认，如果有一条消息没有发送成功，会抛出异常</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>confirm<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RabbitMQUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComfirmTest2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取连接</span>
        Connection connection <span class="token operator">=</span> RabbitMQUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取Channel</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开启confirm</span>
        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//发送消息（前提：队列已经通过routingKey绑定到该交换机上）</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//判断</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//前提是系统中没有名为myExchange2的交换机</span>
                channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"myExchange2"</span><span class="token punctuation">,</span> <span class="token string">"my"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"消息内容"</span><span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//发送消息</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"myExchange"</span><span class="token punctuation">,</span> <span class="token string">"my"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"消息内容"</span><span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//确定批量操作是否成功</span>
        <span class="token comment" spellcheck="true">//当发送的全部消息，有一个失败的时候，就直接全部失败 抛出异常</span>
        channel<span class="token punctuation">.</span><span class="token function">waitForConfirmsOrDie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//关闭</span>
        RabbitMQUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="6-3-3-回调方式确认"><a href="#6-3-3-回调方式确认" class="headerlink" title="6.3.3 回调方式确认"></a>6.3.3 回调方式确认</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>confirm<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RabbitMQUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConfirmListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComfirmTest3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取连接</span>
        Connection connection <span class="token operator">=</span> RabbitMQUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取Channel</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开启confirm</span>
        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//发送消息（前提：队列已经通过routingKey绑定到该交换机上）</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"myExchange"</span><span class="token punctuation">,</span><span class="token string">"my"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"消息内容"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//开启异步回调</span>
        channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfirmListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功达到交换机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有到达交换机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//关闭</span>
        RabbitMQUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-4-Return机制"><a href="#6-4-Return机制" class="headerlink" title="6.4 Return机制"></a>6.4 Return机制</h4><blockquote>
<p>Confirm只能保证消息到达exchange，无法保证消息可以被exchange分发到指定queue</p>
<p>而且exchange是不能持久化消息的，queue是可以持久化消息</p>
<p>采用Return机制来监听消息是否从exchange送到了指定的queue中</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071258092.png" alt="1587727436898"></p>
<blockquote>
<p>开启Return机制，在发送消息时，需要指定mandatory为true</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>confirm<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RabbitMQUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReturnTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取连接</span>
        Connection connection <span class="token operator">=</span> RabbitMQUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取Channel</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开启confirm</span>
        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//发送消息</span>
        <span class="token comment" spellcheck="true">//注意：指定mandatory参数为true，设置没有绑定的routingkey</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"myExchange"</span><span class="token punctuation">,</span><span class="token string">"my2"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"消息内容"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//开启异步回调</span>
        channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfirmListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功达到交换机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有到达交换机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//没有到达队列的时候触发</span>
        channel<span class="token punctuation">.</span><span class="token function">addReturnListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReturnListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReturn</span><span class="token punctuation">(</span><span class="token keyword">int</span> replyCode<span class="token punctuation">,</span> String replyText<span class="token punctuation">,</span> String exchange<span class="token punctuation">,</span>
                                     String routingKey<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span>
                                     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有到达队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//关闭</span>
        RabbitMQUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-5-SpringBoot实现"><a href="#6-5-SpringBoot实现" class="headerlink" title="6.5  SpringBoot实现"></a>6.5  SpringBoot实现</h4><blockquote>
<p>1.在 application.properties 中添加配置</p>
</blockquote>
<blockquote>
<p>spring.rabbitmq.publisher-confirm-type 对应值的说明</p>
<ul>
<li>NONE ：禁用发布确认模式，是默认值</li>
<li>CORRELATED：发布消息成功到交换器后会触发回调方法</li>
<li>SIMPLE：两种效果</li>
</ul>
<ol>
<li>和CORRELATED值一样会触发回调方法</li>
<li>在发布消息成功后使用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是waitForConfirmsOrDie方法如果返回false则会关闭channel，则接下来无法发送消息到broker</li>
</ol>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh"># 配置开启Confirm和Return
spring.rabbitmq.publisher-confirm-type: simple
spring.rabbitmq.publisher-returns: true
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>2.创建配置类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>direct<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ReturnedMessage<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>CorrelationData<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PublisherConfirmAndReturnConfig</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">,</span>RabbitTemplate<span class="token punctuation">.</span>ReturnsCallback <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnsCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ack<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"到达交换机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有到达交换机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>ReturnedMessage returnedMessage<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有到达队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>3.修改生产者发送消息方法中的routingKey，然后启动测试类测试即可！</p>
</blockquote>
<h3 id="七-死信队列"><a href="#七-死信队列" class="headerlink" title="七. 死信队列"></a>七. 死信队列</h3><hr>
<blockquote>
<p>死信队列并不是一个特殊的队列，只是一个普通的队列，只是我们把他们取名叫做死信队列。</p>
<p>死信队列的设计是在某个队列的头信息中设定<code>x-dead-letter-exchange</code> (死信交换机)和<code>x-dead-letter-routing-key</code>(死信路由键)即可。关联到一个绑定到某个死信交换机的队列上。然后给该队列指定过期时间或者指定的消息的过期时间，那么该消息到期后会自动到达死信队列中。</p>
</blockquote>
<h5 id="7-1-场景"><a href="#7-1-场景" class="headerlink" title="7.1 场景"></a>7.1 场景</h5><blockquote>
<p>场景一：未支付订单在规定的时间取消。实现的方式为，将订单消息放入到一个队列中，并指定其过期时间。当过期时间到了之后，就进入到了死信队列，那么可以直接在死信队列的消费端取出对应的消息即可。</p>
</blockquote>
<blockquote>
<p>场景二：某条消息在消费端曾多次尝试消费，但是均未消费成功，那么就进入死信队列，让人工干预。</p>
</blockquote>
<h5 id="7-2-测试"><a href="#7-2-测试" class="headerlink" title="7.2 测试"></a>7.2 测试</h5><blockquote>
<p>提前创建RabbitMQUtils工具类并测试即可</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>dead<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RabbitMQUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>AMQP<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadQueueTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//死信交换机</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String dead_letter_exchange <span class="token operator">=</span> <span class="token string">"dead_letter_exchange"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//死信路由键</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String dead_letter_routing_key <span class="token operator">=</span> <span class="token string">"dead_letter_routing_key"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//死信队列</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String dead_letter_queue <span class="token operator">=</span> <span class="token string">"dead_letter_queue"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String people_exchange <span class="token operator">=</span> <span class="token string">"people_exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String people_routing_key <span class="token operator">=</span> <span class="token string">"people_routing_key"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String people_queue <span class="token operator">=</span> <span class="token string">"people_queue"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取连接</span>
        Connection connection <span class="token operator">=</span> RabbitMQUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建一个死信的交换机</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>dead_letter_exchange<span class="token punctuation">,</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建死信队列</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>dead_letter_queue<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 将死信队列绑定到死信交换机，路由键为 "dead_letter_routing_key"</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>dead_letter_queue<span class="token punctuation">,</span> dead_letter_exchange<span class="token punctuation">,</span> dead_letter_routing_key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//设置队列参数</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> dead_letter_exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> dead_letter_routing_key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建当前交换机，队列以及路由键</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>people_exchange<span class="token punctuation">,</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//最后一个参数是当前队列的属性</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>people_queue<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>people_queue<span class="token punctuation">,</span> people_exchange<span class="token punctuation">,</span> people_routing_key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//设置消息的过期时间，单位：毫秒</span>
        AMQP<span class="token punctuation">.</span>BasicProperties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">"15000"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//发送消息</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>people_exchange<span class="token punctuation">,</span> people_routing_key<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> <span class="token string">"dead_message"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        RabbitMQUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="八-避免消息重复消费"><a href="#八-避免消息重复消费" class="headerlink" title="八. 避免消息重复消费"></a>八. 避免消息重复消费</h3><hr>
<h4 id="8-1-幂等性"><a href="#8-1-幂等性" class="headerlink" title="8.1 幂等性"></a>8.1 幂等性</h4><blockquote>
<p>所有的消息中间件都会存在这样一个问题，那就是消息的重复消费问题，所以我们必须做幂等性设计，所谓幂等性设计就是，一条消息无论消费多少次所产生的结果都是相同的。</p>
<p>重复消费消息，是对非幂等性操作造成问题，重复消费消息的原因是因为消费者没有给RabbitMQ一个Ack</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071258024.png" alt="1587727436898"></p>
<blockquote>
<p>为了解决消息重复消费的问题，可以采用Redis，在消费者消费消息之前，现将消息的id放到Redis中，</p>
<p>id-0（正在执行业务）</p>
<p>id-1（执行业务成功）</p>
<p>如果ack失败，在RabbitMQ将消息交给其他的消费者时，先执行setnx，如果key已经存在，获取他的值，如果是0，当前消费者就什么都不做，如果是1，直接ack。</p>
<p>极端情况：第一个消费者在执行业务时，出现了死锁，在setnx的基础上，再给key设置一个生存时间。</p>
</blockquote>
<h4 id="8-2-解决方案"><a href="#8-2-解决方案" class="headerlink" title="8.2 解决方案"></a>8.2 解决方案</h4><blockquote>
<p>方案一：为每条消息生成全局唯一ID，将ID和业务数据放在同一个事务中，每次消费消息之后都将ID在表中插入一条数据，每次消费之前先查询ID是否存在，如果不存在就执行对应的逻辑；如果存在则直接确认。</p>
</blockquote>
<blockquote>
<p>方案二（推荐）：利用redis+数据库的方案来实现幂等性的设计，实现的思路与redis的缓存击穿方案类似；当插入数据的时候，将唯一ID同时插入数据库，然后放入到redis中，设置过期时间，每次从redis中判断。</p>
</blockquote>
<h4 id="8-3-在springboot中测试"><a href="#8-3-在springboot中测试" class="headerlink" title="8.3 在springboot中测试"></a>8.3 在springboot中测试</h4><h5 id="8-3-1-导入依赖"><a href="#8-3-1-导入依赖" class="headerlink" title="8.3.1 导入依赖"></a>8.3.1 导入依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-3-2-配置application-properties"><a href="#8-3-2-配置application-properties" class="headerlink" title="8.3.2 配置application.properties"></a>8.3.2 配置application.properties</h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#对于rabbitMQ的支持</span>
<span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.25.140</span>
<span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span>
<span class="token attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token attr-value">guest</span>
<span class="token attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token attr-value">guest</span>

<span class="token attr-name">spring.rabbitmq.listener.simple.acknowledge-mode</span><span class="token punctuation">=</span><span class="token attr-value">manual</span>

<span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span>
<span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-3-3-这里以简单模式演示"><a href="#8-3-3-这里以简单模式演示" class="headerlink" title="8.3.3 这里以简单模式演示"></a>8.3.3 这里以简单模式演示</h5><blockquote>
<p>1.编写配置类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>AmqpException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>CorrelationData<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//配置类，创建队列</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleQueueConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">simpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"simpleQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//创建MessagePostProcessor对象，用于在生产者中把id等参数传给消费者</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> MessagePostProcessor <span class="token function">correlationIdProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        MessagePostProcessor messagePostProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessagePostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> Message <span class="token function">postProcessMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Correlation correlation<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                MessageProperties messageProperties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//通过Correlation对象存储id参数，Message获取id参数</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>correlation <span class="token keyword">instanceof</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    String correlationId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CorrelationData<span class="token punctuation">)</span> correlation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    messageProperties<span class="token punctuation">.</span><span class="token function">setCorrelationId</span><span class="token punctuation">(</span>correlationId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//返回</span>
                <span class="token keyword">return</span> message<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> Message <span class="token function">postProcessMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> AmqpException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> message<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> messagePostProcessor<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>2.编写生产者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>MessagePostProcessor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>CorrelationData<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">//生产者</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleProducer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> MessagePostProcessor messagePostProcessor<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        CorrelationData correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"simpleQueue"</span><span class="token punctuation">,</span><span class="token string">"简单队列"</span><span class="token punctuation">,</span>messagePostProcessor<span class="token punctuation">,</span>correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>3.编写消费者</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>MessageProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RabbitListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringRedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//消费者</span>
<span class="token annotation punctuation">@Component</span>
<span class="token comment" spellcheck="true">//监听指定队列</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"simpleQueue"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AckCustomer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMessage</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Channel channel<span class="token punctuation">,</span> Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//1.获取MessageId</span>
        String messageId <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCorrelationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>messageId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Boolean aBoolean <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>messageId<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//2.设置key到Redis</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//3.消费消息</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在处理消息...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//System.out.println("接收到消息：" + msg);</span>
            <span class="token comment" spellcheck="true">//4.设置key的value为1</span>
            <span class="token comment" spellcheck="true">//redisTemplate.opsForValue().set(messageId,"1",600, TimeUnit.SECONDS);</span>
            <span class="token comment" spellcheck="true">//5.手动ack</span>
            <span class="token comment" spellcheck="true">//channel.basicAck(message.getMessageProperties().getDeliveryTag(),false);</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//判断消息是否已经消费：1 -> 已消费 0 -> 未消费</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>messageId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到消息："</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>messageId<span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//获取Redis中的value即可 如果是1，直接手动ack，不需要再次消费了</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>messageId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>4.测试类测试即可</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>SimpleProducer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">Springboot14RabbitmqApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> SimpleProducer simpleProducer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        simpleProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试成功后，到redis中查看即可！</p>
</blockquote>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro</title>
    <url>/Shiro/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249775.png"></p>
<p>[TOC]</p>
<h3 id="一、RBAC介绍"><a href="#一、RBAC介绍" class="headerlink" title="一、RBAC介绍"></a>一、RBAC介绍</h3><hr>
<h4 id="1-1-RBAC简介"><a href="#1-1-RBAC简介" class="headerlink" title="1.1 RBAC简介"></a>1.1 RBAC简介</h4><blockquote>
<p>RBAC是基于角色的访问控制（Role-Based Access Control ）在 RBAC 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。这样管理都是层级相互依赖的，权限赋予给角色，而把角色又赋予用户，这样的权限设计很清楚，管理起来很方便。</p>
</blockquote>
<blockquote>
<p>在RBAC模型里面，有3个基础组成部分，分别是：用户、角色和权限。</p>
<p>RBAC通过定义角色的权限，并对用户授予某个角色从而来控制用户的权限，实现了用户和权限的逻辑分离，极大地方便了权限的管理，在讲解之前，先介绍一些名词：</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>User（用户）：每个用户都有唯一的UID识别，并被授予不同的角色</p>
<p>Role（角色）：不同角色具有不同的权限</p>
<p>Permission（权限）：访问权限</p>
<p>用户-角色映射：用户和角色之间的映射关系</p>
<p>角色-权限映射：角色和权限之间的映射</p>
</blockquote>
<h4 id="1-2-权限管理"><a href="#1-2-权限管理" class="headerlink" title="1.2 权限管理"></a>1.2 权限管理</h4><blockquote>
<p> 只要有用户参与的系统一般都要有权限管理，权限管理实现对用户访问系统的控制，按照安全规则或者<a href="http://baike.baidu.com/view/160028.htm_blank">安全策略</a>控制用户可以访问而且只能访问自己被授权的资源。</p>
<p> 权限管理包括用户认证和授权两部分。</p>
</blockquote>
<h3 id="二、-用户认证"><a href="#二、-用户认证" class="headerlink" title="二、 用户认证"></a>二、 用户认证</h3><blockquote>
<p>用户认证，用户去访问系统，系统要验证用户身份的合法性。最常用的用户身份验证的方法：</p>
<p>1、用户名密码方式、2、指纹打卡机、3、基于证书验证方法。。系统验证用户身份合法，用户方可访问系统的资源。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249502.png"></p>
<blockquote>
<p>关键对象：</p>
<p>subject：主体，理解为用户,可能是程序，都要去访问系统的资源，系统需要对subject进行身份认证。</p>
<p>principal：身份信息，通常是唯一的，一个主体还有多个身份信息，但是都有一个主身份信息（primary principal）</p>
<p>credential：凭证信息，可以是密码 、证书、指纹。</p>
<p>总结：主体在进行身份认证时需要提供身份信息和凭证信息。</p>
</blockquote>
<h3 id="三、用户授权"><a href="#三、用户授权" class="headerlink" title="三、用户授权"></a>三、用户授权</h3><hr>
<blockquote>
<p>用户授权，简单理解为访问控制，在用户认证通过后，系统对用户访问资源进行控制，用户具有资源的访问权限方可访问。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249558.png"></p>
<blockquote>
<p>关键对象</p>
<p>授权的过程理解为：who对what(which)进行how操作。</p>
<p>who：主体即subject，subject在认证通过后系统进行访问控制。</p>
<p>what(which)：资源(Resource)，subject必须具备资源的访问权限才可访问该 资源。资源比如：系统用户列表页面、商品修改菜单、商品id为001的商品信息。</p>
<p>资源分为资源类型和资源实例：</p>
<p>系统的用户信息就是资源类型，相当于java类。</p>
<p>系统中id为001的用户就是资源实例，相当于new的java对象。</p>
<p>how：权限&#x2F;许可(permission) ，针对资源的权限或许可，subject具有permission访问资源，如何访问&#x2F;操作需要定义permission，权限比如：用户添加、用户修改、商品删除。</p>
</blockquote>
<h3 id="四、权限模型"><a href="#四、权限模型" class="headerlink" title="四、权限模型"></a>四、权限模型</h3><hr>
<blockquote>
<p>主体（账号、密码）</p>
<p>角色（角色名称）</p>
<p>权限（权限名称、资源id）</p>
<p>主体和角色关系（主体id、角色id）</p>
<p>角色和权限关系（角色id、权限id）</p>
<p>资源（资源名称、访问地址）</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249586.png"></p>
<blockquote>
<p>通常企业开发中将资源和权限表合并为一张权限表，如下：</p>
<p>资源（资源名称、访问地址）</p>
<p>权限（权限名称、资源id）</p>
<p>合并为：权限（权限名称、资源名称、资源访问地址）</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249079.png"></p>
<blockquote>
<p>上图常被称为权限管理的通用模型，不过企业在开发中根据系统自身的特点还会对上图进行修改，但是用户、角色、权限、用户角色关系、角色权限关系是需要去理解的。</p>
</blockquote>
<blockquote>
<p>分配权限：用户需要分配相应的权限才可访问相应的资源。权限是对于资源的操作许可，通常给用户分配资源权限需要将权限信息持久化，比如存储在关系数据库中，把用户信息、权限管理、用户分配的权限信息写到数据库（权限数据模型）。</p>
</blockquote>
<h3 id="五、Shiro介绍"><a href="#五、Shiro介绍" class="headerlink" title="五、Shiro介绍"></a>五、Shiro介绍</h3><hr>
<blockquote>
<p>shiro是apache的一个开源框架，是一个权限管理的框架，实现 用户认证、用户授权，功能强大、且 简单、灵活，且不跟任何的框架或者容器绑定，可以独立运行。</p>
<p>spring中有spring security (原名Acegi)，是一个权限框架，使用起来很方便，和spring依赖过于紧密。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249240.png"></p>
<blockquote>
<p>subject：主体，可以是用户也可以是程序，主体要访问系统，系统需要对主体进行认证、授权。</p>
<p>securityManager：安全管理器，主体进行认证和授权都是通过securityManager进行。</p>
<p>authenticator：认证器，主体进行认证最终通过authenticator进行的。</p>
<p>authorizer：授权器，主体进行授权最终通过authorizer进行的。</p>
<p>sessionManager：web应用中一般是用web容器对session进行管理，shiro也提供一套session管理的方式。</p>
<p>SessionDao：通过SessionDao管理session数据，针对个性化的session数据存储需要使用sessionDao。</p>
<p>cache Manager：缓存管理器，主要对session和授权数据进行缓存，比如将授权数据通过cacheManager进行缓存管理，和ehcache整合对缓存数据进行管理。</p>
<p>realm：域，领域，相当于数据源，通过realm存取认证、授权相关数据。</p>
<p>注：在realm中存储授权和认证的逻辑。</p>
<p>cryptography：密码管理，提供了一套加密&#x2F;解密的组件，方便开发。比如提供常用的散列、加&#x2F;解密等功能。</p>
<p>比如：md5信息摘要算法。</p>
</blockquote>
<h3 id="六、认证流程"><a href="#六、认证流程" class="headerlink" title="六、认证流程"></a>六、认证流程</h3><hr>
<h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249741.png"></h4><h4 id="6-1-创建Maven工程并导入依赖"><a href="#6-1-创建Maven工程并导入依赖" class="headerlink" title="6.1 创建Maven工程并导入依赖"></a>6.1 创建Maven工程并导入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 后期整合springboot工程时会产生接口冲突问题 --></span>
<span class="token comment" spellcheck="true">&lt;!--        &lt;dependency>--></span>
<span class="token comment" spellcheck="true">&lt;!--            &lt;groupId>org.apache.shiro&lt;/groupId>--></span>
<span class="token comment" spellcheck="true">&lt;!--            &lt;artifactId>shiro-spring-boot-starter&lt;/artifactId>--></span>
<span class="token comment" spellcheck="true">&lt;!--            &lt;version>1.8.0&lt;/version>--></span>
<span class="token comment" spellcheck="true">&lt;!--        &lt;/dependency>--></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-2-在resources目录下创建shiro-ini文件，IEDA需要安装-ini并重启方可生效"><a href="#6-2-在resources目录下创建shiro-ini文件，IEDA需要安装-ini并重启方可生效" class="headerlink" title="6.2 在resources目录下创建shiro.ini文件，IEDA需要安装*.ini并重启方可生效"></a>6.2 在resources目录下创建shiro.ini文件，IEDA需要安装*.ini并重启方可生效</h4><pre class="line-numbers language-sh"><code class="language-sh">#对用户的配置
[users]
#对用户的用户名和密码的配置
jack=123
tom=456
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-3-创建认证测试类"><a href="#6-3-创建认证测试类" class="headerlink" title="6.3 创建认证测试类"></a>6.3 创建认证测试类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>authentication<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>SecurityUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>UsernamePasswordToken<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IniSecurityManagerFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SecurityManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>Subject<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Factory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 用户登陆和退出</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLoginAndLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建securityManager工厂，通过ini配置文件创建securityManager工厂</span>
        Factory<span class="token operator">&lt;</span>SecurityManager<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span>
                <span class="token string">"classpath:shiro.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建SecurityManager</span>
        SecurityManager securityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 将securityManager设置当前的运行环境中</span>
        SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 从SecurityUtils里边创建一个subject</span>
        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 在认证提交前准备token（令牌）</span>
        <span class="token comment" spellcheck="true">// 这里的账号和密码 将来是由用户输入进去</span>
        UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 执行认证提交</span>
        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 是否认证通过</span>
        <span class="token keyword">boolean</span> isAuthenticated <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否认证通过："</span> <span class="token operator">+</span> isAuthenticated<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 退出操作</span>
        subject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 是否认证通过</span>
        isAuthenticated <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否认证通过："</span> <span class="token operator">+</span> isAuthenticated<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-4-执行流程"><a href="#6-4-执行流程" class="headerlink" title="6.4 执行流程"></a>6.4 执行流程</h4><blockquote>
<p>1、通过ini配置文件创建securityManager</p>
<p>2、调用subject.login方法主体提交认证，提交的token</p>
<p>3、securityManager进行认证，securityManager最终由ModularRealmAuthenticator进行认证。</p>
<p>4、ModularRealmAuthenticator调用IniRealm(给realm传入token) 去ini配置文件中查询用户信息</p>
<p>5、IniRealm根据输入的token（UsernamePasswordToken）从 shiro.ini查询用户信息，根据账号查询用户信息	（账号和密码）</p>
<p>​      如果查询到用户信息，就给ModularRealmAuthenticator返回用户信息（账号和密码）</p>
<p>​      如果查询不到，就给ModularRealmAuthenticator返回null</p>
<p>6、ModularRealmAuthenticator接收IniRealm返回Authentication认证信息</p>
<p>​      如果返回的认证信息是null，ModularRealmAuthenticator抛出异常</p>
<p>（org.apache.shiro.authc.UnknownAccountException）</p>
<p>​      如果返回的认证信息不是null（说明inirealm找到了用户），对IniRealm返回用户密码 （在ini文件中存在）</p>
<p>​      和 token中的密码 进行对比，如果不一致抛出异常</p>
<p>（org.apache.shiro.authc.IncorrectCredentialsException）</p>
</blockquote>
<h4 id="6-5-总结"><a href="#6-5-总结" class="headerlink" title="6.5 总结"></a>6.5 总结</h4><blockquote>
<p>ModularRealmAuthenticator作用是进行认证，需要调用realm来查询用户信息（在数据库中存在用户信息）并且进行密码对比（认证过程）</p>
<p>realm：需要根据token中的身份信息去查询数据库（入门程序使用ini配置文件），如果查到用户返回认证信息，如果查询不到返回null</p>
</blockquote>
<h3 id="七、使用realm认证"><a href="#七、使用realm认证" class="headerlink" title="七、使用realm认证"></a>七、使用realm认证</h3><hr>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249769.png"></p>
<h4 id="7-1-创建自定义realm"><a href="#7-1-创建自定义realm" class="headerlink" title="7.1 创建自定义realm"></a>7.1 创建自定义realm</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>realm<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationToken<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>SimpleAuthenticationInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>AuthorizationInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>realm<span class="token punctuation">.</span>AuthorizingRealm<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>PrincipalCollection<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">realmDemo</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> String realmName  <span class="token operator">=</span> <span class="token string">"realmDemo"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//认证</span>
    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken 
authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//从token中取出用户信息</span>
        <span class="token comment" spellcheck="true">//用户名，身份信息</span>
        String principal <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//密码，凭证</span>
        Object credentials <span class="token operator">=</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//类型转化</span>
        String password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> credentials<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

            SimpleAuthenticationInfo simpleAuthenticationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span>password<span class="token punctuation">,</span>realmName<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> simpleAuthenticationInfo<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//授权</span>
    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="7-2-在resource目录下创建shiro-realm-ini（注意：realm路径别配置错了）"><a href="#7-2-在resource目录下创建shiro-realm-ini（注意：realm路径别配置错了）" class="headerlink" title="7.2 在resource目录下创建shiro-realm.ini（注意：realm路径别配置错了）"></a>7.2 在resource目录下创建shiro-realm.ini（注意：realm路径别配置错了）</h4><pre class="line-numbers language-sh"><code class="language-sh">[main]
#自定义realm
realmDemo=com.qf.realm.realmDemo
#将realm设置到securityManager
securityManager.realms=$realmDemo
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="7-3-在AuthenticationDemo类中添加方法进行测试"><a href="#7-3-在AuthenticationDemo类中添加方法进行测试" class="headerlink" title="7.3 在AuthenticationDemo类中添加方法进行测试"></a>7.3 在AuthenticationDemo类中添加方法进行测试</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义realm</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRealmDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 创建securityManager工厂，通过ini配置文件创建securityManager工厂</span>
    Factory<span class="token operator">&lt;</span>SecurityManager<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span>
            <span class="token string">"classpath:shiro-realm.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 创建SecurityManager</span>
    SecurityManager securityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 将securityManager设置当前的运行环境中</span>
    SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 从SecurityUtils里边创建一个subject</span>
    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 在认证提交前准备token（令牌）</span>
    <span class="token comment" spellcheck="true">// 这里的账号和密码 将来是由用户输入进去</span>
    UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 执行认证提交</span>
        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 是否认证通过</span>
    <span class="token keyword">boolean</span> isAuthenticated <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否认证通过："</span> <span class="token operator">+</span> isAuthenticated<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>访问controller测试即可</p>
</blockquote>
<h3 id="八、MD5加密"><a href="#八、MD5加密" class="headerlink" title="八、MD5加密"></a>八、MD5加密</h3><hr>
<blockquote>
<p>通常需要对密码 进行散列，常用的有MD5、SHA，</p>
<p>对MD5密码，如果知道散列后的值可以通过穷举算法，得到md5密码对应的明文（指加密前的密码）。</p>
<p>建议对MD5进行散列时加salt（盐），进行加密相当于对原始密码+盐进行散列。</p>
<p>正常使用时散列方法：</p>
<p>在程序中对原始密码+盐进行散列，将散列值存储到数据库中，并且还要将盐也要存储在数据库中。</p>
<p>如果进行密码对比时，使用相同方法，将原始密码+盐进行散列，进行比对。</p>
</blockquote>
<h4 id="8-1-创建MD5Demo测试类，进行测试"><a href="#8-1-创建MD5Demo测试类，进行测试" class="headerlink" title="8.1.创建MD5Demo测试类，进行测试"></a>8.1.创建MD5Demo测试类，进行测试</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>hash<span class="token punctuation">.</span>Md5Hash<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>hash<span class="token punctuation">.</span>SimpleHash<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MD5Demo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 原始 密码</span>
        String password <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 盐</span>
        String salt <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 散列次数</span>
        <span class="token keyword">int</span> hashIterations <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 上边散列1次：7bc6c31880aeda581aa34e218af25753</span>
        <span class="token comment" spellcheck="true">// 上边散列2次：6585096f3f6735025449cfb351c8cff9</span>

        <span class="token comment" spellcheck="true">// 第一种方式</span>
        <span class="token comment" spellcheck="true">// 构造方法中：</span>
        <span class="token comment" spellcheck="true">// 第一个参数：明文，原始密码</span>
        <span class="token comment" spellcheck="true">// 第二个参数：盐，通过使用随机数</span>
        <span class="token comment" spellcheck="true">// 第三个参数：散列的次数，比如散列两次，相当 于md5(md5(''))</span>
        Md5Hash md5Hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Md5Hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> hashIterations<span class="token punctuation">)</span><span class="token punctuation">;</span>

        String password_md5 <span class="token operator">=</span> md5Hash<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password_md5<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 第二种方式</span>
        <span class="token comment" spellcheck="true">// 第一个参数：散列算法</span>
        SimpleHash simpleHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span><span class="token string">"md5"</span><span class="token punctuation">,</span> password<span class="token punctuation">,</span> salt<span class="token punctuation">,</span>
                hashIterations<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>simpleHash<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="8-2在AuthenticationDemo类中添加方法进行测试"><a href="#8-2在AuthenticationDemo类中添加方法进行测试" class="headerlink" title="8.2在AuthenticationDemo类中添加方法进行测试"></a>8.2在AuthenticationDemo类中添加方法进行测试</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试MD5</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMD5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 创建securityManager工厂，通过ini配置文件创建securityManager工厂</span>
    Factory<span class="token operator">&lt;</span>SecurityManager<span class="token operator">></span> factory <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span><span class="token string">"classpath:shiro-realm-md5.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 创建SecurityManager</span>
    SecurityManager securityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 将securityManager设置当前的运行环境中</span>
    SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 从SecurityUtils里边创建一个subject</span>
    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 在认证提交前准备token（令牌）</span>
    <span class="token comment" spellcheck="true">// 这里的账号和密码 将来是由用户输入进去</span>
    UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 执行认证提交</span>
        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 是否认证通过</span>
    <span class="token keyword">boolean</span> isAuthenticated <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否认证通过："</span> <span class="token operator">+</span> isAuthenticated<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="8-3创建shiro-realm-md5-ini"><a href="#8-3创建shiro-realm-md5-ini" class="headerlink" title="8.3创建shiro-realm-md5.ini"></a>8.3创建shiro-realm-md5.ini</h4><pre class="line-numbers language-sh"><code class="language-sh">[main]
#自定义realm
realmDemo=com.qf.realm.realmDemoMD5
#将realm设置到securityManager
securityManager.realms=$realmDemo
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="8-4创建realmMD5"><a href="#8-4创建realmMD5" class="headerlink" title="8.4创建realmMD5"></a>8.4创建realmMD5</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>realm<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationToken<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>SimpleAuthenticationInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>AuthorizationInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>hash<span class="token punctuation">.</span>Md5Hash<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>realm<span class="token punctuation">.</span>AuthorizingRealm<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>PrincipalCollection<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">realmDemoMD5</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> String realmName  <span class="token operator">=</span> <span class="token string">"realmDemoMD5"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//认证</span>
    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//用户名</span>
        String principal <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//System.out.println(principal);</span>

        <span class="token comment" spellcheck="true">//密码</span>
        Object credentials <span class="token operator">=</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> credentials<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        Md5Hash md5Hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Md5Hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token string">"abcde"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String password_md5 <span class="token operator">=</span> md5Hash<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password_md5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//从数据库查出来的密码</span>
        String dbpassword <span class="token operator">=</span> <span class="token string">"6585096f3f6735025449cfb351c8cff9"</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>password_md5<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dbpassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

            SimpleAuthenticationInfo 
simpleAuthenticationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span>password<span class="token punctuation">,</span>realmName<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> simpleAuthenticationInfo<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//授权</span>
    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="九、授权流程"><a href="#九、授权流程" class="headerlink" title="九、授权流程"></a>九、授权流程</h3><hr>
<p><img src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071250363.png"></p>
<h4 id="9-1创建shiro-permission-ini（shiro-permission-ini里边的内容相当于在数据库）"><a href="#9-1创建shiro-permission-ini（shiro-permission-ini里边的内容相当于在数据库）" class="headerlink" title="9.1创建shiro-permission.ini（shiro-permission.ini里边的内容相当于在数据库）"></a>9.1创建shiro-permission.ini（shiro-permission.ini里边的内容相当于在数据库）</h4><pre class="line-numbers language-sh"><code class="language-sh">#用户
[users]
#用户jack的密码是123，此用户具有role1和role2两个角色
jack=123,role1,role2
tom=456,role2

#权限
[roles]
#角色role1对资源user拥有create、update权限
role1=user:create,user:update
#角色role2对资源user拥有create、delete权限
role2=user:create,user:delete
#角色role3对资源user拥有query权限
role3=user:query
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="9-2创建AuthorizationDemo"><a href="#9-2创建AuthorizationDemo" class="headerlink" title="9.2创建AuthorizationDemo"></a>9.2创建AuthorizationDemo</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>authorization<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>SecurityUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>UsernamePasswordToken<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IniSecurityManagerFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SecurityManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>Subject<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Factory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 角色授权、资源授权测试</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建SecurityManager工厂</span>
        Factory<span class="token operator">&lt;</span>SecurityManager<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span>
                <span class="token string">"classpath:shiro-permission.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建SecurityManager</span>
        SecurityManager securityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 将SecurityManager设置到系统运行环境，将SecurityManager配置spring容器中，一般单例管理</span>
        SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建subject</span>
        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建token令牌</span>
        UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//认证</span>
        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//是否认证成功</span>
        <span class="token keyword">boolean</span> authenticated <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否认证成功："</span><span class="token operator">+</span>authenticated<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//--------认证通过之后进行授权----------</span>

        <span class="token comment" spellcheck="true">//基于角色的授权 </span>
        <span class="token comment" spellcheck="true">//单个角色判断</span>
        <span class="token keyword">boolean</span> role1 <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"role1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"role1："</span><span class="token operator">+</span>role1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//多个角色判断</span>
        <span class="token keyword">boolean</span> allRoles <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">hasAllRoles</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"role1"</span><span class="token punctuation">,</span> <span class="token string">"role2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"role1 + role2："</span><span class="token operator">+</span>allRoles<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//subject.checkRole("role3");//检查是否有当前角色</span>

        <span class="token comment" spellcheck="true">//基于资源的授权</span>
        <span class="token comment" spellcheck="true">//单个权限判断</span>
        <span class="token keyword">boolean</span> permitted <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"user:create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:create："</span><span class="token operator">+</span>permitted<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//多个权限判断</span>
        <span class="token keyword">boolean</span> permittedAll <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isPermittedAll</span><span class="token punctuation">(</span><span class="token string">"user:create"</span><span class="token punctuation">,</span> <span class="token string">"user:update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:create + user:update："</span><span class="token operator">+</span>permittedAll<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//subject.checkPermissions("user:query", "user:add");</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="十、使用realm授权"><a href="#十、使用realm授权" class="headerlink" title="十、使用realm授权"></a>十、使用realm授权</h3><hr>
<blockquote>
<p>需求</p>
<p>上边的程序通过shiro-permission.ini对权限信息进行静态配置，实际开发中从数据库中获取权限数据。就需要自定义realm，由realm从数据库查询权限数据，realm会根据用户身份查询权限数据，将权限数据返回给authorizer（授权器）。</p>
</blockquote>
<h4 id="10-1修改之前realmDemo-java中的doGetAuthorizationInfo方法"><a href="#10-1修改之前realmDemo-java中的doGetAuthorizationInfo方法" class="headerlink" title="10.1修改之前realmDemo.java中的doGetAuthorizationInfo方法"></a>10.1修改之前realmDemo.java中的doGetAuthorizationInfo方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//授权</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 从 principals获取主身份信息</span>
    <span class="token comment" spellcheck="true">// 将getPrimaryPrincipal方法返回值转为真实身份类型（在上边的doGetAuthenticationInfo认证通过填充到SimpleAuthenticationInfo中身份类型）</span>
    String primaryPrincipal <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>principalCollection<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"primaryPrincipal："</span><span class="token operator">+</span>primaryPrincipal<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 根据身份信息获取权限信息</span>
    <span class="token comment" spellcheck="true">// 连接数据库...</span>
    <span class="token comment" spellcheck="true">// 模拟从数据库获取到数据</span>

    <span class="token comment" spellcheck="true">//把数据库中查到的角色放进集合中</span>
    ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> roles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    roles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"role1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    roles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"role2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//把数据库中查到的资源放进集合中</span>
    HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> permissions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    permissions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"user:add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    permissions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"user:update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//查到权限数据，返回授权信息（包括以上的角色或者资源）</span>
    SimpleAuthorizationInfo simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//通过角色授权</span>
    <span class="token comment" spellcheck="true">//simpleAuthorizationInfo.addRoles(roles);</span>
    <span class="token comment" spellcheck="true">//通过资源授权</span>
    simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addStringPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="10-2创建shiro-realm-ini文件，配置自定义的realm，将realm设置到securityManager中，因为之前已经配置过，该步骤可以省略"><a href="#10-2创建shiro-realm-ini文件，配置自定义的realm，将realm设置到securityManager中，因为之前已经配置过，该步骤可以省略" class="headerlink" title="10.2创建shiro-realm.ini文件，配置自定义的realm，将realm设置到securityManager中，因为之前已经配置过，该步骤可以省略"></a>10.2创建shiro-realm.ini文件，配置自定义的realm，将realm设置到securityManager中，因为之前已经配置过，该步骤可以省略</h4><h4 id="10-3在AuthorizationDemo中添加方法进行测试"><a href="#10-3在AuthorizationDemo中添加方法进行测试" class="headerlink" title="10.3在AuthorizationDemo中添加方法进行测试"></a>10.3在AuthorizationDemo中添加方法进行测试</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//授权</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//准备环境</span>
    IniSecurityManagerFactory iniSecurityManagerFactory <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span><span class="token string">"classpath:shiro-realm.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    SecurityManager securityManager <span class="token operator">=</span> iniSecurityManagerFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取主体</span>
    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//认证</span>
    subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//是否认证成功</span>
    <span class="token keyword">boolean</span> authenticated <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否认证成功："</span><span class="token operator">+</span>authenticated<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//--------认证通过之后进行授权----------</span>
    <span class="token comment" spellcheck="true">//单个角色判断</span>
    <span class="token keyword">boolean</span> role1 <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"role1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"role1："</span><span class="token operator">+</span>role1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//多个角色判断</span>
    <span class="token keyword">boolean</span> allRoles <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">hasAllRoles</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"role1"</span><span class="token punctuation">,</span> <span class="token string">"role2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"role1 + role2："</span><span class="token operator">+</span>allRoles<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//subject.checkRole("role3");//检查是否有当前角色</span>

    <span class="token comment" spellcheck="true">//-------判断权限--------</span>
    <span class="token comment" spellcheck="true">//单个权限判断</span>
    <span class="token keyword">boolean</span> permitted <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"user:create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:create："</span><span class="token operator">+</span>permitted<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//多个权限判断</span>
    <span class="token keyword">boolean</span> permittedAll <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isPermittedAll</span><span class="token punctuation">(</span><span class="token string">"user:create"</span><span class="token punctuation">,</span> <span class="token string">"user:update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:create + user:update："</span><span class="token operator">+</span>permittedAll<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//subject.checkPermissions("user:query", "user:add");</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="10-4-授权流程"><a href="#10-4-授权流程" class="headerlink" title="10.4 授权流程"></a>10.4 授权流程</h4><blockquote>
<p>1、对subject进行授权，调用方法isPermitted（”permission串”）<br>2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权<br>3、ModularRealmAuthorizer执行realm（自定义的Realm）从数据库查询权限数据，调用realm的doGetAuthorizationInfo授权方法<br>4、realm从数据库查询权限数据，返回ModularRealmAuthorizer<br>5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对<br>6、如果比对后，isPermitted中”permission串”在realm查询到权限数据中，说明用户访问permission串有权限，否则 没有权限，抛出异常。</p>
</blockquote>
<h3 id="十一、SpringBoot整合Shiro"><a href="#十一、SpringBoot整合Shiro" class="headerlink" title="十一、SpringBoot整合Shiro"></a>十一、SpringBoot整合Shiro</h3><hr>
<h4 id="11-1导入依赖"><a href="#11-1导入依赖" class="headerlink" title="11.1导入依赖"></a>11.1导入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="11-2配置application-yml"><a href="#11-2配置application-yml" class="headerlink" title="11.2配置application.yml"></a>11.2配置application.yml</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>
  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>
    <span class="token key atrule">session</span><span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true">#去除访问路径后携带sessionid</span>
      <span class="token key atrule">tracking-modes</span><span class="token punctuation">:</span> cookie

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/shiro<span class="token punctuation">?</span>serverTimezone=Asia/Shanghai<span class="token important">&amp;characterEncoding</span>=utf8
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
  <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>
    <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">prefix</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/templates
    <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .html
    <span class="token key atrule">encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>
    <span class="token key atrule">mode</span><span class="token punctuation">:</span> HTML5
    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>
      <span class="token key atrule">content-type</span><span class="token punctuation">:</span> text/html

<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*.xml
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl
    <span class="token comment" spellcheck="true">#驼峰形式</span>
    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="11-3编写ShiroRealm"><a href="#11-3编写ShiroRealm" class="headerlink" title="11.3编写ShiroRealm"></a>11.3编写ShiroRealm</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>realm<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationToken<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>AuthorizationInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>realm<span class="token punctuation">.</span>AuthorizingRealm<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>PrincipalCollection<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="11-4编写ShiroConfig"><a href="#11-4编写ShiroConfig" class="headerlink" title="11.4编写ShiroConfig"></a>11.4编写ShiroConfig</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> at<span class="token punctuation">.</span>pollux<span class="token punctuation">.</span>thymeleaf<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>dialect<span class="token punctuation">.</span>ShiroDialect<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>qf<span class="token punctuation">.</span>realm<span class="token punctuation">.</span>ShiroRealm<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultSecurityManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SecurityManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>ShiroFilterFactoryBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>CookieRememberMeManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultWebSecurityManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>SimpleCookie<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> ShiroRealm <span class="token function">getShiroRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//安全管理对象</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> SecurityManager <span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span><span class="token function">getShiroRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">//Shiro过滤器配置</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">getShiroFilterFactoryBean</span><span class="token punctuation">(</span>SecurityManager securityManager<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//创建Shiro工厂对象</span>
        ShiroFilterFactoryBean shiroFilterFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置安全管理器</span>
        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//未认证访问页面</span>
        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//认证成功跳转页面（一般不设置，默认登录成功跳转当前页面）</span>
        <span class="token comment" spellcheck="true">//shiroFilterFactoryBean.setSuccessUrl("/index");</span>
        <span class="token comment" spellcheck="true">//未授权访问页面</span>
        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">"/refuse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过map配置访问流程（顺序很重要）</span>
        LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置静态资源</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/js/**"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/css/**"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/jquery/**"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/layui/**"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置login页面</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置logout退出</span>
        <span class="token comment" spellcheck="true">//map.put("/logout","logout");</span>
        <span class="token comment" spellcheck="true">//配置授权</span>
        <span class="token comment" spellcheck="true">//map.put("/delete","perms[user:delete]");</span>
        <span class="token comment" spellcheck="true">//map.put("/select","perms[user:select]");</span>

        <span class="token comment" spellcheck="true">//user设置记住我（二次登录不做认证操作）</span>
        <span class="token comment" spellcheck="true">//map.put("/index","user");</span>

        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该路径认证后才能访问</span>
        <span class="token comment" spellcheck="true">//map.put("/**","anon");//所有路径都可以匿名访问</span>

        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<table>
<thead>
<tr>
<th>过滤器简称</th>
<th>对应的java类</th>
</tr>
</thead>
<tbody><tr>
<td>anon</td>
<td>org.apache.shiro.web.filter.authc.AnonymousFilter</td>
</tr>
<tr>
<td>authc</td>
<td>org.apache.shiro.web.filter.authc.FormAuthenticationFilter</td>
</tr>
<tr>
<td>authcBasic</td>
<td>org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</td>
</tr>
<tr>
<td>perms</td>
<td>org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</td>
</tr>
<tr>
<td>port</td>
<td>org.apache.shiro.web.filter.authz.PortFilter</td>
</tr>
<tr>
<td>rest</td>
<td>org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</td>
</tr>
<tr>
<td>roles</td>
<td>org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</td>
</tr>
<tr>
<td>ssl</td>
<td>org.apache.shiro.web.filter.authz.SslFilter</td>
</tr>
<tr>
<td>user</td>
<td>org.apache.shiro.web.filter.authc.UserFilter</td>
</tr>
<tr>
<td>logout</td>
<td>org.apache.shiro.web.filter.authc.LogoutFilter</td>
</tr>
</tbody></table>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">anon：admins<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>anon 没有参数，表示可以匿名使用。
authc：<span class="token operator">/</span>admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>authc表示需要认证<span class="token punctuation">(</span>登录<span class="token punctuation">)</span>才能使用，FormAuthenticationFilter是表单认证，没有参数 

roles：<span class="token operator">/</span>admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>roles<span class="token punctuation">[</span>admin<span class="token punctuation">]</span><span class="token punctuation">,</span>参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>roles<span class="token punctuation">[</span><span class="token string">"admin,guest"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>每个参数通过才算通过，相当于<span class="token function">hasAllRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法。

perms：<span class="token operator">/</span>admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>perms<span class="token punctuation">[</span>user<span class="token operator">:</span>add<span class="token operator">:</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token punctuation">,</span>参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如<span class="token operator">/</span>admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>perms<span class="token punctuation">[</span><span class="token string">"user:add:*,user:modify:*"</span><span class="token punctuation">]</span>，当有多个参数时必须每个参数都通过才通过，想当于<span class="token function">isPermitedAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法。

rest：<span class="token operator">/</span>admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>rest<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">,</span>根据请求的方法，相当于<span class="token operator">/</span>admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>perms<span class="token punctuation">[</span>user<span class="token operator">:</span>method<span class="token punctuation">]</span> <span class="token punctuation">,</span>其中method为post，get，delete等。

port：<span class="token operator">/</span>admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>port<span class="token punctuation">[</span><span class="token number">8081</span><span class="token punctuation">]</span><span class="token punctuation">,</span>当请求的url的端口不是<span class="token number">8081</span>是跳转到schemal：<span class="token comment" spellcheck="true">//serverName:8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。</span>

authcBasic：例如<span class="token operator">/</span>admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>authcBasic没有参数表示httpBasic认证

ssl：<span class="token operator">/</span>admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>ssl没有参数，表示安全的url请求，协议为https

user：<span class="token operator">/</span>admins<span class="token operator">/</span>user<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*=</span>user没有参数表示必须存在用户<span class="token punctuation">,</span> 身份认证通过或通过记住我认证通过的可以访问，当登入操作时不做检查
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>anon，authcBasic，authc，user是认证过滤器</p>
<p>perms，roles，ssl，rest，port是授权过滤器</p>
</blockquote>
<h4 id="11-5创建controller"><a href="#11-5创建controller" class="headerlink" title="11.5创建controller"></a>11.5创建controller</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>


<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>SecurityUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>IncorrectCredentialsException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>UnknownAccountException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>UsernamePasswordToken<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>Subject<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"toLogin"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">toLgoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"/login"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"/login"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"refuse"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">refuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"refuse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"/refuse"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"/index"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"/add"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"/select"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"/delete"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//    @RequestMapping("logout")</span>
<span class="token comment" spellcheck="true">//    public String logout()&amp;#123;</span>
<span class="token comment" spellcheck="true">//        System.out.println("logout");</span>
<span class="token comment" spellcheck="true">//        Subject subject = SecurityUtils.getSubject();</span>
<span class="token comment" spellcheck="true">//        subject.logout();</span>
<span class="token comment" spellcheck="true">//        return "/login";</span>
<span class="token comment" spellcheck="true">//    &amp;#125;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>启动工程，进行测试</p>
</blockquote>
<h4 id="11-6编写对应的login-html页面（以及其他页面）"><a href="#11-6编写对应的login-html页面（以及其他页面）" class="headerlink" title="11.6编写对应的login.html页面（以及其他页面）"></a>11.6编写对应的login.html页面（以及其他页面）</h4><blockquote>
<p>login.html</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>refuse.html</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>拒绝访问！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>index.html</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>主页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查询用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>add.html</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>select.html</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>查询用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>delete.html</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>删除用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="11-7实现用户认证，修改UserController中的login方法"><a href="#11-7实现用户认证，修改UserController中的login方法" class="headerlink" title="11.7实现用户认证，修改UserController中的login方法"></a>11.7实现用户认证，修改UserController中的login方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

    subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> authenticated <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"/index"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"/login"</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="11-8修改ShiroRealm中的AuthenticationInfo方法"><a href="#11-8修改ShiroRealm中的AuthenticationInfo方法" class="headerlink" title="11.8修改ShiroRealm中的AuthenticationInfo方法"></a>11.8修改ShiroRealm中的AuthenticationInfo方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken token<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//身份信息，用户名</span>
        String principal <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//凭证信息，密码</span>
        String credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>token<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>credentials<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//判断</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span>credentials<span class="token punctuation">,</span><span class="token string">"ShiroRealm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>访问路径进行测试即可！</p>
</blockquote>
<h4 id="11-9实现用户授权，在ShiroConfig中的shiroFilter方法中添加被授权的信息"><a href="#11-9实现用户授权，在ShiroConfig中的shiroFilter方法中添加被授权的信息" class="headerlink" title="11.9实现用户授权，在ShiroConfig中的shiroFilter方法中添加被授权的信息"></a>11.9实现用户授权，在ShiroConfig中的shiroFilter方法中添加被授权的信息</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置授权</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">,</span><span class="token string">"perms[user:delete]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/select"</span><span class="token punctuation">,</span><span class="token string">"perms[user:select]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>配置之后重启项目，访问该资源路径时则无法访问，此时需要配置授权信息</p>
</blockquote>
<h4 id="11-10修改ShiroRealm中的doGetAuthorizationInfo方法"><a href="#11-10修改ShiroRealm中的doGetAuthorizationInfo方法" class="headerlink" title="11.10修改ShiroRealm中的doGetAuthorizationInfo方法"></a>11.10修改ShiroRealm中的doGetAuthorizationInfo方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principals<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    SimpleAuthorizationInfo simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"user:select"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"user:update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addStringPermissions</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>然后重启项目，再次访问相应授权路径页面</p>
</blockquote>
<h4 id="11-11Shiro整合thymleaf标签"><a href="#11-11Shiro整合thymleaf标签" class="headerlink" title="11.11Shiro整合thymleaf标签"></a>11.11Shiro整合thymleaf标签</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="11-12在ShiroConfig中添加该方法"><a href="#11-12在ShiroConfig中添加该方法" class="headerlink" title="11.12在ShiroConfig中添加该方法"></a>11.12在ShiroConfig中添加该方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> ShiroDialect <span class="token function">getShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="11-13修改index-html页面中测试"><a href="#11-13修改index-html页面中测试" class="headerlink" title="11.13修改index.html页面中测试"></a>11.13修改index.html页面中测试</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>主页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查询用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>启动工程，再次进行测试即可</p>
</blockquote>
<h4 id="11-14实现用户退出（两种方式），在相关index-html页面中添加超链接"><a href="#11-14实现用户退出（两种方式），在相关index-html页面中添加超链接" class="headerlink" title="11.14实现用户退出（两种方式），在相关index.html页面中添加超链接"></a>11.14实现用户退出（两种方式），在相关index.html页面中添加超链接</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="11-15在ShiroConfig中的shiroFilter方法中添加退出配置（第一种）"><a href="#11-15在ShiroConfig中的shiroFilter方法中添加退出配置（第一种）" class="headerlink" title="11.15在ShiroConfig中的shiroFilter方法中添加退出配置（第一种）"></a>11.15在ShiroConfig中的shiroFilter方法中添加退出配置（第一种）</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置退出</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">,</span><span class="token string">"logout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="11-16在UserController中添加logout方法（第二种）"><a href="#11-16在UserController中添加logout方法（第二种）" class="headerlink" title="11.16在UserController中添加logout方法（第二种）"></a>11.16在UserController中添加logout方法（第二种）</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"logout"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"/login"</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="11-17记住我rememberMe，在login-html页面中添加记住我"><a href="#11-17记住我rememberMe，在login-html页面中添加记住我" class="headerlink" title="11.17记住我rememberMe，在login.html页面中添加记住我"></a>11.17记住我rememberMe，在login.html页面中添加记住我</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rememberMe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>记住我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="11-18在UserController中的login方法配置rememberMe参数"><a href="#11-18在UserController中的login方法配置rememberMe参数" class="headerlink" title="11.18在UserController中的login方法配置rememberMe参数"></a>11.18在UserController中的login方法配置rememberMe参数</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span><span class="token keyword">boolean</span> rememberMe<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span>rememberMe<span class="token punctuation">)</span><span class="token punctuation">;</span>

    subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> authenticated <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"/index"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"/login"</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="11-19在ShiroConfig类中添加相关方法以及代码"><a href="#11-19在ShiroConfig类中添加相关方法以及代码" class="headerlink" title="11.19在ShiroConfig类中添加相关方法以及代码"></a>11.19在ShiroConfig类中添加相关方法以及代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> at<span class="token punctuation">.</span>pollux<span class="token punctuation">.</span>thymeleaf<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>dialect<span class="token punctuation">.</span>ShiroDialect<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>qf<span class="token punctuation">.</span>realm<span class="token punctuation">.</span>ShiroRealm<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultSecurityManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SecurityManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>ShiroFilterFactoryBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>CookieRememberMeManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultWebSecurityManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>SimpleCookie<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> CookieRememberMeManager <span class="token function">getCookieRememberMeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        SimpleCookie simpleCookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCookie</span><span class="token punctuation">(</span><span class="token string">"renemberMe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        simpleCookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        CookieRememberMeManager cookieRememberMeManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookieRememberMeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cookieRememberMeManager<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span>simpleCookie<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> cookieRememberMeManager<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> ShiroRealm <span class="token function">getShiroRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> SecurityManager <span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span><span class="token function">getShiroRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        securityManager<span class="token punctuation">.</span><span class="token function">setRememberMeManager</span><span class="token punctuation">(</span><span class="token function">getCookieRememberMeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//配置ShiroDialect</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> ShiroDialect <span class="token function">getShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//shiro过滤器配置</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">getShiroFilterFactoryBean</span><span class="token punctuation">(</span>SecurityManager securityManager<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ShiroFilterFactoryBean shiroFilterFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//未认证访问页面</span>
        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//认证成功跳转页面（一般不设置，默认登录成功跳转当前页面）</span>
        <span class="token comment" spellcheck="true">//shiroFilterFactoryBean.setSuccessUrl("/index");</span>
        <span class="token comment" spellcheck="true">//未授权访问页面</span>
        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">"/refuse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过map配置访问流程（顺序很重要）</span>
        LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置静态资源</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/js/**"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/css/**"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/jquery/**"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/layui/**"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置login页面</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置logout退出</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">,</span><span class="token string">"logout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//配置授权</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">,</span><span class="token string">"perms[user:delete]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/select"</span><span class="token punctuation">,</span><span class="token string">"perms[user:select]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//user设置记住我（二次登录不做认证操作）</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该路径认证后才能访问</span>
        <span class="token comment" spellcheck="true">//map.put("/**","anon");//所有路径都可以匿名访问</span>

        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><code>ps:</code>登录页面勾选 记住我 进行测试</p>
</blockquote>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础操作（二）</title>
    <url>/Docker%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Docker基础操作和配置"><a href="#Docker基础操作和配置" class="headerlink" title="Docker基础操作和配置"></a>Docker基础操作和配置</h2><p>配置阿里云Docker Yum源</p>
<p>shell</p>
<pre class="line-numbers language-shell"><code class="language-shell"># yum install -y yum-utils device-mapper-persistent-data lvm2 git
# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>安装指定版本</p>
<p>shell</p>
<pre class="line-numbers language-shell"><code class="language-shell">  查看Docker版本：
# yum list docker-ce --showduplicates
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>安装较旧版本（比如Docker 17.03.2) ：<br>FROM：指定基础镜像<br>MAINTAINER：作者的信息<br>RUN：执行什么命令<br>EXPOSE：容器对外暴露的端口<br>WORKDIR：进入到容器后进入到哪个目录<br>ENV：配置环境变量<br>ADD：将文件拷贝到镜像中并解压<br>COPY：将文件拷贝到镜像中<br>VOLUME：配置数据卷<br>CMD：容器启动时候执行的命令<br>ENTRYPOINT：容器启动时候执行的命令</p>
<p>————————–Dockerfile参考配置———————————</p>
<p>FROM <a href="http://daocloud.io/library/tomcat:8.5.15-jre8">daocloud.io&#x2F;library&#x2F;tomcat:8.5.15-jre8</a> #指定要生成的镜像的基础镜像，开头第一句话必须也只能是FROM<br>COPY music.war &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps #拷贝工程到tomcat指定目录<br>MAINTAINER <a href="mailto:scouture@163.com">scouture@163.com</a> #指定作者是谁<br>RUN mkdir -p &#x2F;datas&#x2F;<br>ADD jdk-8u60-linux-x64.tar.gz &#x2F;datas&#x2F; #将文件拷贝到镜像中并解压<br>ENV JAVA_HOME&#x3D;&#x2F;datas&#x2F;jdk1.8.0_60 #配置JAVA_HOME<br>ENV PATH&#x3D;JAVA_HOME&#x2F;bin:JAVAH​OME&#x2F;bin:PATH #配置PATH<br>WORKDIR &#x2F;dev&#x2F; #启动容器后，如果启动交互模式，直接进入到哪个目录<br>CMD [“&#x2F;bin&#x2F;bash”] #启动容器的时候，进入到&#x2F;bin&#x2F;bash这种命令行</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础操作（一）</title>
    <url>/Docker%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Docker基本命令"><a href="#Docker基本命令" class="headerlink" title="Docker基本命令"></a>Docker基本命令</h2><h3 id="一、Docker的安装"><a href="#一、Docker的安装" class="headerlink" title="一、Docker的安装"></a>一、Docker的安装</h3><hr>
<h4 id="1-1-下载Docker依赖的环境"><a href="#1-1-下载Docker依赖的环境" class="headerlink" title="1.1 下载Docker依赖的环境"></a>1.1 下载Docker依赖的环境</h4><blockquote>
<p>想安装Docker，需要先将依赖的环境全部下载，就像Maven依赖JDK一样</p>
<p>参考：<a href="https://developer.aliyun.com/article/110806">https://developer.aliyun.com/article/110806</a></p>
<p>如果已安装，可以先删除</p>
<p>[root@localhost ~]# yum -y remove docker-ce</p>
</blockquote>
<span id="more"></span>

<pre class="line-numbers language-sh"><code class="language-sh">01[root@localhost local]# yum -y install yum-utils device-mapper-persistent-data lvm2
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="1-2-指定Docker镜像源"><a href="#1-2-指定Docker镜像源" class="headerlink" title="1.2 指定Docker镜像源"></a>1.2 指定Docker镜像源</h4><blockquote>
<p>默认下载Docker回去国外服务器下载，速度较慢，我们可以设置为阿里云镜像源，速度更快</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">01[root@localhost ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="1-3-安装Docker"><a href="#1-3-安装Docker" class="headerlink" title="1.3 安装Docker"></a>1.3 安装Docker</h4><blockquote>
<p>依然采用yum的方式安装</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">0102[root@localhost ~]# yum makecache fast
[root@localhost ~]# yum -y install docker-ce
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="1-4-启动Docker并测试"><a href="#1-4-启动Docker并测试" class="headerlink" title="1.4 启动Docker并测试"></a>1.4 启动Docker并测试</h4><blockquote>
<p>安装成功后，需要手动启动，设置为开机自启，并测试一下Docker</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">01020304# 启动Docker服务
[root@localhost ~]# systemctl start docker
# 测试 hello-world
[root@localhost ~]# docker run hello-world
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注：关闭防火墙之后docker需要重启</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">01[root@localhost ~]#service docker restart
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="二、Docker的中央仓库"><a href="#二、Docker的中央仓库" class="headerlink" title="二、Docker的中央仓库"></a>二、Docker的中央仓库</h3><hr>
<blockquote>
<ul>
<li><p>Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度较慢。</p>
<p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
</li>
<li><p>国内的镜像网站：网易蜂巢，daoCloud等，下载速度快，但是镜像相对不全。</p>
<p><a href="https://c.163yun.com/hub#/home">https://c.163yun.com/hub#/home</a></p>
<p><a href="http://hub.daocloud.io/">http://hub.daocloud.io/</a> （推荐使用）</p>
</li>
<li><p>在公司内部会采用私服的方式拉取镜像，需要添加配置，如下……</p>
<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-json"><code class="language-json"><span class="token number">0102030405060708</span># 需要创建/etc/docker/daemon.json，并添加如下内容
&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ip:port"</span><span class="token punctuation">]</span>   
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
# 重启两个服务
systemctl daemon-rd9oeload
systemctl restart docker
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="三、镜像的操作【重点】"><a href="#三、镜像的操作【重点】" class="headerlink" title="三、镜像的操作【重点】"></a>三、镜像的操作【<code>重点</code>】</h3><hr>
<h4 id="3-1-拉取镜像"><a href="#3-1-拉取镜像" class="headerlink" title="3.1 拉取镜像"></a>3.1 拉取镜像</h4><blockquote>
<p>从中央仓库拉取镜像到本地</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">010203docker pull 镜像名称[:tag]

[root@localhost ~]# docker pull daocloud.io/library/tomcat:8.5.15-jre8
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="3-2-查看本地全部镜像"><a href="#3-2-查看本地全部镜像" class="headerlink" title="3.2 查看本地全部镜像"></a>3.2 查看本地全部镜像</h4><blockquote>
<p>查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">01[root@localhost ~]# docker images
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="3-3-删除本地镜像"><a href="#3-3-删除本地镜像" class="headerlink" title="3.3 删除本地镜像"></a>3.3 删除本地镜像</h4><blockquote>
<p>镜像会占用磁盘空间，可以直接手动删除，表示通过查看获取</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">010203docker rmi 镜像的标识（需要先删除该镜像创建的容器，删除容器需要先停止容器）

[root@localhost ~]# docker rmi b8dfe9ade316
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="四、容器操作【重点】"><a href="#四、容器操作【重点】" class="headerlink" title="四、容器操作【重点】"></a>四、容器操作【<code>重点</code>】</h3><hr>
<h4 id="4-1-运行容器"><a href="#4-1-运行容器" class="headerlink" title="4.1 运行容器"></a>4.1 运行容器</h4><blockquote>
<p>运行容器需要制定具体镜像，如果镜像不存在，会直接下载</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh"># 简单操作
docker run 镜像的标识|镜像名称[:tag]

# 常用的参数
docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]
# -d：代表后台运行容器
# -p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口
# --name 容器名称：指定容器的名称(自定义)

[root@localhost ~]# docker run -d -p 8888:8080 --name mytomcat8.5 b8dfe9ade316

# 测试：浏览器访问：虚拟机ip:8888（访问之前需要关闭防火墙以及开放安全组中的对应端口号）
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-2-查看正在运行的容器"><a href="#4-2-查看正在运行的容器" class="headerlink" title="4.2 查看正在运行的容器"></a>4.2 查看正在运行的容器</h4><blockquote>
<p>查看全部正在运行的容器信息</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">docker ps [-qa]
# -a：查看全部的容器，包括没有运行
# -q：只查看容器的标识

[root@localhost ~]# docker ps
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-3-查看容器日志"><a href="#4-3-查看容器日志" class="headerlink" title="4.3 查看容器日志"></a>4.3 查看容器日志</h4><blockquote>
<p>查看容器日志，以查看容器运行的信息</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">01020304docker logs -f 容器id
# -f：可以滚动查看日志的最后几行

[root@localhost ~]# docker logs -f 4411f56f1fbb
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-4-进入容器内部"><a href="#4-4-进入容器内部" class="headerlink" title="4.4 进入容器内部"></a>4.4 进入容器内部</h4><blockquote>
<p>可以进入容器内部进行操作</p>
</blockquote>
<p>sh</p>
<pre class="line-numbers language-sh"><code class="language-sh">docker exec -it 容器id bash

[root@localhost ~]# docker exec -it 4411f56f1fbb bash

# 退出当前容器 exit
root@4411f56f1fbb:/usr/local/tomcat# exit
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-5-复制内容到容器"><a href="#4-5-复制内容到容器" class="headerlink" title="4.5 复制内容到容器"></a>4.5 复制内容到容器</h4><blockquote>
<p>将宿主机的文件复制到容器内部的指定目录</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">01020304050607docker cp 文件名称 容器id:容器内部路径

# 把主机root目录下的a.txt文件拷贝到容器的temp目录下（由于tomcat默认路径在/usr/local/tomcat）
[root@localhost ~]# docker cp /root/a.txt 441:/usr/local/tomcat/temp

# 把容器的temp目录下的a.txt拷贝到主机root目录下
[root@localhost ~]# docker cp 441:/usr/local/tomcat/temp/a.txt /root
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-6-重启-启动-停止-删除容器"><a href="#4-6-重启-启动-停止-删除容器" class="headerlink" title="4.6 重启&amp;启动&amp;停止&amp;删除容器"></a>4.6 重启&amp;启动&amp;停止&amp;删除容器</h4><blockquote>
<p>容器的启动，停止，删除等操作，后续经常会使用到</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">0102030405060708091011121314151617# 重新启动容器
[root@localhost ~]# docker restart 容器id

# 启动停止运行的容器
[root@localhost ~]# docker start 容器id

# 停止指定的容器（删除容器前，需要先停止容器）
[root@localhost ~]# docker stop 容器id

# 停止全部容器
[root@localhost ~]# docker stop $(docker ps -qa)

# 删除指定容器
[root@localhost ~]# docker rm 容器id

# 删除全部容器
[root@localhost ~]# docker rm $(docker ps -qa)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（一）</title>
    <url>/Spring%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><blockquote>
<p>官网：<a href="https://spring.io/">https://spring.io/</a></p>
</blockquote>
<blockquote>
<p>Spring 让每个人都可以更快、更轻松、更安全地编写 Java。Spring 对速度、简单性和生产力的关注使其成为<a href="https://snyk.io/blog/jvm-ecosystem-report-2018-platform-application/">世界上最受欢迎的</a>Java 框架。</p>
</blockquote>
<blockquote>
<p>我们使用了 Spring 框架附带的许多工具，并获得了许多开箱即用的解决方案所带来的好处，并且不必担心编写大量额外的代码——这确实为我们节省了一些时间和能量。</p>
</blockquote>
<span id="more"></span>
<h3 id="2-特征"><a href="#2-特征" class="headerlink" title="2.特征"></a>2.特征</h3><blockquote>
<ul>
<li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html">核心技术</a>：依赖注入、事件、资源、i18n、验证、数据绑定、类型转换、SpEL、AOP。</li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html">测试</a>：模拟对象、TestContext 框架、Spring MVC 测试、<code>WebTestClient</code>.</li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/data-access.html">数据访问</a>：事务、DAO 支持、JDBC、ORM、编组 XML。</li>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html">Spring MVC</a>和 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html">Spring WebFlux</a> Web 框架。</li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/integration.html">集成</a>：远程处理、JMS、JCA、JMX、电子邮件、任务、调度、缓存。</li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/languages.html">语言</a>：Kotlin、Groovy、动态语言。</li>
</ul>
</blockquote>
<h3 id="3-核心技术"><a href="#3-核心技术" class="headerlink" title="3.核心技术"></a>3.核心技术</h3><blockquote>
<p>IOC：控制反转，将对象的创建权交给了Spring去管理</p>
<p>DI：依赖注入，把数据给创建好的对象中的属性进行赋值</p>
<p>AOP：面向切面编程，底层是代理模式</p>
</blockquote>
<h3 id="4-Bean的创建"><a href="#4-Bean的创建" class="headerlink" title="4.Bean的创建"></a>4.Bean的创建</h3><blockquote>
<p><code>org.springframework.beans</code>和<code>org.springframework.context</code>包是 Spring Framework 的 IoC 容器的基础。该 <a href="https://docs.spring.io/spring-framework/docs/5.3.20/javadoc-api/org/springframework/beans/factory/BeanFactory.html"><code>BeanFactory</code></a> 接口提供了一种高级配置机制，能够管理任何类型的对象。 <a href="https://docs.spring.io/spring-framework/docs/5.3.20/javadoc-api/org/springframework/context/ApplicationContext.html"><code>ApplicationContext</code></a> 是 <code>BeanFactory</code>的子接口。它补充说：</p>
<ul>
<li>更容易与 Spring 的 AOP 功能集成</li>
<li>消息资源处理（用于国际化）</li>
<li>活动发布</li>
<li>应用层特定上下文，例如<code>WebApplicationContext</code> 用于 Web 应用程序的上下文。</li>
</ul>
</blockquote>
<blockquote>
<p><code>org.springframework.context.ApplicationContext</code>接口代表 Spring IoC 容器，负责实例化、配置和组装 bean。</p>
</blockquote>
<h4 id="4-1无参构造创建"><a href="#4-1无参构造创建" class="headerlink" title="4.1无参构造创建"></a>4.1无参构造创建</h4><blockquote>
<p>导入依赖</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring核心依赖 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>创建User实体类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>coutrue<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * User实体类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>编写applicationContext.xml配置文件</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--
    该id属性是标识单个 bean 定义的字符串。(不能重复)
    该class属性定义 bean 的类型并使用完全限定的类名。
    --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.coutrue.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>编写测试类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 测试类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//需要加载配置文件</span>
        ApplicationContext applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//根据bean标签中的id属性值，获取bean对象</span>
        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-2工厂创建"><a href="#4-2工厂创建" class="headerlink" title="4.2工厂创建"></a>4.2工厂创建</h4><blockquote>
<p>创建工厂类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factory<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 通过实例方法获取User对象
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 获取 User 对象
     * @return
     */</span>
    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//return new User();</span>

        <span class="token comment" spellcheck="true">//反射 + 配置文件</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span>  <span class="token punctuation">(</span>User<span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.qf.pojo.User"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//return null;</span>
        <span class="token comment" spellcheck="true">//手动抛异常</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"创建User对象异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">/**
     * 通过静态方法获取 User 对象
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> User <span class="token function">getUserStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//return new User();</span>

        <span class="token comment" spellcheck="true">//反射 + 配置文件</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span>  <span class="token punctuation">(</span>User<span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.qf.pojo.User"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//return null;</span>
        <span class="token comment" spellcheck="true">//手动抛异常</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"创建User对象异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>配置applicationContext.xml</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--
    该id属性是标识单个 bean 定义的字符串。(不能重复)
    该class属性定义 bean 的类型并使用完全限定的类名。
    --></span>
<span class="token comment" spellcheck="true">&lt;!--    &lt;bean id = "user" class = "com.coutrue.pojo.User">--></span>
<span class="token comment" spellcheck="true">&lt;!--    &lt;/bean>--></span>

    <span class="token comment" spellcheck="true">&lt;!-- 工厂中的实例方法创建Bean --></span>
<span class="token comment" spellcheck="true">&lt;!--    &lt;bean id = "userFactoryBean" class = "com.coutrue.factory.UserFactory">&lt;/bean>--></span>
<span class="token comment" spellcheck="true">&lt;!--    &lt;bean id = "user" factory-bean="userFactoryBean" factory-method="getUser">&lt;/bean>--></span>

    <span class="token comment" spellcheck="true">&lt;!-- 工厂中的静态方法创建Bean --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.coutrue.factory.UserFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserStatic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-3简单工厂模式"><a href="#4-3简单工厂模式" class="headerlink" title="4.3简单工厂模式"></a>4.3简单工厂模式</h4><blockquote>
<p>Car</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>simplefactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Car 接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 提供 run 方法
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>simplefactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Car 实现类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaoSJ</span>  <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保时捷在飞驰..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>simplefactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Car 的实现类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FaLL</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"法拉利在飞驰..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>java</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>simplefactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 简单工厂模式：代码集中，不符合 OCP 原则（ open - close ）：对代码的扩展是开放的，对代码的修改是关闭的
 * 车工厂
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//提供创建保时捷的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> BaoSJ <span class="token function">creatBaoSJ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>BaoSJ<span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.coutrue.factorymode.simplefactory.BaoSJ"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//提供创建法拉利的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> FaLL <span class="token function">creatFaLL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>FaLL<span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.coutrue.factorymode.simplefactory.FaLL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>simplefactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 测试类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建对象，调用方法</span>
        <span class="token comment" spellcheck="true">//BaoSJ baoSJ = new BaoSJ();</span>
        BaoSJ baoSJ <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">creatBaoSJ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        baoSJ<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建对象，调用方法</span>
        <span class="token comment" spellcheck="true">//FaLL faLL = new FaLL();</span>
        FaLL faLL <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">creatFaLL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        faLL<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-4抽象工厂模式"><a href="#4-4抽象工厂模式" class="headerlink" title="4.4抽象工厂模式"></a>4.4抽象工厂模式</h4><blockquote>
<p>Car</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>abstractfactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Car 接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 提供 run 方法
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>abstractfactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Car 实现类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaoSJ</span>  <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保时捷在飞驰..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>abstractfactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Car 的实现类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FaLL</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"法拉利在飞驰..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>CarFactory</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>abstractfactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 抽象工厂模式：符合开闭原则
 * 车工厂
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 创建车的方法
     * @return
     */</span>
    <span class="token keyword">public</span> Car <span class="token function">createCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>abstractfactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 保时捷的车工厂
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaoSJFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 创建保时捷车
     * @return
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Car <span class="token function">createCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>BaoSJ<span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.qf.factorymode.abstractfactory.BaoSJ"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>abstractfactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 法拉利车工厂
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FaLLFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Car <span class="token function">createCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>FaLL<span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.qf.factorymode.abstractfactory.FaLL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>factorymode<span class="token punctuation">.</span>abstractfactory<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 测试类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建对象，调用方法</span>
        BaoSJFactory baoSJFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaoSJFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Car baoSJ <span class="token operator">=</span> baoSJFactory<span class="token punctuation">.</span><span class="token function">createCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        baoSJ<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建对象，调用方法</span>
        FaLLFactory faLLFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FaLLFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Car faLL <span class="token operator">=</span> faLLFactory<span class="token punctuation">.</span><span class="token function">createCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        faLL<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-Bean的作用范围"><a href="#5-Bean的作用范围" class="headerlink" title="5.Bean的作用范围"></a>5.Bean的作用范围</h3><h5 id="5-1scope属性"><a href="#5-1scope属性" class="headerlink" title="5.1scope属性"></a>5.1scope属性</h5><blockquote>
<p>bean标签的scope属性：指定当前bean的作用范围</p>
<p>取值：</p>
<p>singleton：单例（ 默认值 ）</p>
<p>prototype：多例</p>
<p>request：作用于Web应用的请求范围</p>
<p>session：作用于Web应用的会话范围</p>
<p>global-session：作用于集群环境Web应用的会话范围（全局会话）</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--
    该id属性是标识单个 bean 定义的字符串。(不能重复)
    该class属性定义 bean 的类型并使用完全限定的类名。
    scope：常用的是单例（singleton）和多例（prototype）
--></span>
&lt;bean id = "user" class = "com.couture.pojo.User" scope="prototype">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="5-2单例模式-懒汉式"><a href="#5-2单例模式-懒汉式" class="headerlink" title="5.2单例模式-懒汉式"></a>5.2单例模式-懒汉式</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>singletonmode<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 单例模式：懒汉式（在第一次调用的时候实例化自己）
 * 优势：第一次调用才会初始化，避免内存消耗
 * 劣势：必须加锁才能保证单例，加锁会影响效率
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazy</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//构造器私有化</span>
    <span class="token keyword">private</span> <span class="token function">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//声明对象</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonLazy singletonLazy <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//实例化，线程安全</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> SingletonLazy <span class="token function">getSingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//判断</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> singletonLazy<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            singletonLazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> singletonLazy<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="5-3单例模式-饿汉式"><a href="#5-3单例模式-饿汉式" class="headerlink" title="5.3单例模式-饿汉式"></a>5.3单例模式-饿汉式</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>singletonmode<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 饿汉式：比较常用，容易产生垃圾（ GC回收 ）
 * 优势：没有加锁，效率会提高
 * 劣势：类加载时就进行初始化，消耗内存
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHungry</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//私有化构造器</span>
    <span class="token keyword">private</span> <span class="token function">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//实例化</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonHungry singletonHungry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonHungry <span class="token function">getSingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> singletonHungry<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="5-4单例模式-双重校验锁"><a href="#5-4单例模式-双重校验锁" class="headerlink" title="5.4单例模式-双重校验锁"></a>5.4单例模式-双重校验锁</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>singletonmode<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 双重校验锁
 * 优势：安全，在多线程情况下保证较高的性能
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLock</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//构造器私有化</span>
    <span class="token keyword">private</span> <span class="token function">SingletonLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//声明</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonLock singletonLock <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//实例化方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLock <span class="token function">getSingletonLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//先检查当前实例是否为空，如果不存在再进行同步</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> singletonLock<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//同步</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SingletonLock<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//再次检查当前实例是否为空</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> singletonLock<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//返回</span>
                    singletonLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> singletonLock<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="6-Bean生命周期"><a href="#6-Bean生命周期" class="headerlink" title="6.Bean生命周期"></a>6.Bean生命周期</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--
    该id属性是标识单个 bean 定义的字符串。(不能重复)
    该class属性定义 bean 的类型并使用完全限定的类名。
    scope：常用的是单例（singleton）和多例（prototype）
    init-method：创建对象后执行的初始化方法
    destroy-method：对象销毁后执行（如果是多例模式下不执行）
    --></span>
&lt;bean id = "user" class = "com.couture.pojo.User"
      scope="singleton" init-method="initUser" destroy-method="destroyUser">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * User实体类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 初始化方法，创建对象后执行
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User 初始化方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 销毁方法，销毁spring容器中对象后执行
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User 销毁方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 测试生命周期相关方法
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//创建ClassPathXmlApplicationContext对象</span>
    ClassPathXmlApplicationContext applicationContext
        <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//获取对象</span>
    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//关闭</span>
    applicationContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-依赖注入"><a href="#7-依赖注入" class="headerlink" title="7.依赖注入"></a>7.依赖注入</h3><blockquote>
<p>DI：Dependency Injection：给创建对象中的属性赋值</p>
</blockquote>
<blockquote>
<p>IOC作用：降低程序间耦合（依赖关系）</p>
<p>依赖关系维护：以后都交给Spring进行管理</p>
</blockquote>
<blockquote>
<p>可注入类型：</p>
<p>基本数据类型以及包装类</p>
<p>String类</p>
<p>类类型（ 其他Bean类型 ）</p>
<p>复杂类型：集合，数组…</p>
</blockquote>
<h4 id="7-1set方法注入"><a href="#7-1set方法注入" class="headerlink" title="7.1set方法注入"></a>7.1set方法注入</h4><blockquote>
<p>applicationContext.xml配置文件</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 初始化一个Car对象 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstCar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.couture.pojo.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20001<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>保时捷<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--
    该id属性是标识单个 bean 定义的字符串。(不能重复)
    该class属性定义 bean 的类型并使用完全限定的类名。
    --></span>
    &lt;bean id = "user" class = "com.coutrue.pojo.User">
        <span class="token comment" spellcheck="true">&lt;!-- set方法赋值
        property表示当前对象的属性
        name：属性名
        value：给当前属性赋值
        ref：用于注入其他Bean对象（在spring容器中已经创建了）
        --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstCar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>实体类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer cid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String cname<span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Car car<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>qf<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 测试类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//加载配置文件</span>
        ApplicationContext applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建Bean</span>
        User user <span class="token operator">=</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//输出</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="7-2复杂类型注入"><a href="#7-2复杂类型注入" class="headerlink" title="7.2复杂类型注入"></a>7.2复杂类型注入</h4><blockquote>
<p>1.注入数组对应的标签：array</p>
<p>2.注入LIst以及Set集合的标签：list，set</p>
<p>3.注入Map以及Propertis的标签：map，properties</p>
</blockquote>
<blockquote>
<p>创建实体类CollectionVo</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>vo<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 数组以及集合类型的属性注入
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionVo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>
    <span class="token keyword">private</span> List list<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Set set<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Map map<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Properties properties<span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>在applicationContext.xml文件中添加内容</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 复杂类型注入 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collectionVo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.coutrue.vo.CollectionVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 数组 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- List --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>rose<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- Set --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- Map --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstCar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- Properties --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql:///db_name?serverTimezone=Asia/Shanghai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.cj.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 测试复杂类型注入
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCollectionVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//加载配置文件</span>
    ApplicationContext applicationContext <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//创建Bean</span>
    CollectionVo collectionVo <span class="token operator">=</span> <span class="token punctuation">(</span>CollectionVo<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"collectionVo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//输出</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collectionVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="7-3构造器注入（-不常用-）"><a href="#7-3构造器注入（-不常用-）" class="headerlink" title="7.3构造器注入（ 不常用 ）"></a>7.3构造器注入（ 不常用 ）</h4><blockquote>
<p>创建Car</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer cid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String cname<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span>Integer cid<span class="token punctuation">,</span> String cname<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cid <span class="token operator">=</span> cid<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cname <span class="token operator">=</span> cname<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>创建User</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Car car<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> Car car<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 把 id 和 name 交换了一下顺序
     * @param name
     * @param id
     * @param password
     * @param car
     */</span>
    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer id<span class="token punctuation">,</span>String password<span class="token punctuation">,</span> Car car<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>配置applicationContext.xml文件</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 初始化一个Car对象，要和类中的构造器器匹配 --></span>
    <span class="token comment" spellcheck="true">&lt;!--
     id和name用法相同
     --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstCar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.couture.pojo.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 构造器注入
        name：获取构造器中指定参数的名称
        value：给构造器中的参数赋值（基本数据类型以及String类型）
        ref：给其他bean类型赋值
        type：指定注入的类型
        index：指定参数的位置，默认从0开始
        --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20001<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>保时捷<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 初始化一个User对象，通过改变 index 来设置通过使用第一个构造器创建对象 --></span>
    &lt;bean id = "user1" class = "com.couture.pojo.User">
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstCar<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 初始化一个User对象，通过改变 index 来设置通过使用第二个构造器创建对象 --></span>
    &lt;bean id = "user2" class = "com.couture.pojo.User">
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1002<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>456<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstCar<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Car<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Car car <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"firstCar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        User user1 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        User user2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="7-4注解注入"><a href="#7-4注解注入" class="headerlink" title="7.4注解注入"></a>7.4注解注入</h4><blockquote>
<p>注意：需要在applicationContext.xml文件中，导入context约束</p>
</blockquote>
<blockquote>
<p>Car</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @Component 将对象放到 spring 容器中，相当于：&lt;bean id = "" class = "" />
 * 如果一个注解的属性默认值是 value，在只使用 value 属性的时候可以省略不写
 * value属性：用于指定 bean 的 id，如果不写，默认值就是当前类名，首字母小写
 * 以下三个注解用法和 @Component 一样，为了区别不同层
 * @Controller：一般用于表现层 （ Web层 ）
 * @Service：一般用于业务逻辑层 （ Service层 ）
 * @Repository：一般用于持久层 （ Dao层 ）
 *
 * @Value 给属性赋值，赋值类型为基本数据类型以及String，可以在属性以及方法上使用
 */</span>
<span class="token comment" spellcheck="true">//@Component("myCar")</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"20001"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Integer cid<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//@Value("保时捷")</span>
    <span class="token keyword">private</span> String cname<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"保时捷"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCname</span><span class="token punctuation">(</span>String cname<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cname <span class="token operator">=</span> cname<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>User</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scope<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PreDestroy<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @Scope 表示当前对象默认单例（ singleton ），可以设置为多例（ prototype ）
 * 相当于 &lt;bean scope = "" />
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"singleton"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * @Autowired 表示自动装配，如果 spring容器中有该类型的对象，则自动注入到当前属性中
     * @Qualifier 和 @Autowired 一起用，指定要注入具体对象的名称，value 属性：指定注入 bean 的 id
     * 如果只有一个对象，只使用 @Autowired，如果有多个同类型的对象，名称不能相同，使用 @Qualifier 选择具体的 Bean
     *
     *  @Resource 是javaEE中的注解，name 属性：通过名称指定注入的 bean，相当于 @Autowired + @Qualifier
     *  @Resource 不常用，如果不生效，则需要导入
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"otherCar"</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//@Resource(name = "otherCar")</span>
    <span class="token keyword">private</span> Car car<span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">/**
     *  @PostConstruct 相当于 &lt;bean init-method = "" /> 表示初始化的方法（ 构造器之后执行 ）
     */</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User 初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *  @PreDestroy 相当于 &lt;bean destroy-method = "" /> 表示销毁的方法 （ 对象销毁之前执行 ）
     */</span>
    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User 销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>applicationContext.xml配置文件</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- bean definitions here --></span>

        <span class="token comment" spellcheck="true">&lt;!-- 扫描对应包下的注解 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.couture<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 初始化一个 Car 对象 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>otherCar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.couture.pojo.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30001<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>法拉利<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>bean.xml</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- bean definitions here --></span>

        <span class="token comment" spellcheck="true">&lt;!-- 导入其他的xml文件--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicationContext.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Car<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 测试初始化 Car 对象相关注解的方法
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Car car <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 测试初始化 User 对象相关注解的方法
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 测试作用范围关注解的方法
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        User user1 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        User user2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 测试生命周期相关注解的方法
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//通过其他配置文件测试</span>
        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//关闭</span>
        applicationContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="8-整合MyBatis-【重点】"><a href="#8-整合MyBatis-【重点】" class="headerlink" title="8.整合MyBatis 【重点】"></a>8.整合MyBatis 【重点】</h3><h5 id="8-1导入依赖"><a href="#8-1导入依赖" class="headerlink" title="8.1导入依赖"></a>8.1导入依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.couture<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- mybatis --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.29<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- spring --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 连接数据库 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- mybatis 整合 spring 所需依赖 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 测试 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-2User类"><a href="#8-2User类" class="headerlink" title="8.2User类"></a>8.2User类</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>coutrue<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-3UserController"><a href="#8-3UserController" class="headerlink" title="8.3UserController"></a>8.3UserController</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>


<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * web层 -> @Controller
 */</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 注入 UserService
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 查询所有用户
     * @return
     */</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-4UserService"><a href="#8-4UserService" class="headerlink" title="8.4UserService"></a>8.4UserService</h5><pre class="line-numbers language-java"><code class="language-java">01020304050607080910111213package com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 查询所有用户
     * @return
     */</span>
    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-5UserServiceImpl"><a href="#8-5UserServiceImpl" class="headerlink" title="8.5UserServiceImpl"></a>8.5UserServiceImpl</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qf<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>coutrue<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>coutrue<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>coutrue<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * service层 -> @Service
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 注入 UserMapper
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 查询所有用户
     * @return
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-6UserMapper"><a href="#8-6UserMapper" class="headerlink" title="8.6UserMapper"></a>8.6UserMapper</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>coutrue<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>coutrue<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * dao层 -> @Repository
 */</span>
<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 查询所有用户
     * @return
     */</span>
    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-7UserMapper-xml"><a href="#8-7UserMapper-xml" class="headerlink" title="8.7UserMapper.xml"></a>8.7UserMapper.xml</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.coutrue.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   
    <span class="token comment" spellcheck="true">&lt;!-- orm映射 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.coutrue.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>
    
    <span class="token comment" spellcheck="true">&lt;!-- sql片段 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseSql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        select id, name, password from t_user
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>
    
    <span class="token comment" spellcheck="true">&lt;!-- 查询所有用户 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseSql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-8db-properties"><a href="#8-8db-properties" class="headerlink" title="8.8db.properties"></a>8.8db.properties</h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">db.username</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span>
<span class="token attr-name">db.password</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span>
<span class="token attr-name">db.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://localhost:3306/java?serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF8</span>
<span class="token attr-name">db.driver</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.cj.jdbc.Driver</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-9log4j-properties"><a href="#8-9log4j-properties" class="headerlink" title="8.9log4j.properties"></a>8.9log4j.properties</h5><p>properties</p>
<pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">Global</span> <span class="token attr-value">logging configuration</span>
<span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG, stdout</span>
<span class="token comment" spellcheck="true"># Console output...</span>
<span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span>
<span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span>
<span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%5p [%t] - %m%n</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-10mybatis-config-xml"><a href="#8-10mybatis-config-xml" class="headerlink" title="8.10mybatis-config.xml"></a>8.10mybatis-config.xml</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置日志 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-11applicationContext-xml"><a href="#8-11applicationContext-xml" class="headerlink" title="8.11applicationContext.xml"></a>8.11applicationContext.xml</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- bean definitions here --></span>

        <span class="token comment" spellcheck="true">&lt;!-- 导入外部配置文件 db.properties --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>property-placeholder</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 配置数据源对象 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 导入 db.properties 中的值--></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;db.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;db.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;db.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;db.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 扫描对应包下的注解 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.coutrue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 配置sqlSessionFactory --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 必选配置 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 非必选属性，根据自己需求去配置 --></span>
            <span class="token comment" spellcheck="true">&lt;!-- 导入 mybatis-config.xml --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 导入 Mapper.xml 文件，classpath后面不能有空格 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 扫描 Mapper 接口，生成代理对象 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperScannerConfigurer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 指定扫描的具体位置 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.coutrue.mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="8-12测试"><a href="#8-12测试" class="headerlink" title="8.12测试"></a>8.12测试</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 测试查询所有用户
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        UserController userController <span class="token operator">=</span> <span class="token punctuation">(</span>UserController<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userController<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="9-数据源配置类"><a href="#9-数据源配置类" class="headerlink" title="9.数据源配置类"></a>9.数据源配置类</h3><blockquote>
<p>用于替换applicationContext.xml中数据源的相关配置</p>
<p>&lt;context:property-placeholder location&#x3D;“classpath:db.properties”&gt;</context:property-placeholder></p>
</blockquote>
<p>java</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>coture<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSourceFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertySource<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @Configuration 表示服务器启动时加载当前类
 * @PropertySource 加载对应的配置文件
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:db.properties"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;db.username&amp;#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;db.password&amp;#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;db.url&amp;#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;db.driver&amp;#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String driverClassName<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 初始化一个 Bean 对象 -> DataSource
     *
     * @Bean 将方法的返回值作为 bean 对象，放到 spring 容器中
     */</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"datasource"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置数据源参数</span>
        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"driverClassName"</span><span class="token punctuation">,</span> driverClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        DataSource dataSource <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//创建数据源对象</span>
            dataSource <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//返回</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="10-分页"><a href="#10-分页" class="headerlink" title="10.分页"></a>10.分页</h3><h5 id="10-1导入依赖"><a href="#10-1导入依赖" class="headerlink" title="10.1导入依赖"></a>10.1导入依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="10-2第一种方式在mybatis-config-xml中配置"><a href="#10-2第一种方式在mybatis-config-xml中配置" class="headerlink" title="10.2第一种方式在mybatis-config.xml中配置"></a>10.2第一种方式在mybatis-config.xml中配置</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置日志 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 分页插件 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 数据库方言，指定对应的数据库进行分页 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helperDialect<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum&lt;=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reasonable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 支持通过 Mapper 接口参数来传递分页参数 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>supportMethodsArguments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="10-3第二种方式在applicationContext-xml中配置"><a href="#10-3第二种方式在applicationContext-xml中配置" class="headerlink" title="10.3第二种方式在applicationContext.xml中配置"></a>10.3第二种方式在applicationContext.xml中配置</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置sqlSessionFactory --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 必选配置 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 非必选属性，根据自己需求去配置 --></span>
    <span class="token comment" spellcheck="true">&lt;!-- 导入 mybatis-config.xml --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 导入 Mapper.xml 文件，classpath后面不能有空格 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置分页 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>plugins<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token comment" spellcheck="true">&lt;!--使用下面的方式配置参数，一行配置一个 --></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>
                        helperDialect = mysql
                        reasonable = true
                        supportMethodsArguments = true
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="10-4-测试"><a href="#10-4-测试" class="headerlink" title="10.4 测试"></a>10.4 测试</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 测试分页查询
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_findByPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    UserController userController <span class="token operator">=</span> <span class="token punctuation">(</span>UserController<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    PageInfo pageInfo <span class="token operator">=</span> userController<span class="token punctuation">.</span><span class="token function">findByPage</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="9-AOP"><a href="#9-AOP" class="headerlink" title="9.AOP"></a>9.AOP</h3><blockquote>
<p>Aspect Oriented Programing 面向切面编程</p>
<p>springAOP：在程序运行期通过动态代理的方式向目标类（接口），织入增强的代码，为目标类（接口）中的方法添加额外的功能</p>
<p>采取是横向抽取机制，取代了我们传统的纵向继承方式重复性的代码</p>
<p>底层原理：代理模式</p>
</blockquote>
<h4 id="9-1装饰器模式"><a href="#9-1装饰器模式" class="headerlink" title="9.1装饰器模式"></a>9.1装饰器模式</h4><blockquote>
<p>装饰器模式：对象本身增强</p>
<p>代理模式：代理对象（代理过程）增强</p>
</blockquote>
<h5 id="9-1-1Info"><a href="#9-1-1Info" class="headerlink" title="9.1.1Info"></a>9.1.1Info</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>decorator<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 抽象构件
 * 抽象类：可以有抽象方法，也可以有普通方法，但是一旦写了抽象方法，这个类一定为抽象类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 自我介绍
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-1-2PersonInfo"><a href="#9-1-2PersonInfo" class="headerlink" title="9.1.2PersonInfo"></a>9.1.2PersonInfo</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>decorator<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 具体构件
 * 继承Info，实现方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonInfo</span> <span class="token keyword">extends</span> <span class="token class-name">Info</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自我介绍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-1-3Decorator"><a href="#9-1-3Decorator" class="headerlink" title="9.1.3Decorator"></a>9.1.3Decorator</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>decorator<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 装饰器
 * 抽象装饰
 * 继承Info，实现方法，可以通过其子类扩展具体构件的功能
 */</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Info</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Info info<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//传入被装饰对象</span>
    <span class="token keyword">public</span> <span class="token function">Decorator</span><span class="token punctuation">(</span>Info info<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//调用自我介绍的方法</span>
        info<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-1-4Singer"><a href="#9-1-4Singer" class="headerlink" title="9.1.4Singer"></a>9.1.4Singer</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>decorator<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 具体装饰
 * 继承抽象装饰
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singer</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//调用父类构造器</span>
    <span class="token keyword">public</span> <span class="token function">Singer</span><span class="token punctuation">(</span>Info info<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//自己的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">singing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"唱歌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//重写方法，达到增强的目的</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">singing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-1-5Dancer"><a href="#9-1-5Dancer" class="headerlink" title="9.1.5Dancer"></a>9.1.5Dancer</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>decorator<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 具体装饰
 * 继承抽象装饰
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dancer</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Dancer</span><span class="token punctuation">(</span>Info info<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dancing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跳舞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dancing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-1-6Magic"><a href="#9-1-6Magic" class="headerlink" title="9.1.6Magic"></a>9.1.6Magic</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>decorator<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 具体装饰
 * 继承抽象装饰
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Magic</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Magic</span><span class="token punctuation">(</span>Info info<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"变魔术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-1-7测试"><a href="#9-1-7测试" class="headerlink" title="9.1.7测试"></a>9.1.7测试</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>decorator<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//单独测试</span>
<span class="token comment" spellcheck="true">//        Info personInfo = new PersonInfo();</span>
<span class="token comment" spellcheck="true">//        personInfo.info();</span>
<span class="token comment" spellcheck="true">//        System.out.println("----------------------");</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//        Decorator singer = new Singer(personInfo);</span>
<span class="token comment" spellcheck="true">//        singer.info();</span>
<span class="token comment" spellcheck="true">//        System.out.println("----------------------");</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//        Dancer dancer = new Dancer(personInfo);</span>
<span class="token comment" spellcheck="true">//        dancer.info();</span>
<span class="token comment" spellcheck="true">//        System.out.println("----------------------");</span>


        <span class="token comment" spellcheck="true">//增强测试</span>
        Info personInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Decorator singer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singer</span><span class="token punctuation">(</span>personInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一次增强</span>
        Dancer dancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dancer</span><span class="token punctuation">(</span>singer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二次增强</span>
        Magic magic1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Magic</span><span class="token punctuation">(</span>dancer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三次增强</span>
        Magic magic2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Magic</span><span class="token punctuation">(</span>magic1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第四次增强</span>

        magic2<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="9-2代理模式"><a href="#9-2代理模式" class="headerlink" title="9.2代理模式"></a>9.2代理模式</h4><blockquote>
<p>通过代理类对象，为目标类对象添加功能</p>
<p>分类：静态代理和动态代理</p>
<p>静态代理：需要实现接口中的方法，进行增强，代理的功能代码有冗余，维护性较差</p>
<p>动态代理：在不实现接口中所有方法，对接口中的指定的方法进行增强</p>
</blockquote>
<h5 id="9-2-1静态代理"><a href="#9-2-1静态代理" class="headerlink" title="9.2.1静态代理"></a>9.2.1静态代理</h5><blockquote>
<p>Rent</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>demo1<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 接口
 * 出租房子
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//出租房子</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//其他的方法</span>
    <span class="token comment" spellcheck="true">//public void test();</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>Owner</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>demo1<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 房东
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Owner</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东出租房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>OwnerProxy</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>demo1<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 房东的代理对象
 * 静态代理
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OwnerProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//房东对象</span>
    <span class="token keyword">private</span> Owner owner<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">OwnerProxy</span><span class="token punctuation">(</span>Owner owner<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布租房信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"带租户看房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        owner<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>demo1<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        Owner owner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Owner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        owner<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        OwnerProxy ownerProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OwnerProxy</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ownerProxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-2-2动态代理"><a href="#9-2-2动态代理" class="headerlink" title="9.2.2动态代理"></a>9.2.2动态代理</h5><blockquote>
<p>分为：JDK动态代理 和 CGLIB动态代理</p>
<p>JDK动态代理：基于接口的动态代理，被代理对象必须实现接口</p>
<p>CGLIB动态代理 ：基于子类的动态代理，对目标对象进行继承代理</p>
</blockquote>
<blockquote>
<p>JDK动态代理</p>
</blockquote>
<blockquote>
<p>Rent</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>demo2<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 接口
 * 出租房子
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//出租房子</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//其他的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>Owner</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>demo2<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 房东
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Owner</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东出租房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>RentJdkProxy</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>demo2<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * JDK动态代理
 * 核心实现 InvocationHandler 接口，调用 invoke 方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RentJdkProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Rent rent<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRent</span><span class="token punctuation">(</span>Rent rent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rent <span class="token operator">=</span> rent<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//生成代理对象</span>
    <span class="token keyword">public</span> Rent <span class="token function">getRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>Rent<span class="token punctuation">)</span>Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
                rent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类加载器</span>
                rent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//接口列表</span>
                <span class="token keyword">this</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//对接口中的方法进行增强（扩展），不需要实现接口中的所有方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明变量做为方法的返回值</span>
        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//判断方法名，对其进行增强</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"rent"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>rent<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>rent<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布租房信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"带租户看房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>demo2<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        Owner owner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Owner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        owner<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建RentJdkProxy对象</span>
        RentJdkProxy rentJdkProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RentJdkProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//给属性赋值</span>
        rentJdkProxy<span class="token punctuation">.</span><span class="token function">setRent</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//获取代理对象</span>
        Rent proxyRent <span class="token operator">=</span> rentJdkProxy<span class="token punctuation">.</span><span class="token function">getRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxyRent<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        proxyRent<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="9-3Spring中的AOP"><a href="#9-3Spring中的AOP" class="headerlink" title="9.3Spring中的AOP"></a>9.3Spring中的AOP</h4><blockquote>
<p>面向切面编程 (AOP) 通过提供另一种思考程序结构的方式来补充面向对象编程 (OOP)，OOP的延伸</p>
<p>对目标对象中的多个不同方法进行不同程度的增强</p>
</blockquote>
<blockquote>
<p>AOP的术语:<br>Joinpoint(连接点)：所谓连接点是指那些被拦截到的点，在spring中，这些点指的是方法，spring只支持方法类型的连接点。<br>Pointcut(切入点)：所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。<br>Advice(通知&#x2F;增强)：所谓通知是指拦截到Joinpoint之后所要做的事情就是通知，通知分为前置通知，后置通知，异常通知，最终通知，环绕通知。<br>Introduction(引介)：可以在运行期为类动态地添加一些方法或Field。<br>Target(目标对象)：代理的目标对象。<br>Weaving(织入)：是指把增强应用到目标对象来创建新的代理对象的过程。<br>Proxy(代理)：一个类被AOP织入增强后，就产生一个代理类。<br>Aspect(切面)：是切入点和通知（引介）的结合</p>
</blockquote>
<h4 id="9-4XML配置AOP"><a href="#9-4XML配置AOP" class="headerlink" title="9.4XML配置AOP"></a>9.4XML配置AOP</h4><h5 id="9-4-1导入依赖"><a href="#9-4-1导入依赖" class="headerlink" title="9.4.1导入依赖"></a>9.4.1导入依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- aop --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-4-2UserService"><a href="#9-4-2UserService" class="headerlink" title="9.4.2UserService"></a>9.4.2UserService</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 目标对象 target
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//没有增强的方法，叫做连接点 JoinPoint</span>
    <span class="token comment" spellcheck="true">//被增强的方法，叫做切入点 PointCut</span>
    <span class="token comment" spellcheck="true">//增强的代码，叫做通知</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-4-3UserServiceImpl"><a href="#9-4-3UserServiceImpl" class="headerlink" title="9.4.3UserServiceImpl"></a>9.4.3UserServiceImpl</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//算数异常</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-4-4MyAdvice"><a href="#9-4-4MyAdvice" class="headerlink" title="9.4.4MyAdvice"></a>9.4.4MyAdvice</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>advice<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 通知类：增强的代码
 * 方法名以及功能可以是任意的
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAdvice</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知，目标对象调用方法前执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知（最终通知），目标对象调用方法后执行，无论目标对象方法是否发生异常都会执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after_returning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知，目标对象调用方法后执行，目标对象方法发生异常则不执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after_throwing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知，目标对象调用方法发生异常时执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知，目标对象调用方法之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知，目标对象调用方法之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-4-5applicationContext-xml"><a href="#9-4-5applicationContext-xml" class="headerlink" title="9.4.5applicationContext.xml"></a>9.4.5applicationContext.xml</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- bean definitions here --></span>


        <span class="token comment" spellcheck="true">&lt;!-- 配置userService对象，对该对象中的方法进行增强 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.coutrue.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 配置通知 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.coutrue.advice.MyAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>


        <span class="token comment" spellcheck="true">&lt;!-- 配置aop --></span>
        <span class="token comment" spellcheck="true">&lt;!-- 默认使用JDK动态代理，通过 proxy-target-class="true" 可以设置使用CGLIB动态代理 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 配置切点
             expression：表达式，指定哪些方法是切入点，对那些进行增强
             --></span>
<span class="token comment" spellcheck="true">&lt;!--            &lt;aop:pointcut id="pc" expression="execution(public void com.qf.service.impl.UserServiceImpl.add())"/>--></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.coutrue.service.impl.*ServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

            <span class="token comment" spellcheck="true">&lt;!-- 配置切面，把通知配置到切点上 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token comment" spellcheck="true">&lt;!-- aop:before 前置通知，method 表示增强的代码的方法名 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">></span></span>

                <span class="token comment" spellcheck="true">&lt;!-- 后置通知（最终通知），目标对象调用方法后执行，无论目标对象方法是否发生异常都会执行 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after</span><span class="token punctuation">></span></span>

                <span class="token comment" spellcheck="true">&lt;!-- 后置通知，目标对象调用方法后执行，目标对象方法发生异常则不执行 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after_returning<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-returning</span><span class="token punctuation">></span></span>

                <span class="token comment" spellcheck="true">&lt;!-- 异常通知，目标对象调用方法发生异常时执行 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after_throwing<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-throwing</span><span class="token punctuation">></span></span>

                <span class="token comment" spellcheck="true">&lt;!-- 环绕通知，目标方法调用之前和之后都会执行 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>around<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>around</span><span class="token punctuation">></span></span>

            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="9-4-6测试"><a href="#9-4-6测试" class="headerlink" title="9.4.6测试"></a>9.4.6测试</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>couture<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        ClassPathXmlApplicationContext applicationContext
                <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//userService.delete();</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>ssm</tag>
      </tags>
  </entry>
</search>
