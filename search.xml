<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Rocky Linux</title>
    <url>/Rocky-Linux/</url>
    <content><![CDATA[<h3 id="修改默认远程端口号">1.修改默认远程端口号</h3>
<h4 id="关闭selinux">1.1 关闭<code>SELINUX</code></h4>
<p>如果不关闭<code>SELINUX</code>修改远程端口号无法生效(天坑之一)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sysconfig/selinux</span></span><br><span class="line"><span class="comment"># SELINUX=enforcing 修改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line">[root@localhost ~]<span class="comment"># reboot</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># setstatus</span></span><br></pre></td></tr></table></figure>
<h4 id="修改防火墙">1.2 修改防火墙</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --zone=public --add-port=11111/tcp --permanent</span></span><br><span class="line">success</span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br><span class="line">[root@localhost ~]<span class="comment"># more /etc/firewalld/zones/public.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;zone&gt;</span><br><span class="line">  &lt;short&gt;Public&lt;/short&gt;</span><br><span class="line">  &lt;description&gt;For use <span class="keyword">in</span> public areas. You <span class="keyword">do</span> not trust the other computers on </span><br><span class="line">  networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;</span><br><span class="line">  &lt;port port=<span class="string">&quot;11111&quot;</span> protocol=<span class="string">&quot;tcp&quot;</span>/&gt;</span><br><span class="line">  &lt;forward/&gt;</span><br><span class="line">&lt;/zone&gt;</span><br></pre></td></tr></table></figure>
<h4 id="修改sshd的配置">1.3 修改<code>sshd</code>的配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /etc/ssh/</span></span><br><span class="line">[root@localhost ssh]<span class="comment"># vi sshd_config</span></span><br></pre></td></tr></table></figure>
<h4 id="修改端口port">1.4 修改端口<code>port</code></h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Port 22</span></span><br><span class="line">Port 31234</span><br></pre></td></tr></table></figure>
<h4 id="配置文件的有效性和密钥的完整性测试">1.5
配置文件的有效性和密钥的完整性测试</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sshd -t</span></span><br><span class="line"><span class="comment"># 没有问题的情况下就是显示</span></span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<h4 id="重启sshd服务">1.6 重启<code>sshd</code>服务</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl restart sshd.service</span></span><br></pre></td></tr></table></figure>
<h4 id="测试">1.7 测试</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -lntp</span></span><br><span class="line">State      Recv-Q    Send-Q   Local Address:Port     Peer Address:Port    Process</span><br><span class="line">LISTEN     0         128      0.0.0.0:31234          0.0.0.0:*            <span class="built_in">users</span>:((&quot;sshd&quot;,pid=<span class="number">11111</span>,fd=<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p> 如果出现上面的结果说默认远程端口号明修改已经成功完成</p>
<h3 id="网卡固定ip地址">2.网卡固定<code>IP</code>地址</h3>
<h4 id="找到网卡信息并且修改配置文件">2.1
找到网卡信息并且修改配置文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /etc/sysconfig/network-scripts/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifcfg-ens192</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vi ifcfg-ens192</span></span><br><span class="line"></span><br><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">IPADDR=你的静态IP地址</span><br><span class="line">NETMASK=你的子网掩码</span><br><span class="line">GATEWAY=你的默认网关</span><br><span class="line">DNS1=首选DNS服务器</span><br><span class="line">DNS2=备用DNS服务器</span><br><span class="line"></span><br><span class="line">DEVICE=eth0</span><br><span class="line">NAME=eth0</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">IPADDR=192.168.1.100</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=8.8.4.4</span><br></pre></td></tr></table></figure>
<h4 id="重启网路服务命令">2.2 重启网路服务命令</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart NetworkManager</span><br></pre></td></tr></table></figure>
<h4 id="重启整个系统">2.3 重启整个系统</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<p>测试正常访问或者是<code>ping</code>通网络，说明修改成功</p>
<h3 id="安装vmware-tools">3.安装<code>VMware Tools</code></h3>
<h4 id="挂载vmware-tools">3.1 挂载<code>VMware Tools</code></h4>
<blockquote>
<p>在安装VMware
Tools之前，确保系统中已安装所需的构建工具和依赖项。在Rocky
Linux中，可以使用以下命令安装所需软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;sudo dnf install gcc kernel-devel kernel-headers make perl elfutils-libelf-devel</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>在<code>Rocky Linux</code>中，打开终端并创建一个用于挂载的目录：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /mnt/cdrom</span><br></pre></td></tr></table></figure>
<ul>
<li>然后将<code>VMware Tools</code>安装介质挂载到该目录：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/cdrom /mnt/cdrom</span><br></pre></td></tr></table></figure>
<h4 id="将vmware-tools安装文件解压到临时目录中">3.2 将VMware
Tools安装文件解压到临时目录中：</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf /mnt/cdrom/VMwareTools-*.tar.gz -C /tmp/</span><br></pre></td></tr></table></figure>
<h4 id="运行安装程序">3.3 <strong>运行安装程序</strong>：</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp/vmware-tools-distrib/</span><br><span class="line">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure>
<h4 id="重启系统">3.4 重启系统</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Rocky</tag>
      </tags>
  </entry>
  <entry>
    <title>WinServer服务器之间如何最快拷贝文件</title>
    <url>/WinServer%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E6%9C%80%E5%BF%AB%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>问题产生背景是同事希望在<code>Vsphere</code>虚拟机两台<code>Windows</code>服务器相互拷贝文件。</p>
</blockquote>
<ul>
<li>解决问题思路</li>
</ul>
<p> 一开始我的解决的思路是共享服务器里面的文件夹，按照这个思路自己解决问题是给想要共享的文件夹，然后通过网络共享的方式进行文件共享。</p>
<p>但是解决到最后，发现总是共享报错，网络设置里面的共享发现以及防火墙都关闭了，还是无法解决问题。</p>
<p> 下图是错误指示：</p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/987f08efe5748e6f7222d40b78956307.png" /></p>
<p> 然后排查了半天，不知道问题是出在那里，<code>Windows</code>在共享网络上有时候就是一种玄学，然后我就想用第二种解决方案。</p>
<p> 第二种解决方案其实就是利用<code>Windows</code>自带的远程工具，直接在虚拟机里面去远程另一台虚拟机就好了，这样文件可以相互拷贝，而且速度很快，问题就是这样得到解决的。</p>
<p> 第三种还有一种解决方式，就是如果两台虚拟机都能上外网的情况下，可以用远程工具，向日葵这种，当然没有<code>Windows</code>自带的远程工具方便。</p>
<blockquote>
<p>在Vsphere中，可以建立共享磁盘的方式，这样也可以进行文件之间的相互访问，一切的方法只是为了解决问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>WinServer - 服务器</category>
      </categories>
      <tags>
        <tag>WinServer</tag>
      </tags>
  </entry>
  <entry>
    <title>WinServer2019修改远程端口号</title>
    <url>/WinServer2019%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
    <content><![CDATA[<ul>
<li>先进入注册表</li>
</ul>
<p><code>Win+R</code>输入<code>regedit</code>回车，进入注册表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Terminal Server/Wds/rdpwd/Tds/tcp</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Terminal Server/WinStations/RDP-Tcp</span><br></pre></td></tr></table></figure>
<p>修改对应注册表中的<code>PortNumber</code>修改</p>
<ul>
<li>防火墙入站规则添加相应的端口</li>
</ul>
<blockquote>
<p>一般情况下<code>Windows</code>服务器都是禁止<code>ping</code>的，所以如果想要<code>Windows</code>服务器能<code>ping</code>通，如果想要<code>ping</code>通，这时候需要给防火墙给关闭。</p>
</blockquote>
<p> 修改完成以后需要进行重启一次，这时候为了测试远程端口号是否修改成功，可以在终端测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 端口号</span><br></pre></td></tr></table></figure>
<p>如果能进去，则说明通了，不行则说明还需要修改。</p>
]]></content>
      <categories>
        <category>WinServer - Windows</category>
      </categories>
      <tags>
        <tag>WinServer</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7.9修改远程端口号踩坑</title>
    <url>/CentOS-7-9%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E5%8F%B7%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<p><code>sshd_config</code>配置文件里面修改端口以后不通，注意下面：
<span id="more"></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment"># cd /etc/selinux/</span></span><br><span class="line">[root@centos7 selinux]<span class="comment"># ls</span></span><br><span class="line">config  final  semanage.conf  targeted  tmp</span><br><span class="line">[root@centos7 selinux]<span class="comment"># vi config </span></span><br><span class="line">[root@centos7 selinux]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=disabled <span class="comment"># 修改远程端口号要关闭</span></span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted                                                                              </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                                             </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS - Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>局域网共享打印机出现0x0000011b错误解决方式</title>
    <url>/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E6%89%93%E5%8D%B0%E6%9C%BA%E5%87%BA%E7%8E%B00x0000011b%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>网上的教程有很多，除了软件（软件不知道是否好坏，是否有病毒），最快最稳定的方式还是修改注册表，不需要卸载更新等其他方式。</p>
</blockquote>
<h3 id="第一步">第一步：</h3>
<p> <code>Win</code>+<code>R</code>启动“运行”，然后输入<code>regedit</code>回车，进入注册表</p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240227130332524.png" /></p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240227130351806.png" /></p>
<h3 id="第二步">第二步：</h3>
<p> 搜索<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Print</code></p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240227130619030.png" /></p>
<h3 id="第三步">第三步：</h3>
<p> 鼠标右键，新建<code>DWORD(32位)</code>值，然后重新命名为<code>RpcAuthnLevelPrivacyEnabled</code>修改值为<code>0</code></p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240227130833814.png" /></p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240227130904059.png" /></p>
<h3 id="第四步">第四步：</h3>
<p> 重启电脑！问题解决</p>
<p><code>注意，共享和接受打印机都要修改！！！！</code></p>
]]></content>
      <categories>
        <category>共享打印机</category>
      </categories>
      <tags>
        <tag>共享打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac电脑Hosts文件修改</title>
    <url>/Mac%E7%94%B5%E8%84%91Hosts%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<p>  因为一些原因想着修改mac的hosts文件，我给文件复制到桌面上一份，但是在桌面上以后，无论如何都删不掉，也无法给权限，一直都是上锁的状态，也查了很多解锁的方式，但是都无法解锁，经过自己的踩坑，找到了问题的原因。</p>
<p> 问题如图所示：</p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/.png" /></p>
<p> 为什么我在终端中使用命令别人都能执行，为什么我无法解锁呢？然后发现是终端<code>iterm2</code>的原因，给命令复制到<code>Mac</code>自带终端，问题都解决了。</p>
<p> <strong>锁死<code>hosts</code>文件：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chflags uchg /etc/hosts</span><br><span class="line">sudo chflags schg /etc/hosts</span><br></pre></td></tr></table></figure>
<p> <strong>解锁<code>hosts</code>文件：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chflags -hv noschg /etc/hosts</span><br></pre></td></tr></table></figure>
<p> 推荐自带终端<code>YYDS</code>!!!</p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240125202358864.png" />
最后找到一个开源的修改hosts文件的软件<a
href="https://github.com/oldj/SwitchHosts">SwitchHosts</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Powertoys安装后，输入法打字卡顿解决方式</title>
    <url>/%E5%85%B3%E4%BA%8EPowertoys%E5%AE%89%E8%A3%85%E5%90%8E%EF%BC%8C%E8%BE%93%E5%85%A5%E6%B3%95%E6%89%93%E5%AD%97%E5%8D%A1%E9%A1%BF%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>安装这个<code>Powertoys</code>以后打字总是不跟手，打字很卡，特别是喜欢用空格作为确定按键，后来找了很多资料，发现也有很多人有类似的问题，经过研究找到了问题所在：</p>
</blockquote>
<p>  <strong>在<code>Powertoys</code>设置里面安装完成以后会默认开启<code>快速重音</code>这个东西，需要给这个东西给关闭，然后打字就没有过卡顿了。</strong></p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240112082845958.png" /></p>
<h3 id="问题得到完美解决">  问题得到完美解决！！！</h3>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows - Powertoys</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7.8安装Vmware-tools</title>
    <url>/CentOS-7-8%E5%AE%89%E8%A3%85Vmware-tools/</url>
    <content><![CDATA[<h6
id="首先要进入挂载目录下面看看有没有挂载"><strong>首先要进入挂载目录下面，看看有没有挂载</strong></h6>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/33a9072df8752e7880ebb38a91b0431a.png" /></p>
<p><strong>首先确认 <code>/mnt</code> 目录下是否有 VMware Tools
的内容。使用 <code>ls /mnt</code> 命令来列出内容。</strong></p>
<ol type="1">
<li><p>如果有，创建一个新的目录来复制文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/vmware-tools</span><br></pre></td></tr></table></figure></li>
<li><p>复制文件到您的家目录下的新文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /mnt/* ~/vmware-tools</span><br></pre></td></tr></table></figure></li>
<li><p>进入该目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/vmware-tools</span><br></pre></td></tr></table></figure></li>
<li><p>如果 VMware Tools 是压缩的 tar 文件，解压它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf VMwareTools-x.x.x-xxxxxx.tar.gz</span><br></pre></td></tr></table></figure>
<p>确保将 <code>x.x.x-xxxxxx</code> 替换为实际的文件名。</p></li>
<li><p>进入解压后的目录（通常是
<code>vmware-tools-distrib</code>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> vmware-tools-distrib</span><br></pre></td></tr></table></figure></li>
<li><p>以 root 用户运行安装脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure></li>
<li><p>安装完成以后重启，之后执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status vmware-tools</span><br></pre></td></tr></table></figure></li>
</ol>
<p>运行结果</p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231225122556587.png" /></p>
<p>安装完成~</p>
]]></content>
      <categories>
        <category>CentOS</category>
        <category>NetWork</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Mac word缺少字体的解决方式</title>
    <url>/%E5%85%B3%E4%BA%8EMac-word%E7%BC%BA%E5%B0%91%E5%AD%97%E4%BD%93%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p> 
本人也是很少用word，但是收到文件字体是<code>仿宋字体GB2312</code>,<code>Mac office 365 word</code>中不能识别到字体，然后打印出来的字体完全是变了格式，因为自动识别成了宋体黑体，不是<code>仿宋字体GB2312</code>,所以就找到了以下解决方案：</p>
<p> 首先就是下载字体，当然我这已经找好合集了，我只需要传到网盘上面，有需要的自行下载即可（<a
href="https://pan.baidu.com/s/1KRGAE_oOPLGgIa2Lm1r4gQ?pwd=9v3a">下载链接</a>）</p>
<h3 id="第一步">第一步：</h3>
<p> 
找到<code>应用程序</code>中的<code>word</code>鼠标右键，显示包内容，然后回车</p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240102122414174.png" /></p>
<h3 id="第二步">第二步：</h3>
<p> 
一次打开文件夹：<code>/Contents/Resources/DFonts</code>这就是存放字体的路径，完成路径<code>/Applications/Microsoft Word.app/Contents/Resources/DFonts</code></p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240102122650195.png" /></p>
<h3 id="第三步">第三步：</h3>
<p>  字体解压以后给你需要的字体直接拖进去即可：</p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20240102123002189.png" /></p>
<h3 id="最后">最后：</h3>
<p> 
一定需要进行电脑重启，这样字体才能生效，在打开<code>word</code>或者是之前未能识别字体的文档都能识别了，问题解决~</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题之hexo-theme-matery踩坑</title>
    <url>/Hexo%E4%B8%BB%E9%A2%98%E4%B9%8Bhexo-theme-matery%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h2 id="序言">1、序言：</h2>
<blockquote>
<p>最近元旦放假，想着自己也没啥事情要做的，自己博客也是好久没有更新过了，自己想换一个主题，然后参照了很多主题，最后选择了github上面的开源主题<a
href="https://github.com/blinkfox/hexo-theme-matery">hexo-thme-matery</a>这个主题，然后就有了下面就是自己遇到的一些坑了~</p>
</blockquote>
<h2 id="踩坑">2、踩坑</h2>
<h3 id="标题">2.1 标题</h3>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231231222639509.png" /></p>
<p>上图箭头指的就是我踩坑的第一个点了，这个其实也是怪我自己没有好好去看官方文档，其实这里就是你想要的博客名称，但是这个配置文件里面是没有显示的，这个需要你手动去添加，在根目录配置文件里面修改<code>themes/hexo-theme-matery/_config.yml</code>在<code>_config.yml</code>配置文件里面进行添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: Couture<span class="string">&#x27;s Blog       # title后面就是你的博客名字，也就是我上面箭头指的地方</span></span><br></pre></td></tr></table></figure>
<p>修改完成以后，就是下面这样的了，第一个坑算是解决了</p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231231222609248.png" /></p>
<h3 id="副标题">2.2 副标题</h3>
<p>先说明这个问题如何产生，如下图（当然这个是我已经修改好了），没有修改的话上面这段话显示的是<code>subtitle</code>,我一直以为副标题在配置文件中修改：</p>
<p><code>subtitle</code>配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span> <span class="comment"># 是否循环</span></span><br><span class="line">  <span class="attr">showCursor:</span> <span class="literal">true</span> <span class="comment"># 是否显示光标</span></span><br><span class="line">  <span class="attr">startDelay:</span> <span class="number">300</span> <span class="comment"># 开始延迟</span></span><br><span class="line">  <span class="attr">typeSpeed:</span> <span class="number">100</span> <span class="comment"># 打字速度</span></span><br><span class="line">  <span class="attr">backSpeed:</span> <span class="number">50</span> <span class="comment"># 删除速度</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">忽有故人心上过,回首山河已是秋,恰有相思同沐雪,此生已算共白头</span></span><br></pre></td></tr></table></figure>
<p>但是我发现问题根本不是在这里，而是在<code>themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs</code>在博客主题里面的<code>bg-cover-content.ejs</code>这个文件夹里面，第7行8行之间，下面我也给配置文件内容给列出来，对应修改就行了，第二个坑也算是给解决了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;brand&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;title center-align&quot;&gt;</span><br><span class="line">                &lt;% if (config.subtitle &amp;&amp; config.subtitle.length &gt; 0) &#123; %&gt;</span><br><span class="line">                &lt;%= config.subtitle %&gt;</span><br><span class="line">                &lt;% &#125; else &#123; %&gt;</span><br><span class="line">                        物来顺应，未来不迎，当时不杂，既过不恋  </span><br><span class="line">                &lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231231222711587.png" /></p>
<p>上面是我修改这个副标题的方式，可能看到这篇博客的大佬们还有更好的修改方式，我可能只是用了一种最笨的方式了。</p>
<h3 id="代码块之究极大坑">2.3 代码块之究极大坑</h3>
<p>问题产生，如图所示的代码块显示出了明显的问题：</p>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/11111.png" /></p>
<p>我最开始想着是我在<code>_config.yml</code>配置文件中没有设置好，但是我看配置文件中的相关的是<code>code</code>,没有代码块的样式设置，只有一些开关如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码块相关</span></span><br><span class="line"><span class="attr">code:</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="literal">true</span> <span class="comment"># 代码块是否显示名称</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="literal">true</span> <span class="comment"># 代码块是否可复制</span></span><br><span class="line">  <span class="attr">shrink:</span> <span class="literal">true</span> <span class="comment"># 代码块是否可以收缩</span></span><br><span class="line">  <span class="attr">break:</span> <span class="literal">false</span> <span class="comment"># 代码是否折行</span></span><br></pre></td></tr></table></figure>
<p>这些显示，我是怎么设置都不能解决问题，然后就开始百度查询问题解决方式，最后经过不懈努力，终于是找到了方式，这个<code>github</code>的<code>issue</code>中也有其他的小伙伴提到过，我的解决方案：</p>
<h5 id="首先要安装插件hexo-prism-plugin">2.3.1
首先要安装插件<code>hexo-prism-plugin</code>：</h5>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-prism-plugin --save</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h5 id="因为hexo主题自带有highlight语法高亮插件这个插件要禁用">2.3.2
因为<code>hexo</code>主题自带有<code>highlight</code>语法高亮插件，这个插件要禁用</h5>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>  <span class="comment"># 禁用</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 禁用以后下面的这些都不用管的</span></span><br></pre></td></tr></table></figure>
<p>2.3.3
开始配置<code>hexo-prism-plugin</code>插件，然后插件的配置用途我在下面也进行解释说明</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>		  <span class="comment"># 插件是否开启</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&#x27;tomorrow&#x27;</span> <span class="comment"># 插件主题</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span>  <span class="comment"># 预加载功能是否开启</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span> <span class="comment"># 行号是否开启</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h5 id="看最后的显示效果">2.3.4 看最后的显示效果</h5>
<p><img
src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231231222806955.png" /></p>
<h5 id="到此这个坑已经是解决了">2.4.5 到此这个坑已经是解决了。</h5>
<h3 id="致谢">3、致谢</h3>
<p>感谢开源作者<a href="https://github.com/blinkfox"><span
class="citation"
data-cites="Blinkfox">@Blinkfox</span></a>的贡献精美主题</p>
<p>对我来说这个主题里面的很多功能我是没有启用的，目前看来也已经是够用了，记录一些琐碎的东西，也希望更多伙伴能一起讨论关于这个主题的一些东西，共同学习和进步，希望我的这篇记录也能给你带来些许的帮助~</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac自带文件修改</title>
    <url>/Mac%E8%87%AA%E5%B8%A6%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<h3 id="问题所在">问题所在：</h3>
<span id="more"></span>
<p><img src="https://typora-couture.oss-cn-hangzhou.aliyuncs.com/image-20231112151723433.png" alt="image-20231112151723433" style="zoom:50%;" /></p>
<p>想要修改<code>Mac</code>系统的文件，但是上图来看，没有操作权限</p>
<h3 id="解决方案">解决方案：</h3>
<ol type="1">
<li><h5 id="禁用sip并删除文件"><strong>禁用SIP并删除文件：</strong></h5>
<ul>
<li><p>重启电脑，并在启动时按住<code>Command + R</code>
进入恢复模式。</p></li>
<li><p>打开终端（在“实用工具”菜单中选择“终端”）。</p></li>
<li><p>在终端中输入以下命令来禁用SIP：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">csrutil disable</span><br></pre></td></tr></table></figure></li>
<li><p>重启电脑。</p></li>
<li><p>重新尝试删除文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rm -rf ~/Desktop/hosts</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><h5 id="重新启用sip"><strong>重新启用SIP：</strong></h5>
<ul>
<li><p>重启电脑，并在启动时按住<code>Command + R</code>
进入恢复模式。</p></li>
<li><p>打开终端，输入以下命令来重新启用SIP：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">csrutil enable</span><br></pre></td></tr></table></figure></li>
<li><p>重启电脑。</p></li>
</ul></li>
</ol>
<p>问题解决!!!</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac - Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 22.04配置静态IP地址</title>
    <url>/Ubuntu-22-04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p>进入系统以后：</p>
<p>编辑网络配置文件（<code>nano</code>或者<code>vim</code>） <span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">couture@couture:~$ sudo vim /etc/netplan/00-installer-config.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      dhcp4: <span class="literal">true</span></span><br><span class="line">  version: 2</span><br></pre></td></tr></table></figure></p>
<p>将 <code>dhcp4: true</code> 修改为
<code>dhcp4: false</code>，然后在<code>ethernets</code>下添加您的<a
href="https://so.csdn.net/so/search?q=静态IP&amp;spm=1001.2101.3001.7020">静态IP</a>配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    enp0s3:</span><br><span class="line">      dhcp4: <span class="literal">false</span></span><br><span class="line">      addresses: [192.168.1.10/24]  <span class="comment"># 静态IP和子网掩码</span></span><br><span class="line">      gateway4: 192.168.1.1  <span class="comment"># 默认网关</span></span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [8.8.8.8, 8.8.4.4]  <span class="comment"># DNS服务器</span></span><br><span class="line">  version: 2</span><br></pre></td></tr></table></figure>
<p>关闭并且保存文件,然后重启网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo netplan apply</span><br><span class="line"></span><br><span class="line">sudo systemctl restart network-manager</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu - Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS网配置模板</title>
    <url>/CentOS%E7%BD%91%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[rootClocalhost~]<span class="comment"># cd /etc/sysconf ig/network-scripts/</span></span><br><span class="line">[rootClocalhost~]<span class="comment"># ls</span></span><br><span class="line">[rootClocalhost~]<span class="comment"># vi ifcfg-ens160</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /etc/sysconfig/network-scripts/</span></span><br><span class="line">[root@localhost network-scripts]<span class="comment"># vim ifcfg-ens160 </span></span><br><span class="line"></span><br><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;ens160&quot;</span></span><br><span class="line">UUID=<span class="string">&quot;c203d758-1006-4fed-85cf-b485feac9682&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;ens160&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=192.168.200.181</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.200.2</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启网卡 </span></span><br><span class="line">systemctl restart network</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux CentOS</category>
      </categories>
      <tags>
        <tag>CentOS - Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>YMAL文章语法</title>
    <url>/YMAL%E6%96%87%E7%AB%A0%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><code>title</code>：文档或博文的标题。</li>
<li><code>date</code>：文档或博文创建或发布的日期和时间。
<span id="more"></span></li>
<li><code>tags</code>：与文档或博文相关的关键词或标签的列表。</li>
<li><code>categories</code>：文档或博文所属的类别或主题的列表。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">这是文档的简要描述。</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">日期</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者名</span></span><br><span class="line"><span class="attr">thumbnail:</span> <span class="string">/path/to/thumbnail.jpg</span>  <span class="comment"># 封面图像或缩略图</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="string">https://example.com</span> <span class="comment"># 链接</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">1.0</span> <span class="comment"># 版本号</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">标签1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">标签2</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">分类1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">分类2</span></span><br><span class="line"><span class="attr">featured:</span> <span class="literal">true</span> <span class="comment"># 顶置</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>YML - Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>多平台使用 Hexo+GithubPage</title>
    <url>/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E4%BD%BF%E7%94%A8-Hexo-GithubPage/</url>
    <content><![CDATA[<p>将一台电脑的博客所有目录直接拷贝到另一台电脑上面 <span id="more"></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">couture@MacPro  ~/MyBlog  </span><br><span class="line">位于分支 main</span><br><span class="line">无文件要提交，干净的工作区</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br><span class="line">致命错误：无法读取远程仓库。</span><br><span class="line"></span><br><span class="line">请确认您有正确的访问权限并且仓库存在。</span><br><span class="line">FATAL Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: Spawn failed</span></span><br><span class="line"><span class="string">    at ChildProcess.&lt;anonymous&gt; (/Users/couture/MyBlog/node_modules/hexo-util/lib/spawn.js:51:21)</span></span><br><span class="line"><span class="string">    at ChildProcess.emit (node:events:514:28)</span></span><br><span class="line"><span class="string">    at ChildProcess._handle.onexit (node:internal/child_process:291:12)</span></span><br></pre></td></tr></table></figure>
<p>这个问题属于电脑没有当前GitHub的账户的ssh公钥，然后给公钥添加到当前电脑即可，添加方式:</p>
<p><a
href="https://blog.csdn.net/qq_40047019/article/details/122898308">添加方式连接</a></p>
<p>添加完成以后，即可正常更新博客~</p>
]]></content>
      <tags>
        <tag>hexo - 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 11取消右键二级菜单</title>
    <url>/Windows-11%E5%8F%96%E6%B6%88%E5%8F%B3%E9%94%AE%E4%BA%8C%E7%BA%A7%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<p>因为不习惯<code>Windows11</code>鼠标右键反人类的二级菜单方式，采用命令的方式给屏蔽掉</p>
<p>修改成<code>Windows10</code>样式</p>
<p><strong>搜索<code>CMD</code>，然后点击管理员运行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot; /f /ve</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>然后回车执行，会提示<code>successful</code></strong></p>
<p><strong>然后去任务管理里面去重启<code>Windows资源管理器</code></strong></p>
<p><img src="https://s2.loli.net/2023/07/21/p3aCJT6njeslfFH.png" /></p>
<p><strong>重启完成以后打开，鼠标右键如下，成功</strong></p>
<p><img src="https://s2.loli.net/2023/07/21/vxnXSlNf8Hp7zsk.png" /></p>
<p>如果想改回原始的，命令如下，重复上面一样的操，作执行<code>命令</code>-&gt;<code>重启Windows资源管理器</code></p>
<p><code>Windows11</code>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reg delete <span class="string">&quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;&quot;</span> /f</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Windows 11</category>
      </categories>
      <tags>
        <tag>Windows 11</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM常快捷键</title>
    <url>/VIM%E5%B8%B8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>下面是一些在 Vim 编辑器中常用的快捷键：</p>
<h4 id="插入模式insert-mode"><strong>插入模式</strong>（Insert
Mode）：</h4>
<span id="more"></span>
<ul>
<li><p><code>i</code>：在当前光标位置进入插入模式。</p></li>
<li><p><code>a</code>：在当前光标后插入文本。</p></li>
<li><p><code>I</code>：在当前行的开头插入文本。</p></li>
<li><p><code>A</code>：在当前行的末尾插入文本。</p></li>
<li><p><code>o</code>：在当前行的下方插入新行。</p></li>
<li><p><code>O</code>：在当前行的上方插入新行。 ####
<strong>命令行模式</strong>（Command Line Mode）：</p></li>
<li><p><code>:</code>：进入命令行模式。</p></li>
<li><p><code>:w</code>：保存文件。</p></li>
<li><p><code>:q</code>：退出 Vim。</p></li>
<li><p><code>:wq</code>：保存文件并退出 Vim。</p></li>
<li><p><code>:q!</code>：强制退出 Vim，丢弃对文件的修改。</p></li>
</ul>
<h4 id="移动光标"><strong>移动光标</strong>：</h4>
<ul>
<li><code>h</code>：向左移动光标。</li>
<li><code>j</code>：向下移动光标。</li>
<li><code>k</code>：向上移动光标。</li>
<li><code>l</code>：向右移动光标。</li>
<li><code>gg</code>：跳到文件开头。</li>
<li><code>G</code>：跳到文件末尾。</li>
<li><code>0</code>：跳到当前行的开头。</li>
<li><code>$</code>：跳到当前行的末尾。</li>
<li><code>w</code>：跳到下一个单词的开头。</li>
<li><code>b</code>：跳到上一个单词的开头。</li>
<li><code>Ctrl + f</code>：向下翻页。</li>
<li><code>Ctrl + b</code>：向上翻页。</li>
</ul>
<h4 id="复制粘贴和删除"><strong>复制、粘贴和删除</strong>：</h4>
<ul>
<li><code>yy</code>：复制当前行。</li>
<li><code>dd</code>：删除当前行。</li>
<li><code>p</code>：粘贴已复制或删除的文本。</li>
<li><code>x</code>：删除当前光标所在位置的字符。</li>
<li><code>u</code>：撤销上一次操作。</li>
<li><code>Ctrl + r</code>：重做上一次撤销的操作。</li>
</ul>
<h4 id="查找和替换"><strong>查找和替换</strong>：</h4>
<ul>
<li><code>/pattern</code>：向下查找匹配的模式。</li>
<li><code>?pattern</code>：向上查找匹配的模式。</li>
<li><code>n</code>：在当前方向上查找下一个匹配。</li>
<li><code>N</code>：在当前方向上查找上一个匹配。</li>
<li><code>:s/old/new</code>：替换当前行中第一个匹配的字符串。</li>
<li><code>:s/old/new/g</code>：替换当前行中所有匹配的字符串。</li>
<li><code>:%s/old/new/g</code>：替换整个文件中所有匹配的字符串。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="linux常用命令">Linux常用命令</h1>
<ol type="1">
<li><strong>ls</strong>：列出目录内容。 <span id="more"></span></li>
<li><strong>cd</strong>：切换目录。</li>
<li><strong>pwd</strong>：显示当前工作目录的路径。</li>
<li><strong>mkdir</strong>：创建目录。</li>
<li><strong>rm</strong>：删除文件或目录。</li>
<li><strong>cp</strong>：复制文件或目录。</li>
<li><strong>mv</strong>：移动文件或目录，或重命名文件或目录。</li>
<li><strong>cat</strong>：显示文件内容。</li>
<li><strong>grep</strong>：在文件中搜索指定模式。</li>
<li><strong>chmod</strong>：修改文件或目录的权限。</li>
<li><strong>chown</strong>：修改文件或目录的所有者。</li>
<li><strong>chgrp</strong>：修改文件或目录的所属组。</li>
<li><strong>sudo</strong>：以超级用户权限执行命令。</li>
<li><strong>apt-get</strong>（Debian/Ubuntu）或
<strong>yum</strong>（CentOS/RHEL）：包管理器，用于安装、更新和卸载软件包。</li>
<li><strong>wget</strong>：从网络下载文件。</li>
<li><strong>ssh</strong>：远程登录到另一台计算机。</li>
<li><strong>tar</strong>：打包和解压文件。</li>
<li><strong>df</strong>：显示文件系统的磁盘使用情况。</li>
<li><strong>top</strong>：实时显示系统资源的使用情况和运行的进程。</li>
<li><strong>ps</strong>：显示当前运行的进程。</li>
<li><strong>kill</strong>：终止正在运行的进程。</li>
<li><strong>ifconfig</strong>（已被 ip
命令取代）：显示和配置网络接口。</li>
<li><strong>ping</strong>：发送 ICMP Echo 请求以测试网络连接。</li>
<li><strong>traceroute</strong>：跟踪数据包在网络中的路径。</li>
<li><strong>man</strong>：查看命令的手册页。</li>
</ol>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo:pandoc exited with code null</title>
    <url>/Hexo-pandoc-exited-with-code-null/</url>
    <content><![CDATA[<h4 id="在hexo更新文章遇到的问题">在hexo更新文章遇到的问题：</h4>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ERROR][hexo-renderer-pandoc] pandoc exited with code null. FATAL Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html Error: [ERROR][hexo-renderer-pandoc] On /Users/couture/MyBlog/source/_posts/C-windows-环境搭建.md [ERROR][hexo-renderer-pandoc] pandoc exited with code null.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">FATAL Something&#x27;</span>s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error:</span><br><span class="line">[ERROR][hexo-renderer-pandoc] On /Users/couture/MyBlog/source/_posts/C-windows-环境搭建.md</span><br><span class="line">[ERROR][hexo-renderer-pandoc] pandoc exited with code null.</span><br><span class="line">at Hexo.pandocRenderer (/Users/couture/MyBlog/node_modules/hexo-renderer-pandoc/index.js:35:11)</span><br><span class="line">at Hexo.tryCatcher (/Users/couture/MyBlog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">at Hexo.&lt;anonymous&gt; (/Users/couture/MyBlog/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class="line">at /Users/couture/MyBlog/node_modules/hexo/lib/hexo/render.js:81:22</span><br><span class="line">at tryCatcher (/Users/couture/MyBlog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">at Promise._settlePromiseFromHandler (/Users/couture/MyBlog/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class="line">at Promise._settlePromise (/Users/couture/MyBlog/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class="line">at Promise._settlePromiseCtx (/Users/couture/MyBlog/node_modules/bluebird/js/release/promise.js:641:10)</span><br><span class="line">at _drainQueueStep (/Users/couture/MyBlog/node_modules/bluebird/js/release/async.js:97:12)</span><br><span class="line">at _drainQueue (/Users/couture/MyBlog/node_modules/bluebird/js/release/async.js:86:9)</span><br><span class="line">at Async._drainQueues (/Users/couture/MyBlog/node_modules/bluebird/js/release/async.js:102:5)</span><br><span class="line">at Async.drainQueues [as _onImmediate] (/Users/couture/MyBlog/node_modules/bluebird/js/release/async.js:15:14)</span><br><span class="line">at process.processImmediate (node:internal/timers:478:21)</span><br></pre></td></tr></table></figure>
<!--more-->
<h4 id="解决方式">解决方式：</h4>
<h5
id="重新安装hexo-renderer-pandoc模块">重新安装<code>hexo-renderer-pandoc</code>模块</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-pandoc</span><br><span class="line">npm install hexo-renderer-pandoc</span><br></pre></td></tr></table></figure>
<h5
id="如不成功用hexo-renderer-marked代替hexo-renderer-pandoc模块渲染器">如不成功，用hexo-renderer-marked代替hexo-renderer-pandoc模块渲染器</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-pandoc</span><br><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure>
<p><strong>问题解决~</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian11 安装 Docker</title>
    <url>/Debian11-%E5%AE%89%E8%A3%85-Docker/</url>
    <content><![CDATA[<h3 id="一安装docker">一、安装<code>Docker</code></h3>
<h4 id="更新系统软件包">1.更新系统软件包</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="安装所需的依赖库和工具">2.安装所需的依赖库和工具：</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure>
<h3
id="添加docker官方gpt秘钥">3.添加<code>Docker</code>官方<code>GPT</code>秘钥：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure>
<h4
id="设置docker稳定版存储库">4.设置<code>Docker</code>稳定版存储库</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>
<h4
id="更新软件包索引这一步可要可不要因为前面已经执行了">5.更新软件包索引：(这一步可要可不要，因为前面已经执行了)</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<h4 id="安装docker引擎">6.安装Docker引擎：</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<h4
id="添加当前用户到docker组">7.添加当前用户到<code>Docker</code>组：</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
<h6 id="安装成功以后提示">安装成功以后提示：</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@Debian:~<span class="comment"># docker version #查看版本</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           24.0.2</span><br><span class="line"> API version:       1.43</span><br><span class="line"> Go version:        go1.20.4</span><br><span class="line"> Git commit:        cb74dfc</span><br><span class="line"> Built:             Thu May 25 21:52:17 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          24.0.2</span><br><span class="line">  API version:      1.43 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.20.4</span><br><span class="line">  Git commit:       659604f</span><br><span class="line">  Built:            Thu May 25 21:52:17 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.21</span><br><span class="line">  GitCommit:        3dce8eb055cbb6872793272b4f20ed16117344f8</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.7</span><br><span class="line">  GitCommit:        v1.1.7-0-g860f061</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure>
<h3 id="二安装docker-compose">二、安装<code>Docker Compose</code></h3>
<p>下载 <code>Docker Compose</code> 二进制文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>添加执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>验证<code>Docker Compose</code>是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Debian</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Debian - Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu UFW 防火墙</title>
    <url>/Ubuntu-UFW-%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<p><code>Ubuntu</code>防火墙（<code>Uncomplicated</code>
<code>Firewall</code>，简称<code>ufw</code>）是一个用户友好的前端工具，用于配置底层的<code>iptables</code>防火墙规则。它旨在简化防火墙的配置过程，使其适用于不熟悉<code>iptables</code>命令的用户。</p>
<h3 id="一安装ufw">一、安装<code>UFW</code></h3>
<p><code>UFW</code> 是标准<code>Ubuntu 20.04</code>
安装过程中的一部分，它应该已经在你的系统上存在。如果因为某些原因，它没有被安装，你可以通过输入下面的命令安装它：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ufw</span><br></pre></td></tr></table></figure> <span id="more"></span> ### 二、检查<code>UFW</code>的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status verbose</span><br></pre></td></tr></table></figure>
<h3 id="三防火墙的基本命令">三、防火墙的基本命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span> <span class="comment"># 启用防火墙</span></span><br><span class="line"></span><br><span class="line">sudo ufw <span class="built_in">disable</span> <span class="comment"># 禁用防火墙</span></span><br><span class="line"></span><br><span class="line">sudo ufw status <span class="comment"># 查看防火墙状态</span></span><br><span class="line"></span><br><span class="line">sudo ufw allow &lt;端口号&gt; <span class="comment"># 允许特定端口</span></span><br><span class="line"></span><br><span class="line">sudo ufw deny &lt;端口号&gt; <span class="comment"># 禁止特定端口</span></span><br><span class="line"></span><br><span class="line">sudo ufw allow from &lt;IP地址&gt; <span class="comment"># 允许特定IP地址访问</span></span><br><span class="line"></span><br><span class="line">sudo ufw deny from &lt;IP地址&gt; <span class="comment"># 禁止特定IP地址访问</span></span><br><span class="line"></span><br><span class="line">sudo ufw allow from &lt;IP地址&gt; to any port &lt;端口号&gt; <span class="comment"># 允许特定IP地址访问特定端口号 </span></span><br><span class="line"></span><br><span class="line">sudo ufw status numbered <span class="comment"># 查看规则编号</span></span><br><span class="line"></span><br><span class="line">sudo ufw delete &lt;规则编号&gt; <span class="comment"># 删除规则</span></span><br></pre></td></tr></table></figure>
<h3 id="四校园网的案例">四、校园网的案例</h3>
<p>校园网访问在国外服务器上部署的网站，并使用<code>ufw</code>进行限制，您可以按照以下步骤进行操作：</p>
<ol type="1">
<li><p>获取校园网的公网<code>IP</code>地址范围：首先，您需要获取校园网的公网<code>IP</code>地址范围。您可以联系您的网络管理员或查阅校园网相关的文档或资料以获取这些信息。</p></li>
<li><p>添加允许规则：使用以下命令，将校园网的公网IP地址范围添加到允许访问的规则中。将
<code>&lt;校园网公网IP范围&gt;</code>
替换为您实际校园网的公网IP地址范围：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow from &lt;校园网公网IP范围&gt; to any</span><br></pre></td></tr></table></figure>
<p>例如，如果校园网的公网IP地址范围是
203.0.113.0/24，可以执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow from 203.0.113.0/24 to any</span><br></pre></td></tr></table></figure>
<p>这将允许来自校园网公网IP范围的流量访问任何端口。</p></li>
<li><p>添加拒绝规则：为了确保只有校园网的公网IP地址可以访问您的网站，您可以添加一条拒绝规则来阻止其他IP地址的访问。使用以下命令添加拒绝规则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw deny from any to any</span><br></pre></td></tr></table></figure>
<p>这将拒绝来自任何其他IP地址的流量访问任何端口。</p></li>
<li><p>确认规则设置：您可以使用以下命令确认规则已正确设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>
<p>此命令将显示当前的<code>ufw</code>规则列表，包括允许和拒绝的规则。</p></li>
<li><p>测试访问：在完成配置后，您可以尝试使用校园网以外的公网<code>IP</code>地址访问您的网站，以确保它们被正确地拒绝访问。只有来自校园网公网IP范围的流量才应该能够访问您的网站。</p></li>
</ol>
<p>请注意，确保在配置之前备份重要的配置文件，并在完成后验证规则已成功设置。同时，了解校园网的公网<code>IP</code>地址范围非常重要，以确保只有受限制的IP地址可以访问您的网站。</p>
]]></content>
      <categories>
        <category>UFW</category>
        <category>Ubuntu UFW 防火墙</category>
      </categories>
      <tags>
        <tag>ufw - 防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>常见网络设备密码</title>
    <url>/%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h3 id="h3c"><code>H3C</code></h3>
<p>（华三）路由器交换机默认用户名和密码</p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>admin</code>或<code>adminer</code></p>
</blockquote>
<span id="more"></span>
<h3 id="huawei"><code>HUAWEI</code></h3>
<p><code>V2R900</code>之前版本</p>
<blockquote>
<p>无需使用用户名和密码</p>
</blockquote>
<p><code>V2R900</code>-<code>V2R10C00</code></p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>admin@huawei.com</code></p>
</blockquote>
<h3 id="cisco"><code>Cisco</code></h3>
<p>思科路由器，交换机大多数默认用户名和密码：</p>
<blockquote>
<p>默认用户名：<code>admin</code>或<code>cisco</code></p>
<p>默认密码：<code>admin</code>或<code>cisco</code></p>
</blockquote>
<h3 id="tp-link"><code>Tp-Link</code></h3>
<p>中心ZTE路由器交换机默认用户名和密码</p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>admin</code></p>
</blockquote>
<h3 id="juniper"><code>Juniper</code></h3>
<ul>
<li><code>Juniper</code>有两种默认用户名和密码</li>
</ul>
<p><code>netscreen</code>设备：</p>
<blockquote>
<p>默认用户名：<code>netscreen</code></p>
<p>默认密码：<code>netscreen</code></p>
</blockquote>
<p><code>SRX</code>设备：</p>
<blockquote>
<p>默认用户名：<code>root</code></p>
<p>默认密码：无（登录以后自己可以设置）</p>
</blockquote>
<h3 id="zte"><code>ZTE</code></h3>
<p>中心<code>ZTE</code>路由器交换机默认用户名和密码</p>
<blockquote>
<p>默认用户名：<code>ZXDSL</code></p>
<p>默认密码：<code>ZXDSL</code></p>
</blockquote>
<h3 id="深信服"><code>深信服</code></h3>
<p>下一代防火墙默认用户名和密码:</p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>admin</code></p>
</blockquote>
<p>全网行为管理AC默认用户名和密码</p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>switch</code></p>
</blockquote>
<h3 id="alcatel"><code>Alcatel</code></h3>
<p><code>Alcatel</code>路由器默认用户名和密码：</p>
<blockquote>
<p>默认用户名：<code>admin</code></p>
<p>默认密码：<code>switch</code></p>
</blockquote>
]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
      <tags>
        <tag>交换机 - 常见网络设备密码</tag>
      </tags>
  </entry>
  <entry>
    <title>交换机巡检命令</title>
    <url>/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B7%A1%E6%A3%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="交换机巡检命令">交换机巡检命令</h1>
<h3 id="一思科交换机">一、思科交换机</h3>
<span id="more"></span>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">show interface stats <span class="comment"># 查看交换所有接口当前接口流量</span></span><br><span class="line">show running<span class="literal">-config</span> <span class="comment">#  查看当前配置信息</span></span><br><span class="line">show version <span class="comment"># 查看ISO版本信息及设备正常运行时间</span></span><br><span class="line">show clock <span class="comment"># 查看设备时钟</span></span><br><span class="line">show vtp status <span class="comment"># 查看交换机vtp配置模式</span></span><br><span class="line">show vtp password <span class="comment"># 查看交换机vtp配置口令</span></span><br><span class="line">show env all <span class="comment"># 插卡设备温度，电源和风扇运转参数及是否报警</span></span><br><span class="line">show inventory <span class="comment"># 调取设备内部板卡出厂模块型号及序列号</span></span><br><span class="line">show spanning<span class="literal">-tree</span> root <span class="comment"># 查看交换机生成树根位置</span></span><br><span class="line">show interface summary <span class="comment"># 查看交换接口当前接口流量</span></span><br><span class="line">show interface |ierrors|FastEthernet|GigabitEthernet <span class="comment"># 查看接口是够存在大量input或output errors 包错误</span></span><br><span class="line">show processses cpu <span class="comment"># 查看设备CPU负载</span></span><br><span class="line">show access<span class="literal">-list</span> <span class="comment">#查看访问控制列表配置及匹配数据包数量</span></span><br><span class="line">show logging <span class="comment"># 查看本机内部日志记录情况</span></span><br><span class="line">show ip route <span class="comment"># 查看路由表</span></span><br><span class="line">show firewall <span class="comment"># 检查防火墙的工作模式</span></span><br><span class="line">show conn count <span class="comment"># 检查防火墙并发数</span></span><br><span class="line">show xlate count <span class="comment"># 检查防火墙nat工作状态</span></span><br></pre></td></tr></table></figure>
<h3 id="二华为h3c交换机">二、华为/H3C交换机</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">system-view <span class="comment"># 进入系统视图</span></span><br><span class="line">user-interface vty 0 4 <span class="comment">#vty就是用telnet/ssh远程进入交换机的界面</span></span><br><span class="line">screen-length 0 <span class="comment"># 指定要在屏幕上显示行数，0默认是没有分页</span></span><br></pre></td></tr></table></figure>
<h4 id="硬件状态iso版本信息检查">1. 硬件状态，ISO版本信息检查</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">display clock <span class="comment">#系统时间</span></span><br><span class="line">display version <span class="comment">#查看版本信息，最近i一次启动的时间</span></span><br><span class="line">display environment <span class="comment">#设备温度</span></span><br><span class="line">display device <span class="comment">#单板运行状态</span></span><br><span class="line">display device manuinfor <span class="comment">#查看设备序列号</span></span><br><span class="line">display power <span class="comment">#查看电源状况</span></span><br><span class="line">display fan <span class="comment">#查看风扇状况</span></span><br><span class="line">disply cpu-usage task <span class="comment">#查看CPU利用率</span></span><br><span class="line">dispaly memory <span class="comment">#查看内存大小和占用率</span></span><br><span class="line">dispaly logbuffer <span class="comment">#日志缓冲区</span></span><br><span class="line"><span class="built_in">dir</span> flash <span class="comment">#查看flash</span></span><br><span class="line">dis boot-loader <span class="comment">#显示软件映像文件</span></span><br><span class="line">display arp <span class="comment">#显示arp表（目的IP和目的Mac的映射关系）</span></span><br><span class="line">display mac-address <span class="comment">#查看mac地址表（二层转发通过mac地址表）</span></span><br><span class="line">display ntp status <span class="comment">#ntp状态信息</span></span><br><span class="line">reset counters interface <span class="comment">#清除接口统计信息，方便下次巡检查看接口错误包是否增加</span></span><br><span class="line">display elabel <span class="comment">#路由器设备命令—查看电子标签信息（华为）改用display device manuinfo</span></span><br><span class="line">display ndp <span class="comment">#路由器设备命令—华三V5版本支持，现在改用display lldp neighbor-information</span></span><br><span class="line">display diagnostic-information <span class="comment">#故障信息收集</span></span><br></pre></td></tr></table></figure>
<h4 id="系统运行配置状态检查">2. 系统运行配置状态检查</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">display interface <span class="comment">#接口流量、链路状态</span></span><br><span class="line"></span><br><span class="line">dis current-configuration inter <span class="comment">#地址分配</span></span><br><span class="line"></span><br><span class="line">dis current-configuration |include ospf <span class="comment">#路由扩散</span></span><br><span class="line"></span><br><span class="line">display ip routing-table <span class="comment">#路由信息</span></span><br><span class="line"></span><br><span class="line">display ip interface <span class="comment">#显示 vlan 端口统计数据</span></span><br><span class="line"></span><br><span class="line">display saved-configuration <span class="comment">#保存配置文件</span></span><br><span class="line"></span><br><span class="line">display logbuffer <span class="comment">#日志信息</span></span><br><span class="line"></span><br><span class="line">display port trunk <span class="comment">#查看参与 trunk 的端口</span></span><br></pre></td></tr></table></figure>
<h4 id="stp信息检查">3. STP信息检查</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">display stp root <span class="comment">#查看 stp 根情况</span></span><br><span class="line"></span><br><span class="line">display stp brief <span class="comment">#查看 stp 简单信息</span></span><br><span class="line"></span><br><span class="line">display stp abnormal-port <span class="comment">#查看是否有非正常端口</span></span><br><span class="line"></span><br><span class="line">display stp region-configuration <span class="comment">#生成树区域配置</span></span><br><span class="line"></span><br><span class="line">display lldp neighbor-information <span class="comment">#查看链路层邻居发现协议（邻居信息）</span></span><br><span class="line"></span><br><span class="line">display tcp status <span class="comment">#路由器设备命令—tcp统计数据</span></span><br><span class="line"></span><br><span class="line">display tcp statistics <span class="comment">#交换机设备命令—tcp统计数据</span></span><br></pre></td></tr></table></figure>
<h4 id="vrrp和端口聚合检查">4.vrrp和端口聚合检查</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">display vrrp <span class="comment">#查看虚拟路由冗余协议</span></span><br><span class="line"></span><br><span class="line">display vrrp statistics <span class="comment">#查看主备用状态</span></span><br><span class="line"></span><br><span class="line">display link-aggregation summary <span class="comment">#查看链路聚合组的情况</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Switch</category>
        <category>交换机</category>
      </categories>
      <tags>
        <tag>Switch</tag>
        <tag>交换机</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac(MacBookPro M1)MySQL无法打开解决方式</title>
    <url>/Mac-MacBookPro-M1-MySQL%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>1.在mac系统的活动监视器里面找到mysqld的进程选择将它关闭掉，然后打开mac上的命令行去执行命令。</p>
<span id="more"></span>
<p>2.在命令行之中执行命令去给mysql数据库的安装目录赋予一个可以进行读写和执行任意操作的权限，在服务能够运行的情况下无法启动的原因基本上都是因为权限和配置文件的问题所导致的，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R mysql /usr/local/mysql/data</span><br></pre></td></tr></table></figure>
<p>3.命令执行完毕之后再次输入命令去启动mysql数据库，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/mysql/support-files/mysql.server start</span><br></pre></td></tr></table></figure>
<p>4.执行完毕成功以后出现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Starting MySQL</span><br><span class="line">.Logging to <span class="string">&#x27;/usr/local/mysql/data/couturedeMacBook-Pro.local.err&#x27;</span>.</span><br><span class="line"> SUCCESS!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>小知识</title>
    <url>/%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="dtu和rtu是什么">DTU和RTU是什么：</h3>
<p>​ DTU和RTU都是指用于远程监控和控制的设备，但它们有不同的含义。
<span id="more"></span></p>
<p>DTU是数据传输单元（Data Transfer
Unit）的缩写，是一种远程数据传输设备。它通常是安装在现场设备上的一种小型智能终端，可以采集现场设备的数据，并通过无线通信或有线通信方式将数据传输到远程服务器或云平台。DTU通常具有数据采集、处理、传输和存储等多种功能。</p>
<p>RTU是远程终端单元（Remote Terminal
Unit）的缩写，是一种用于远程监控和控制的设备。它通常是安装在现场设备上的一种小型智能终端，可以采集现场设备的数据，并通过无线通信或有线通信方式将数据传输到远程监控中心。RTU通常具有数据采集、处理、控制和报警等多种功能。</p>
<h3 id="rs232rs485接口">RS232/RS485接口：</h3>
<p>​
RS232和RS485都是串行通信接口标准，它们用于在计算机和其他设备之间传输数据。</p>
<p>RS232是一种串行通信标准，用于在计算机和其他设备之间传输数据。它常用于连接调制解调器、打印机、传真机、条形码扫描器等设备。RS232标准规定了数据传输的电气特性、信号格式、数据传输速率等参数。</p>
<p>RS485也是一种串行通信标准，用于在计算机和其他设备之间传输数据。它通常用于连接多个设备，如传感器、控制器、PLC等。RS485标准规定了数据传输的电气特性、信号格式、数据传输速率等参数，并支持多点通信和差分信号传输，可以实现更远距离的数据传输和更可靠的数据传输。</p>
]]></content>
      <categories>
        <category>Agreement</category>
      </categories>
      <tags>
        <tag>Agreement</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建ChatGPT关闭NGINX缓存实现官方回答效果</title>
    <url>/%E6%90%AD%E5%BB%BAChatGPT%E5%85%B3%E9%97%ADNGINX%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E5%AE%98%E6%96%B9%E5%9B%9E%E7%AD%94%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>下面是Nginx配置反向代理方式，当然不仅仅这一种方式</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen 80;</span><br><span class="line"></span><br><span class="line">server_name xx.xx; <span class="comment"># 域名</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 301 https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen 443 ssl http2;</span><br><span class="line"></span><br><span class="line">server_name xx.cn; <span class="comment"># 域名</span></span><br><span class="line"></span><br><span class="line">ssl_certificate /etc/nginx/certs/cert08.pem;</span><br><span class="line"></span><br><span class="line">ssl_certificate_key /etc/nginx/certs/key08.pem;</span><br><span class="line"></span><br><span class="line">location /&#123;</span><br><span class="line"></span><br><span class="line">  proxy_pass http://zxx.xx.xx:3000; <span class="comment"># 服务器的地址</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 这里是重点，在这里是关闭缓存方式</span></span><br><span class="line">  proxy_buffering off; <span class="comment"># 禁用缓存</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">  proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">  proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ChatGPT</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>ChatGPT - NGINX</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu使用ssh连接有输入命令有提示</title>
    <url>/Ubuntu%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E6%9C%89%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E6%9C%89%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p>Ubuntu使用默认的OpenSSH服务作为SSH服务器，当您使用SSH连接到远程计算机时，如果需要有命令提示，您需要完成以下步骤：</p>
<ol type="1">
<li>登录到您的远程计算机 <span id="more"></span><br />
</li>
<li>打开您的<code>SSH</code>配置文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>将以下行添加到配置文件的末尾：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitUserEnvironment <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li><p>保存并关闭文件</p></li>
<li><p>重新启动<code>SSH</code>服务器</p></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>
<ol start="6" type="1">
<li>创建一个<code>.bashrc</code>文件并添加一些变量</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure>
<ol start="7" type="1">
<li>添加以下行到文本中：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PS1=<span class="string">&quot;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ &quot;</span></span><br></pre></td></tr></table></figure>
<p>这会设置您的提示符。</p>
<ol start="8" type="1">
<li><p>保存并关闭文件</p></li>
<li><p>重新加载<code>bashrc</code>文件</p></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>这能确保让<code>.bashrc</code>的变更生效。</p>
<p>从现在开始，在使用<code>SSH</code>连接到远程计算机时，您应该会在输入命令时获得提示。</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>Ubuntu - SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu卸载Nginx和替换配置文件</title>
    <url>/Ubuntu%E5%8D%B8%E8%BD%BDNginx%E5%92%8C%E6%9B%BF%E6%8D%A2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="卸载nginx">1、卸载Nginx</h3>
<ol type="1">
<li>停止 Nginx 服务：</li>
</ol>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nginx</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>删除 Nginx：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove nginx</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>删除 Nginx 配置文件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /etc/nginx/</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>删除 Nginx 日志文件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /var/log/nginx/</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>最后，删除 Nginx 用户和用户组：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo deluser --remove-home nginx</span><br><span class="line">sudo delgroup nginx</span><br></pre></td></tr></table></figure>
<p>完成以上步骤后，就成功卸载 Nginx。</p>
<h3 id="配置文件替换重置配置文件">2、配置文件替换（重置配置文件）</h3>
<p>1.打开终端，输入以下命令停止NGINX服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nginx</span><br></pre></td></tr></table></figure>
<p>2.备份NGINX的当前配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak</span><br></pre></td></tr></table></figure>
<p>3.恢复默认的NGINX配置文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp <span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf.default /</span>etc<span class="regexp">/nginx/</span>nginx.conf</span><br></pre></td></tr></table></figure>
<p>4.检查配置文件是否有错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure>
<p>5.如果没有错误，则重新启动NGINX服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure>
<p>现在，您的NGINX服务应该已经重置并重新启动。</p>
<h3 id="安装nginx">3、安装Nginx</h3>
<ol type="1">
<li>打开命令终端，更新软件仓库信息：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>安装完成后，您可以启动NGINX并将其添加到启动项：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start nginx` `sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>检查NGINX是否正在运行：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure>
<p>如果看到“Active: active
(running)”的状态，则说明NGINX已成功安装并正在运行。</p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>运维</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Nginx - 运维</tag>
      </tags>
  </entry>
  <entry>
    <title>CLOUDFLARE关闭缓存</title>
    <url>/CLOUDFLARE%E5%85%B3%E9%97%AD%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>​
关于CLOUDFLARE注册托管什么我就不在这里做过多的介绍了，按照官方指引一步步来就行了，给你的域名托管进去即可。</p>
<p>下面是关闭CLOUDFLARE缓存。 <span id="more"></span></p>
<p><strong>打开域名管理界面，选择界面规则，然后创建页面规则，页面需要创建两次。</strong></p>
<p><img src="https://s2.loli.net/2023/04/29/ks1eIC9AWdpwlqz.png" /></p>
<p><strong>URL填写你的域名地址，创建页面第一次</strong></p>
<p><strong>模板:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(你的域名)/*</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/04/29/T3G9lrQFto8dahf.png" /></p>
<p><strong>重复上面的操作再来一次。</strong></p>
<p><strong>第二次模版：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*.(你的域名)/*</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/04/29/v2j5zm1eTPwbISE.png" /></p>
<p><strong>配置完成以后的结果：</strong></p>
<p><img src="https://s2.loli.net/2023/04/29/ZWnsuk7IrB1JTi6.png" /></p>
]]></content>
      <categories>
        <category>Cloudflare</category>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
        <tag>Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 优化</title>
    <url>/Docker-%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>由于<code>Docker</code>部署项目之后访问有些慢，考虑到服务器的性能比较弱，
<code>Docker</code>优化方案解决</p>
</blockquote>
<span id="more"></span>
<p>Docker的缓存会随着时间的推移不断增长，清理缓存可以减小磁盘占用，提高系统性能。以下是清理Docker缓存的方法：</p>
<ol type="1">
<li>清理没有使用的镜像和容器。这些未使用的镜像和容器会占用系统的空间，可以使用以下命令来清理：</li>
</ol>
<ul>
<li>清理未运行的容器：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker container prune -f</span><br></pre></td></tr></table></figure>
<ul>
<li>清理未使用的镜像：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image prune -a -f</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>清理未使用的数据卷。在使用数据卷的情况下，可以使用以下命令来清理没有关联容器的数据卷：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume prune -f</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li><p>改变Docker的镜像存储位置。可以在Docker守护进程启动时设置<code>--data-root</code>参数，指定Docker镜像存储的位置，或者通过软链接等方法来改变Docker镜像目录。</p></li>
<li><p>定期清理Docker镜像缓存。可以通过以下命令来清理Docker镜像缓存：</p></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system prune -a -f --volumes</span><br></pre></td></tr></table></figure>
<p>这个命令会清理Docker镜像、容器、网络和数据卷等不再使用的资源。</p>
<p>清理Docker缓存是一个健壮的管理实践，可以帮助系统保持最佳性能，减少磁盘占用</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows11跳过开机联网</title>
    <url>/Windows11%E8%B7%B3%E8%BF%87%E5%BC%80%E6%9C%BA%E8%81%94%E7%BD%91/</url>
    <content><![CDATA[<p>这时候在激活界面调出<code>CMD</code>界面,输入命令：</p>
<blockquote>
<p>调出CMD界面的快捷键是：<code>Shift+F10</code>或者是<code>Fn+Shift+F10</code>
<span id="more"></span></p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">obbe\bypasssnro</span><br></pre></td></tr></table></figure>
<p>执行以后回车，等待加载即可！！</p>
]]></content>
      <categories>
        <category>Windows 11 - 运维</category>
      </categories>
      <tags>
        <tag>Windows 11 - 运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 设置开机自动（关闭）启动MySQL</title>
    <url>/Mac-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%EF%BC%88%E5%85%B3%E9%97%AD%EF%BC%89%E5%90%AF%E5%8A%A8MySQL/</url>
    <content><![CDATA[<blockquote>
<p>注意：本次设备是MacBookPro M1Pro版本</p>
</blockquote>
<p>打开终端应用</p>
<p>如果过启动关闭MySQL，输入以下命令：</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo launchctl <span class="built_in">disable</span> system/com.oracle.oss.mysql.mysqld</span><br></pre></td></tr></table></figure>
<p>系统会提示输入管理员密码，输入密码后按下回车键。</p>
<p>执行命令后，MySQL将会停止运行，你可以在终端中确认MySQL已被成功关闭。</p>
<p>如果想要启动自动开机MySQL，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo launchctl <span class="built_in">enable</span> system/com.oracle.oss.mysql.mysqld</span><br></pre></td></tr></table></figure>
<p>这样可以启动MySQL并开始运行~</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL - Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu SSH连接MySQL报错</title>
    <url>/Ubuntu-SSH%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h3 id="报错内容">报错内容：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[28000][1698] Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;10.211.55.22&#x27;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/b1ec3ad37670b94ee13ae571d0dc9f7f.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/e92246d9f5d9f15c20b70b597ccb6d2c.png" /></p>
<h3 id="导致问题出现的原因">导致问题出现的原因：</h3>
<p>​ 在 MySQL 5.7.6 及以上版本中，为了提高安全性，MySQL 将默认禁止
<code>root</code> 用户从远程主机登录。因此，如果你在安装 MySQL
时选择了默认配置，则在远程主机上使用 <code>root</code>
用户名和密码连接到 MySQL 服务器时将会失败。</p>
<h3 id="解决方式">解决方式：</h3>
<p>​
首先你得防火墙规则要放通端口<code>3306</code>,如果是虚拟机内网的情况，也可以直接给防火墙关掉。</p>
<p>​ 然后可以直接新添加一个用户，用来管理MySQL。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;username&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27;; # username 你的用户名  password 你要设置的密码</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES; # 刷新</span><br></pre></td></tr></table></figure>
<p>这时候再次连接就能连接成功了~</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230417123523144.png" /></p>
<p> </p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>运维</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac（M1Pro安装Redis）</title>
    <url>/Mac%EF%BC%88M1Pro%E5%AE%89%E8%A3%85Redis%EF%BC%89/</url>
    <content><![CDATA[<p>采用<code>homebrew</code>安装Redis，前提是Mac已经安装Redis</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ brew install redis <span class="comment"># 执行这个命令来安装Redis</span></span><br><span class="line">Running `brew update --auto-update`...</span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/formula.jws.json</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Fetching redis</span><br><span class="line">==&gt; Downloading https://mirrors.aliyun.com/homebrew/homebrew-bottles/redis-7.0.1</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Pouring redis-7.0.10.arm64_monterey.bottle.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To start redis now and restart at login:</span><br><span class="line">  brew services start redis</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /opt/homebrew/Cellar/redis/7.0.10: 14 files, 2.7MB</span><br><span class="line">==&gt; Running `brew cleanup redis`...</span><br><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br><span class="line">➜  ~ brew services start redis</span><br><span class="line">==&gt; Downloading https://formulae.brew.sh/api/formula.jws.json</span><br><span class="line"><span class="comment">##O=#  #</span></span><br><span class="line">Warning: Calling formula.plist_path is deprecated! Use formula.launchd_service_path instead.</span><br><span class="line">Please report this issue to the homebrew/services tap (not Homebrew/brew or Homebrew/homebrew-core), or even better, submit a PR to fix it:</span><br><span class="line">  /opt/homebrew/Library/Taps/homebrew/homebrew-services/lib/service/formula_wrapper.rb:58</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ redis-cli <span class="comment"># 启动redis</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name couture</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;couture&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; shutdown <span class="comment"># 关闭</span></span><br><span class="line">not connected&gt; quit  <span class="comment"># 退出</span></span><br></pre></td></tr></table></figure>
<p>在<code>homebrew</code>安装的时候也出现一个问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Warning: Calling formula.plist_path is deprecated! Use formula.launchd_service_path instead.</span><br><span class="line">Please report this issue to the homebrew/services tap (not Homebrew/brew or Homebrew/homebrew-core), or even better, submit a PR to fix it:</span><br><span class="line">  /opt/homebrew/Library/Taps/homebrew/homebrew-services/lib/service/formula_wrapper.rb:58</span><br></pre></td></tr></table></figure>
<p>需要修复什么东西</p>
<p>然后只需要执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">unset</span> HOMEBREW_BOTTLE_DOMAIN</span><br></pre></td></tr></table></figure>
<p>问题解决~</p>
]]></content>
      <categories>
        <category>redis</category>
        <category>Mac</category>
        <category>Homebrew</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 8 字符集报错解决方法</title>
    <url>/CentOS-8-%E5%AD%97%E7%AC%A6%E9%9B%86%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h5 id="首先是错误如下">首先是错误如下：</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-4-3-centos ~]<span class="comment"># yum install -y yum-utils</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8     <span class="comment"># 这里是出现了 UTF-8字符集的问题</span></span><br><span class="line">Last metadata expiration check: 0:02:34 ago on Fri Apr  7 17:29:02 2023.</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="解决方式">解决方式：</h5>
<p>执行一下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export LC_ALL=en_US.UTF-8&quot;</span>  &gt;&gt;  /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export LC_CTYPE=en_US.UTF-8&quot;</span>  &gt;&gt;  /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<p>在安装软件，不会有报错提示，问题得到了解决~</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>CentOS 8</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS 8</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 8 安装Docker</title>
    <url>/CentOS-8-%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h3 id="安装过程">安装过程</h3>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-4-3-centos ~]<span class="comment"># yum remove docker</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">No match <span class="keyword">for</span> argument: docker</span><br><span class="line">No packages marked <span class="keyword">for</span> removal.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">Nothing to <span class="keyword">do</span>.</span><br><span class="line">Complete!</span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># yum remove docker *</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">No match <span class="keyword">for</span> argument: docker</span><br><span class="line">Error:</span><br><span class="line">Problem: The operation would result <span class="keyword">in</span> removing the following protected packages: dnf, kernel-core, setup, sudo, systemd, systemd-udev, yum</span><br><span class="line">(try to add <span class="string">&#x27;--skip-broken&#x27;</span> to skip uninstallable packages or <span class="string">&#x27;--nobest&#x27;</span> to use not only best candidate packages)</span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># yum install -y yum-utils</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">Last metadata expiration check: 0:02:34 ago on Fri Apr  7 17:29:02 2023.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================================</span><br><span class="line">Package                          Architecture   Version                Repository         Size</span><br><span class="line">================================================================================================</span><br><span class="line">Installing:</span><br><span class="line">yum-utils                        noarch         4.0.21-18.el8          baseos             75 k</span><br><span class="line">Upgrading:</span><br><span class="line">dnf                              noarch         4.7.0-15.el8           baseos            542 k</span><br><span class="line">dnf-data                         noarch         4.7.0-15.el8           baseos            156 k</span><br><span class="line">dnf-plugins-core                 noarch         4.0.21-18.el8          baseos             75 k</span><br><span class="line">libdnf                           x86_64         0.63.0-13.el8          baseos            704 k</span><br><span class="line">libsolv                          x86_64         0.7.20-4.el8           baseos            376 k</span><br><span class="line">python3-dnf                      noarch         4.7.0-15.el8           baseos            550 k</span><br><span class="line">python3-dnf-plugins-core         noarch         4.0.21-18.el8          baseos            258 k</span><br><span class="line">python3-hawkey                   x86_64         0.63.0-13.el8          baseos            117 k</span><br><span class="line">python3-libdnf                   x86_64         0.63.0-13.el8          baseos            779 k</span><br><span class="line">yum                              noarch         4.7.0-15.el8           baseos            208 k</span><br><span class="line">Installing dependencies:</span><br><span class="line">python3-systemd                  x86_64         234-8.el8              appstream          81 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================================</span><br><span class="line">Install   2 Packages</span><br><span class="line">Upgrade  10 Packages</span><br><span class="line"></span><br><span class="line">Total download size: 3.8 M</span><br><span class="line">Downloading Packages:</span><br><span class="line">(1/12): python3-systemd-234-8.el8.x86_64.rpm                    2.9 MB/s |  81 kB     00:00</span><br><span class="line">(2/12): yum-utils-4.0.21-18.el8.noarch.rpm                      2.2 MB/s |  75 kB     00:00</span><br><span class="line">(3/12): dnf-plugins-core-4.0.21-18.el8.noarch.rpm               4.2 MB/s |  75 kB     00:00</span><br><span class="line">(4/12): dnf-4.7.0-15.el8.noarch.rpm                             8.0 MB/s | 542 kB     00:00</span><br><span class="line">(5/12): dnf-data-4.7.0-15.el8.noarch.rpm                        3.1 MB/s | 156 kB     00:00</span><br><span class="line">(6/12): libsolv-0.7.20-4.el8.x86_64.rpm                          10 MB/s | 376 kB     00:00</span><br><span class="line">(7/12): python3-dnf-plugins-core-4.0.21-18.el8.noarch.rpm       8.2 MB/s | 258 kB     00:00</span><br><span class="line">(8/12): libdnf-0.63.0-13.el8.x86_64.rpm                         6.5 MB/s | 704 kB     00:00</span><br><span class="line">(9/12): python3-hawkey-0.63.0-13.el8.x86_64.rpm                 3.2 MB/s | 117 kB     00:00</span><br><span class="line">(10/12): python3-dnf-4.7.0-15.el8.noarch.rpm                    4.7 MB/s | 550 kB     00:00</span><br><span class="line">(11/12): yum-4.7.0-15.el8.noarch.rpm                            5.4 MB/s | 208 kB     00:00</span><br><span class="line">(12/12): python3-libdnf-0.63.0-13.el8.x86_64.rpm                9.5 MB/s | 779 kB     00:00</span><br><span class="line">------------------------------------------------------------------------------------------------</span><br><span class="line">Total                                                            16 MB/s | 3.8 MB     00:00</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction <span class="built_in">test</span></span><br><span class="line">Transaction <span class="built_in">test</span> succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">Preparing        :                                                                        1/1</span><br><span class="line">Running scriptlet: libsolv-0.7.20-4.el8.x86_64                                            1/1</span><br><span class="line">Upgrading        : libsolv-0.7.20-4.el8.x86_64                                           1/22</span><br><span class="line">Upgrading        : libdnf-0.63.0-13.el8.x86_64                                           2/22</span><br><span class="line">Upgrading        : python3-libdnf-0.63.0-13.el8.x86_64                                   3/22</span><br><span class="line">Upgrading        : python3-hawkey-0.63.0-13.el8.x86_64                                   4/22</span><br><span class="line">Upgrading        : dnf-data-4.7.0-15.el8.noarch                                          5/22</span><br><span class="line">Upgrading        : python3-dnf-4.7.0-15.el8.noarch                                       6/22</span><br><span class="line">Upgrading        : dnf-4.7.0-15.el8.noarch                                               7/22</span><br><span class="line">Running scriptlet: dnf-4.7.0-15.el8.noarch                                               7/22</span><br><span class="line">Installing       : python3-systemd-234-8.el8.x86_64                                      8/22</span><br><span class="line">Upgrading        : python3-dnf-plugins-core-4.0.21-18.el8.noarch                         9/22</span><br><span class="line">Upgrading        : dnf-plugins-core-4.0.21-18.el8.noarch                                10/22</span><br><span class="line">Installing       : yum-utils-4.0.21-18.el8.noarch                                       11/22</span><br><span class="line">Upgrading        : yum-4.7.0-15.el8.noarch                                              12/22</span><br><span class="line">Cleanup          : yum-4.7.0-5.el8.noarch                                               13/22</span><br><span class="line">Running scriptlet: dnf-4.7.0-5.el8.noarch                                               14/22</span><br><span class="line">Cleanup          : dnf-4.7.0-5.el8.noarch                                               14/22</span><br><span class="line">Running scriptlet: dnf-4.7.0-5.el8.noarch                                               14/22</span><br><span class="line">Cleanup          : dnf-plugins-core-4.0.21-7.el8.noarch                                 15/22</span><br><span class="line">Cleanup          : python3-dnf-plugins-core-4.0.21-7.el8.noarch                         16/22</span><br><span class="line">Cleanup          : python3-dnf-4.7.0-5.el8.noarch                                       17/22</span><br><span class="line">Cleanup          : python3-hawkey-0.63.0-5.el8.x86_64                                   18/22</span><br><span class="line">Cleanup          : dnf-data-4.7.0-5.el8.noarch                                          19/22</span><br><span class="line">Cleanup          : python3-libdnf-0.63.0-5.el8.x86_64                                   20/22</span><br><span class="line">Cleanup          : libdnf-0.63.0-5.el8.x86_64                                           21/22</span><br><span class="line">Cleanup          : libsolv-0.7.20-1.el8.x86_64                                          22/22</span><br><span class="line">Running scriptlet: libsolv-0.7.20-1.el8.x86_64                                          22/22</span><br><span class="line">Verifying        : python3-systemd-234-8.el8.x86_64                                      1/22</span><br><span class="line">Verifying        : yum-utils-4.0.21-18.el8.noarch                                        2/22</span><br><span class="line">Verifying        : dnf-4.7.0-15.el8.noarch                                               3/22</span><br><span class="line">Verifying        : dnf-4.7.0-5.el8.noarch                                                4/22</span><br><span class="line">Verifying        : dnf-data-4.7.0-15.el8.noarch                                          5/22</span><br><span class="line">Verifying        : dnf-data-4.7.0-5.el8.noarch                                           6/22</span><br><span class="line">Verifying        : dnf-plugins-core-4.0.21-18.el8.noarch                                 7/22</span><br><span class="line">Verifying        : dnf-plugins-core-4.0.21-7.el8.noarch                                  8/22</span><br><span class="line">Verifying        : libdnf-0.63.0-13.el8.x86_64                                           9/22</span><br><span class="line">Verifying        : libdnf-0.63.0-5.el8.x86_64                                           10/22</span><br><span class="line">Verifying        : libsolv-0.7.20-4.el8.x86_64                                          11/22</span><br><span class="line">Verifying        : libsolv-0.7.20-1.el8.x86_64                                          12/22</span><br><span class="line">Verifying        : python3-dnf-4.7.0-15.el8.noarch                                      13/22</span><br><span class="line">Verifying        : python3-dnf-4.7.0-5.el8.noarch                                       14/22</span><br><span class="line">Verifying        : python3-dnf-plugins-core-4.0.21-18.el8.noarch                        15/22</span><br><span class="line">Verifying        : python3-dnf-plugins-core-4.0.21-7.el8.noarch                         16/22</span><br><span class="line">Verifying        : python3-hawkey-0.63.0-13.el8.x86_64                                  17/22</span><br><span class="line">Verifying        : python3-hawkey-0.63.0-5.el8.x86_64                                   18/22</span><br><span class="line">Verifying        : python3-libdnf-0.63.0-13.el8.x86_64                                  19/22</span><br><span class="line">Verifying        : python3-libdnf-0.63.0-5.el8.x86_64                                   20/22</span><br><span class="line">Verifying        : yum-4.7.0-15.el8.noarch                                              21/22</span><br><span class="line">Verifying        : yum-4.7.0-5.el8.noarch                                               22/22</span><br><span class="line"></span><br><span class="line">Upgraded:</span><br><span class="line">dnf-4.7.0-15.el8.noarch                             dnf-data-4.7.0-15.el8.noarch</span><br><span class="line">dnf-plugins-core-4.0.21-18.el8.noarch               libdnf-0.63.0-13.el8.x86_64</span><br><span class="line">libsolv-0.7.20-4.el8.x86_64                         python3-dnf-4.7.0-15.el8.noarch</span><br><span class="line">python3-dnf-plugins-core-4.0.21-18.el8.noarch       python3-hawkey-0.63.0-13.el8.x86_64</span><br><span class="line">python3-libdnf-0.63.0-13.el8.x86_64                 yum-4.7.0-15.el8.noarch</span><br><span class="line">Installed:</span><br><span class="line">python3-systemd-234-8.el8.x86_64                yum-utils-4.0.21-18.el8.noarch</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line"></span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># yum-config-manager \</span></span><br><span class="line">&gt; --add-repo \</span><br><span class="line">&gt; http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">Adding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># sudo yum install -y docker-ce docker-ce-cli containerd.io</span></span><br><span class="line">Failed to <span class="built_in">set</span> locale, defaulting to C.UTF-8</span><br><span class="line">Docker CE Stable - x86_64                                       153 kB/s |  40 kB     00:00</span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================================</span><br><span class="line">Package                 Arch   Version                                  Repository        Size</span><br><span class="line">================================================================================================</span><br><span class="line">Installing:</span><br><span class="line">containerd.io           x86_64 1.6.20-3.1.el8                           docker-ce-stable  34 M</span><br><span class="line">docker-ce               x86_64 3:23.0.3-1.el8                           docker-ce-stable  23 M</span><br><span class="line">docker-ce-cli           x86_64 1:23.0.3-1.el8                           docker-ce-stable 7.1 M</span><br><span class="line">Installing dependencies:</span><br><span class="line">checkpolicy             x86_64 2.9-1.el8                                baseos           348 k</span><br><span class="line">container-selinux       noarch 2:2.195.1-1.module_el8.8.0+1254+78119b6e appstream         63 k</span><br><span class="line">docker-ce-rootless-extras</span><br><span class="line">x86_64 23.0.3-1.el8                             docker-ce-stable 4.8 M</span><br><span class="line">fuse-common             x86_64 3.3.0-16.el8                             baseos            22 k</span><br><span class="line">fuse-overlayfs          x86_64 1.10-1.module_el8.8.0+1254+78119b6e      appstream         74 k</span><br><span class="line">fuse3                   x86_64 3.3.0-16.el8                             baseos            54 k</span><br><span class="line">fuse3-libs              x86_64 3.3.0-16.el8                             baseos            95 k</span><br><span class="line">libcgroup               x86_64 0.41-19.el8                              baseos            70 k</span><br><span class="line">libslirp                x86_64 4.4.0-1.module_el8.7.0+1216+b022c01d     appstream         70 k</span><br><span class="line">policycoreutils-python-utils</span><br><span class="line">noarch 2.9-17.el8                               baseos           252 k</span><br><span class="line">python3-audit           x86_64 3.0-0.17.20191104git1c2f876.el8          baseos            86 k</span><br><span class="line">python3-libsemanage     x86_64 2.9-6.el8                                baseos           127 k</span><br><span class="line">python3-policycoreutils noarch 2.9-17.el8                               baseos           2.2 M</span><br><span class="line">python3-setools         x86_64 4.3.0-3.el8                              baseos           624 k</span><br><span class="line">slirp4netns             x86_64 1.2.0-2.module_el8.7.0+1216+b022c01d     appstream         54 k</span><br><span class="line">Installing weak dependencies:</span><br><span class="line">docker-buildx-plugin    x86_64 0.10.4-1.el8                             docker-ce-stable  12 M</span><br><span class="line">docker-compose-plugin   x86_64 2.17.2-1.el8                             docker-ce-stable  12 M</span><br><span class="line">Enabling module streams:</span><br><span class="line">container-tools                rhel8</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================================</span><br><span class="line">Install  20 Packages</span><br><span class="line"></span><br><span class="line">Total download size: 97 M</span><br><span class="line">Installed size: 367 M</span><br><span class="line">Downloading Packages:</span><br><span class="line">(1/20): container-selinux-2.195.1-1.module_el8.8.0+1254+78119b6 1.6 MB/s |  63 kB     00:00</span><br><span class="line">(2/20): fuse-overlayfs-1.10-1.module_el8.8.0+1254+78119b6e.x86_ 1.6 MB/s |  74 kB     00:00</span><br><span class="line">(3/20): libslirp-4.4.0-1.module_el8.7.0+1216+b022c01d.x86_64.rp 1.3 MB/s |  70 kB     00:00</span><br><span class="line">(4/20): slirp4netns-1.2.0-2.module_el8.7.0+1216+b022c01d.x86_64 2.6 MB/s |  54 kB     00:00</span><br><span class="line">(5/20): fuse-common-3.3.0-16.el8.x86_64.rpm                     1.6 MB/s |  22 kB     00:00</span><br><span class="line">(6/20): fuse3-3.3.0-16.el8.x86_64.rpm                           3.2 MB/s |  54 kB     00:00</span><br><span class="line">(7/20): fuse3-libs-3.3.0-16.el8.x86_64.rpm                      4.0 MB/s |  95 kB     00:00</span><br><span class="line">(8/20): libcgroup-0.41-19.el8.x86_64.rpm                        3.0 MB/s |  70 kB     00:00</span><br><span class="line">(9/20): checkpolicy-2.9-1.el8.x86_64.rpm                        4.3 MB/s | 348 kB     00:00</span><br><span class="line">(10/20): python3-audit-3.0-0.17.20191104git1c2f876.el8.x86_64.r 2.8 MB/s |  86 kB     00:00</span><br><span class="line">(11/20): policycoreutils-python-utils-2.9-17.el8.noarch.rpm     4.6 MB/s | 252 kB     00:00</span><br><span class="line">(12/20): python3-libsemanage-2.9-6.el8.x86_64.rpm               3.6 MB/s | 127 kB     00:00</span><br><span class="line">(13/20): python3-setools-4.3.0-3.el8.x86_64.rpm                 6.8 MB/s | 624 kB     00:00</span><br><span class="line">(14/20): python3-policycoreutils-2.9-17.el8.noarch.rpm          7.9 MB/s | 2.2 MB     00:00</span><br><span class="line">(15/20): docker-buildx-plugin-0.10.4-1.el8.x86_64.rpm           634 kB/s |  12 MB     00:19</span><br><span class="line">(16/20): docker-ce-cli-23.0.3-1.el8.x86_64.rpm                  623 kB/s | 7.1 MB     00:11</span><br><span class="line">(17/20): docker-ce-23.0.3-1.el8.x86_64.rpm                      661 kB/s |  23 MB     00:36</span><br><span class="line">(18/20): docker-ce-rootless-extras-23.0.3-1.el8.x86_64.rpm      676 kB/s | 4.8 MB     00:07</span><br><span class="line">(19/20): containerd.io-1.6.20-3.1.el8.x86_64.rpm                714 kB/s |  34 MB     00:48</span><br><span class="line">(20/20): docker-compose-plugin-2.17.2-1.el8.x86_64.rpm          761 kB/s |  12 MB     00:15</span><br><span class="line">------------------------------------------------------------------------------------------------</span><br><span class="line">Total                                                           1.9 MB/s |  97 MB     00:52</span><br><span class="line">Docker CE Stable - x86_64                                        18 kB/s | 1.6 kB     00:00</span><br><span class="line">Importing GPG key 0x621E9F35:</span><br><span class="line">Userid     : <span class="string">&quot;Docker Release (CE rpm) &lt;docker@docker.com&gt;&quot;</span></span><br><span class="line">Fingerprint: 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</span><br><span class="line">From       : https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line">Key imported successfully</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction <span class="built_in">test</span></span><br><span class="line">Transaction <span class="built_in">test</span> succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">Preparing        :                                                                        1/1</span><br><span class="line">Installing       : docker-compose-plugin-2.17.2-1.el8.x86_64                             1/20</span><br><span class="line">Running scriptlet: docker-compose-plugin-2.17.2-1.el8.x86_64                             1/20</span><br><span class="line">Installing       : fuse3-libs-3.3.0-16.el8.x86_64                                        2/20</span><br><span class="line">Running scriptlet: fuse3-libs-3.3.0-16.el8.x86_64                                        2/20</span><br><span class="line">Installing       : docker-buildx-plugin-0.10.4-1.el8.x86_64                              3/20</span><br><span class="line">Running scriptlet: docker-buildx-plugin-0.10.4-1.el8.x86_64                              3/20</span><br><span class="line">Installing       : docker-ce-cli-1:23.0.3-1.el8.x86_64                                   4/20</span><br><span class="line">Running scriptlet: docker-ce-cli-1:23.0.3-1.el8.x86_64                                   4/20</span><br><span class="line">Installing       : python3-setools-4.3.0-3.el8.x86_64                                    5/20</span><br><span class="line">Installing       : python3-libsemanage-2.9-6.el8.x86_64                                  6/20</span><br><span class="line">Installing       : python3-audit-3.0-0.17.20191104git1c2f876.el8.x86_64                  7/20</span><br><span class="line">Running scriptlet: libcgroup-0.41-19.el8.x86_64                                          8/20</span><br><span class="line">Installing       : libcgroup-0.41-19.el8.x86_64                                          8/20</span><br><span class="line">Running scriptlet: libcgroup-0.41-19.el8.x86_64                                          8/20</span><br><span class="line">Installing       : fuse-common-3.3.0-16.el8.x86_64                                       9/20</span><br><span class="line">Installing       : fuse3-3.3.0-16.el8.x86_64                                            10/20</span><br><span class="line">Installing       : fuse-overlayfs-1.10-1.module_el8.8.0+1254+78119b6e.x86_64            11/20</span><br><span class="line">Running scriptlet: fuse-overlayfs-1.10-1.module_el8.8.0+1254+78119b6e.x86_64            11/20</span><br><span class="line">Installing       : checkpolicy-2.9-1.el8.x86_64                                         12/20</span><br><span class="line">Installing       : python3-policycoreutils-2.9-17.el8.noarch                            13/20</span><br><span class="line">Installing       : policycoreutils-python-utils-2.9-17.el8.noarch                       14/20</span><br><span class="line">Running scriptlet: container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch    15/20</span><br><span class="line">Installing       : container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch    15/20</span><br><span class="line">Running scriptlet: container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch    15/20</span><br><span class="line"></span><br><span class="line">Installing       : containerd.io-1.6.20-3.1.el8.x86_64                                  16/20</span><br><span class="line">Running scriptlet: containerd.io-1.6.20-3.1.el8.x86_64                                  16/20</span><br><span class="line">Installing       : libslirp-4.4.0-1.module_el8.7.0+1216+b022c01d.x86_64                 17/20</span><br><span class="line">Installing       : slirp4netns-1.2.0-2.module_el8.7.0+1216+b022c01d.x86_64              18/20</span><br><span class="line">Installing       : docker-ce-rootless-extras-23.0.3-1.el8.x86_64                        19/20</span><br><span class="line">Running scriptlet: docker-ce-rootless-extras-23.0.3-1.el8.x86_64                        19/20</span><br><span class="line">Installing       : docker-ce-3:23.0.3-1.el8.x86_64                                      20/20</span><br><span class="line">Running scriptlet: docker-ce-3:23.0.3-1.el8.x86_64                                      20/20</span><br><span class="line">Running scriptlet: container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch    20/20</span><br><span class="line">Running scriptlet: docker-ce-3:23.0.3-1.el8.x86_64                                      20/20</span><br><span class="line">Verifying        : container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch     1/20</span><br><span class="line">Verifying        : fuse-overlayfs-1.10-1.module_el8.8.0+1254+78119b6e.x86_64             2/20</span><br><span class="line">Verifying        : libslirp-4.4.0-1.module_el8.7.0+1216+b022c01d.x86_64                  3/20</span><br><span class="line">Verifying        : slirp4netns-1.2.0-2.module_el8.7.0+1216+b022c01d.x86_64               4/20</span><br><span class="line">Verifying        : checkpolicy-2.9-1.el8.x86_64                                          5/20</span><br><span class="line">Verifying        : fuse-common-3.3.0-16.el8.x86_64                                       6/20</span><br><span class="line">Verifying        : fuse3-3.3.0-16.el8.x86_64                                             7/20</span><br><span class="line">Verifying        : fuse3-libs-3.3.0-16.el8.x86_64                                        8/20</span><br><span class="line">Verifying        : libcgroup-0.41-19.el8.x86_64                                          9/20</span><br><span class="line">Verifying        : policycoreutils-python-utils-2.9-17.el8.noarch                       10/20</span><br><span class="line">Verifying        : python3-audit-3.0-0.17.20191104git1c2f876.el8.x86_64                 11/20</span><br><span class="line">Verifying        : python3-libsemanage-2.9-6.el8.x86_64                                 12/20</span><br><span class="line">Verifying        : python3-policycoreutils-2.9-17.el8.noarch                            13/20</span><br><span class="line">Verifying        : python3-setools-4.3.0-3.el8.x86_64                                   14/20</span><br><span class="line">Verifying        : containerd.io-1.6.20-3.1.el8.x86_64                                  15/20</span><br><span class="line">Verifying        : docker-buildx-plugin-0.10.4-1.el8.x86_64                             16/20</span><br><span class="line">Verifying        : docker-ce-3:23.0.3-1.el8.x86_64                                      17/20</span><br><span class="line">Verifying        : docker-ce-cli-1:23.0.3-1.el8.x86_64                                  18/20</span><br><span class="line">Verifying        : docker-ce-rootless-extras-23.0.3-1.el8.x86_64                        19/20</span><br><span class="line">Verifying        : docker-compose-plugin-2.17.2-1.el8.x86_64                            20/20</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">checkpolicy-2.9-1.el8.x86_64</span><br><span class="line">container-selinux-2:2.195.1-1.module_el8.8.0+1254+78119b6e.noarch</span><br><span class="line">containerd.io-1.6.20-3.1.el8.x86_64</span><br><span class="line">docker-buildx-plugin-0.10.4-1.el8.x86_64</span><br><span class="line">docker-ce-3:23.0.3-1.el8.x86_64</span><br><span class="line">docker-ce-cli-1:23.0.3-1.el8.x86_64</span><br><span class="line">docker-ce-rootless-extras-23.0.3-1.el8.x86_64</span><br><span class="line">docker-compose-plugin-2.17.2-1.el8.x86_64</span><br><span class="line">fuse-common-3.3.0-16.el8.x86_64</span><br><span class="line">fuse-overlayfs-1.10-1.module_el8.8.0+1254+78119b6e.x86_64</span><br><span class="line">fuse3-3.3.0-16.el8.x86_64</span><br><span class="line">fuse3-libs-3.3.0-16.el8.x86_64</span><br><span class="line">libcgroup-0.41-19.el8.x86_64</span><br><span class="line">libslirp-4.4.0-1.module_el8.7.0+1216+b022c01d.x86_64</span><br><span class="line">policycoreutils-python-utils-2.9-17.el8.noarch</span><br><span class="line">python3-audit-3.0-0.17.20191104git1c2f876.el8.x86_64</span><br><span class="line">python3-libsemanage-2.9-6.el8.x86_64</span><br><span class="line">python3-policycoreutils-2.9-17.el8.noarch</span><br><span class="line">python3-setools-4.3.0-3.el8.x86_64</span><br><span class="line">slirp4netns-1.2.0-2.module_el8.7.0+1216+b022c01d.x86_64</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment">#</span></span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># systemctl enable docker --now</span></span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /usr/lib/systemd/system/docker.service.</span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># echo &quot;export LC_ALL=en_US.UTF8&quot; &gt;&gt; /etc/profile</span></span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># source /etc/profile</span></span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># mkdir -p /etc/docker</span></span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;   <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://82m9ar63.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">&gt;   <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">&gt;   <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">&gt;   <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">&gt;     <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">&gt;   &#125;,</span><br><span class="line">&gt;   <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; EOF</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://82m9ar63.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line"><span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line"><span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line"><span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># sudo systemctl daemon-reload</span></span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># sudo systemctl restart docker</span></span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
        <category>DevOps</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云Docker镜像加速</title>
    <url>/%E9%98%BF%E9%87%8C%E4%BA%91Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<h4 id="阿里云镜像源">阿里云镜像源</h4>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-4-3-centos ~]<span class="comment"># mkdir -p /etc/docker</span></span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;   <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://82m9ar63.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">&gt;   <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">&gt;   <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">&gt;   <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">&gt;     <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">&gt;   &#125;,</span><br><span class="line">&gt;   <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; EOF</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://82m9ar63.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># sudo systemctl daemon-reload</span></span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># sudo systemctl restart docker</span></span><br><span class="line">[root@VM-4-3-centos ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
        <category>运维</category>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10&amp;11官方系统盘制作教程</title>
    <url>/Windows10-11%E5%AE%98%E6%96%B9%E7%B3%BB%E7%BB%9F%E7%9B%98%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>本次做系统盘，采用官方的方式制作：</p>
<p>注意：U盘最少要<code>8G</code>及其以上的空U盘，为了避免出错，在开展一下步骤之前还是先给U盘数据备份好，然后对U盘进行格式化
<span id="more"></span> ### 第一步：去微软镜像官方下载网站</p>
</blockquote>
<h4
id="window10镜像-httpswww.microsoft.comzh-cnsoftware-downloadwindows10"><code>Window10</code>镜像:
https://www.microsoft.com/zh-cn/software-download/windows10/</h4>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031022123.png"
alt="image-20230403102222753" />
<figcaption aria-hidden="true">image-20230403102222753</figcaption>
</figure>
<h4
id="window11镜像httpswww.microsoft.comzh-cnsoftware-downloadwindows11"><code>Window11镜像</code>:https://www.microsoft.com/zh-cn/software-download/windows11/</h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031022354.png" /></p>
<h3
id="第二步以windows10为例开始制作系统盘下载制作工具点击立即下载工具">第二步：以<code>Windows10</code>为例，开始制作系统盘，下载制作工具，点击<code>立即下载工具</code></h3>
<p>​ <img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031025068.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031027631.png" /></p>
<h3
id="第三步下载好以后双击打开运行会出现下图界面">第三步：下载好以后双击打开运行，会出现下图界面</h3>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031028052.png" /></p>
<h4
id="第四步选择接受-再选择为另一台电脑创建安装介质u盘dvd或iso文件-下一步-下一步">第四步：选择<code>接受</code>-&gt;再选择<code>为另一台电脑创建安装介质（U盘、DVD、或ISO文件）</code>-&gt;下一步-&gt;下一步</h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031029150.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031034181.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031034314.png" /></p>
<h3
id="第五步选择你要安装系统的u盘下一步等待u盘写入完成">第五步：选择你要安装系统的U盘，下一步，等待U盘写入完成</h3>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202304031037842.png"
alt="image-20230403103728772" />
<figcaption aria-hidden="true">image-20230403103728772</figcaption>
</figure>
<h3
id="第六步等待u盘写入百分之百成功以后会有提示u盘制作完成">第六步：等待U盘写入百分之百，成功以后会有提示，U盘制作完成~</h3>
<blockquote>
<p>注意在U盘写入过程中，不要对U盘进行插拔或者是弹出操作，不然会写入不成功，不成功则需要重新操作</p>
<p>上诉过程中截图的是<code>Windows10</code>的制作过程，<code>Windows11</code>也是一模一样，没有差别</p>
</blockquote>
<p>以上就是<code>Windows10&amp;11</code>官方系统盘制作过程，当然系统盘的制作不仅仅是这一种，但是这种是最傻瓜式的，希望小白也都能看懂~</p>
]]></content>
      <categories>
        <category>Windows10</category>
        <category>系统安装</category>
      </categories>
      <tags>
        <tag>Windows 11</tag>
        <tag>Windows 10</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew安装报错Error:Command failed with exit 128: git</title>
    <url>/Homebrew%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99Error-Command-failed-with-exit-128-git/</url>
    <content><![CDATA[<p>安装命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install telnet</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>打印报错信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fatal: not in a git directory</span><br><span class="line"></span><br><span class="line">Error: Command failed with exit 128: git</span><br></pre></td></tr></table></figure>
<p>解决方式：</p>
<p>首先执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset HOMEBREW_BOTTLE_DOMAIN</span><br></pre></td></tr></table></figure>
<p>然后执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-core</span><br><span class="line">git config --global --add safe.directory /opt/homebrew/Library/Taps/homebrew/homebrew-cask</span><br></pre></td></tr></table></figure>
<p>当然执行这个两个命令是不分前后的，都可以，但是都要执行，然后就是成功解决了报错问题!</p>
]]></content>
      <categories>
        <category>macOS</category>
        <category>Homebrew</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows修改固定IP和网络</title>
    <url>/Windows%E4%BF%AE%E6%94%B9%E5%9B%BA%E5%AE%9AIP%E5%92%8C%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="修改固定ip">修改固定IP</h2>
<p>​
<strong>修改和固定<code>IP</code>，就是查找的IP的第二种方式的基础上进行操作</strong></p>
<span id="more"></span>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401161930369.png" /></p>
<p>​
<strong>如上图的更改适配器，进行操作，<code>选择以太网</code>-&gt;<code>鼠标右键</code>
-&gt;<code>点击属性</code></strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401162239432.png" /></p>
<p>​ <strong>双击下图标注的<code>IPv4</code></strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401162323793-20230401163312323.png" /></p>
<p>​ <strong>双击以后会出现下面的这种情况</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401163413779.png" /></p>
<p><strong>通常情况下都是自动获取<code>DHCP</code>，双击以后也就是空白的，如果你需要固定IP，需要给对应的<code>ip</code>、<code>子网掩码</code>、<code>网关</code>填写即可。</strong></p>
<h2 id="重置网络">重置网络</h2>
<blockquote>
<p>注：再非必要情况下最好不要进行网络重置</p>
</blockquote>
<p><strong>搜索<code>cmd</code>,然后右键<code>管理员</code>运行</strong></p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401164745531.png"
alt="image-20230401164745531" />
<figcaption aria-hidden="true">image-20230401164745531</figcaption>
</figure>
<p><strong>打开以后输入<code>netsh winsock reset</code>,然后进行回车即可。</strong></p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401165032282.png"
alt="image-20230401165032282" />
<figcaption aria-hidden="true">image-20230401165032282</figcaption>
</figure>
<p><strong>出现上面这种情况也就代表你的网络重置成功，这时候电脑需要重启，然后将电脑重启即可。</strong></p>
]]></content>
      <categories>
        <category>IP</category>
        <category>Windows</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>IP</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>查询Windows IP</title>
    <url>/%E6%9F%A5%E8%AF%A2Windows-IP/</url>
    <content><![CDATA[<h2 id="方式一">方式一：</h2>
<h3 id="一如何知道我们本机的ip地址">一、如何知道我们本机的IP地址</h3>
<h4
id="第一步首先电脑上面的快捷键win-r">第一步：<strong>首先电脑上面的快捷键<code>win</code>
+ <code>R</code></strong></h4>
<span id="more"></span>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401155701051.png" /></p>
<h4
id="第二步然后在打开这个选项中输入cmd然后回车">第二步：<strong>然后在打开这个选项中输入<code>cmd</code>,然后回车</strong></h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401155900762.png" /></p>
<h4
id="第三步输入命令ipconfig然后进行回车">第三步：<strong>输入命令：<code>ipconfig</code>,然后进行回车</strong></h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401160113210.png" /></p>
<blockquote>
<p>注意这时候我标注出来的IPv4的地址就是一般所需要的地址</p>
</blockquote>
<h2 id="方式二">方式二：</h2>
<h4
id="第一步搜索控制面板然后进行回车">第一步：搜索控制面板，然后进行回车</h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401160747545.png" /></p>
<h4
id="第二步选择网络和internet">第二步：选择<code>网络和Internet</code></h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401160937333.png" /></p>
<h4 id="第三步点击网络共享中心">第三步：点击网络共享中心</h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401161048431.png" /></p>
<p>​
第四步：点击<code>更改适配器</code>-&gt;<code>双击以太网</code>-&gt;点开<code>详细信息</code>就可以看到IP地址</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/MacPicuture/image/image-20230401161421970.png" /></p>
<blockquote>
<p>以上就是如何查看电脑IP的方式，当然查看的IP的方式不仅仅是这这两种，也可以在设置网络里面进行直接的查看，还有其他方式等等...</p>
</blockquote>
]]></content>
      <categories>
        <category>运维</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Console连接交换机</title>
    <url>/Mac-Console%E8%BF%9E%E6%8E%A5%E4%BA%A4%E6%8D%A2%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="一mac使用console连接交换机">一、Mac使用console连接交换机</h3>
<p>首先使用console线和Mac连接，这时候需要用到转换器typeC转USB-A
<span id="more"></span></p>
<p>Mac上面查看是否com口的驱动安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个tty.usbserial-A9KXFHCD就是我们com口的设备</span></span><br><span class="line">$ <span class="built_in">ls</span> /dev/* |grep usb</span><br><span class="line">/dev/tty.usbserial-A9KXFHCD</span><br></pre></td></tr></table></figure>
<p>安装minicom来通过com连接交换机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ brew install minicom</span><br></pre></td></tr></table></figure>
<p>配置minicom</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到配置</span></span><br><span class="line">$ minicom -s</span><br><span class="line">            +-----[configuration]------+</span><br><span class="line">            | Filenames and paths      |</span><br><span class="line">            | File transfer protocols  |</span><br><span class="line">            | Serial port setup        |			<span class="comment"># 选择此项回车</span></span><br><span class="line">            | Modem and dialing        |</span><br><span class="line">            | Screen and keyboard      |</span><br><span class="line">            | Save setup as dfl        |</span><br><span class="line">            | Save setup as..          |</span><br><span class="line">            | Exit                     |</span><br><span class="line">            | Exit from Minicom        |</span><br><span class="line">            +--------------------------+</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----------------------------------------------------------------------+</span><br><span class="line">| A -    Serial Device      : /dev/tty.usbserial-A9KXFHCD               |	<span class="comment"># 将此设备名称改为前面ls查看到的设备名称</span></span><br><span class="line">| B - Lockfile Location     : /opt/homebrew/Cellar/minicom/2.8/var      |</span><br><span class="line">| C -   Callin Program      :                                           |</span><br><span class="line">| D -  Callout Program      :                                           |</span><br><span class="line">| E -    Bps/Par/Bits       : 9600 8N1                                  |	<span class="comment"># 将此项改为9600 8N1</span></span><br><span class="line">| F - Hardware Flow Control : No                                        |	<span class="comment"># 将此项改为No</span></span><br><span class="line">| G - Software Flow Control : No                                        |</span><br><span class="line">| H -     RS485 Enable      : No                                        |</span><br><span class="line">| I -   RS485 Rts On Send   : No                                        |</span><br><span class="line">| J -  RS485 Rts After Send : No                                        |</span><br><span class="line">| K -  RS485 Rx During Tx   : No                                        |</span><br><span class="line">| L -  RS485 Terminate Bus  : No                                        |</span><br><span class="line">| M - RS485 Delay Rts Before: 0                                         |</span><br><span class="line">| N - RS485 Delay Rts After : 0                                         |</span><br><span class="line">|                                                                       |</span><br><span class="line">|    Change <span class="built_in">which</span> setting?                                              |</span><br><span class="line">+-----------------------------------------------------------------------+</span><br><span class="line"><span class="comment"># 回车</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----[configuration]------+</span><br><span class="line">| Filenames and paths      |</span><br><span class="line">| File transfer protocols  |</span><br><span class="line">| Serial port setup        |</span><br><span class="line">| Modem and dialing        |</span><br><span class="line">| Screen and keyboard      |</span><br><span class="line">| Save setup as dfl        |	<span class="comment"># 选择此项保存</span></span><br><span class="line">| Save setup as..          |</span><br><span class="line">| Exit                     |</span><br><span class="line">| Exit from Minicom        |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-----[configuration]------+</span><br><span class="line">| Filenames and paths      |</span><br><span class="line">| File transfer protocols  |</span><br><span class="line">| Serial port setup        |</span><br><span class="line">| Modem and dialing        |</span><br><span class="line">| Screen and keyboard      |</span><br><span class="line">| Save setup as dfl        |</span><br><span class="line">| Save setup as..          |</span><br><span class="line">| Exit                     |	<span class="comment"># 选择此项进入到终端</span></span><br><span class="line">| Exit from Minicom        |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure>
<p>进入终端以后输入密码即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Login authentication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line">&lt;Quidway&gt;</span><br></pre></td></tr></table></figure>
<h3 id="二配置华为交换机web访问">二、配置华为交换机web访问</h3>
<p>配置vlanif的管理iP，在这里我的所有管理iP都在vlan100的管理iP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Quidway&gt;system-view		(进入系统视图)</span><br><span class="line">[Quidway]int vlanif 100		（进入vlan100接口）</span><br><span class="line">[Quidway-Vlanif100]ip add 192.168.99.200 24			（为vlan100配置管理ip）</span><br><span class="line">[Quidway-Vlanif100]q</span><br><span class="line">[Quidway]q</span><br></pre></td></tr></table></figure>
<p>查看web管理的文件包地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Quidway&gt;sys    (进入系统视图)</span><br><span class="line">[Quidway]http server load web.7z   (加载web包)</span><br><span class="line">[Quidway]http server <span class="built_in">enable</span>    (开启http服务)</span><br><span class="line">[Quidway]aaa    (进入aaa视图)</span><br><span class="line">[Quidway-aaa]local-user admin password cipher Admin123  (配置管理账号与密码)</span><br><span class="line">[Quidway-aaa]local-user admin privilege level 3   (配置管理账号级别)</span><br><span class="line">[Quidway-aaa]local-user admin service-type http   (配置接入类型为http)</span><br><span class="line">[Quidway-aaa]q   (退出)</span><br><span class="line">[Quidway]q    (退出)</span><br><span class="line">&lt;Quidway&gt;save    (保存)</span><br><span class="line">Y   (确认)</span><br></pre></td></tr></table></figure>
<p>至此就配置完成了，使用浏览器打开配置的管理vlanip，即可访问到交换机的管理web页面。</p>
<h3 id="三交换机常用vlan配置">三、交换机常用vlan配置，</h3>
<p>vlan配置相关</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看交换机vlan配置信息</span></span><br><span class="line">[Quidway]display vlan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建vlan100</span></span><br><span class="line">[Quidway]vlan 100</span><br><span class="line">[Quidway-vlan100]q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将0/0/21端口从原有vlan中移除</span></span><br><span class="line">[Quidway]int GigabitEthernet 0/0/21</span><br><span class="line">[Quidway-GigabitEthernet0/0/21]undo port default vlan</span><br></pre></td></tr></table></figure>
<p>创建端口组，以及添加端口组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看端口组中的成员</span></span><br><span class="line">[Quidway-port-group-200]display this</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建端口组</span></span><br><span class="line">[Quidway]port-group 100			<span class="comment"># 创建端口组100，100为端口组名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将端口添加到端口组,将g0/0/1-g0/0/15添加到端口组100</span></span><br><span class="line">[Quidway-port-group-100]group-member GigabitEthernet 0/0/1 to GigabitEthernet 0/0/15</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置端口组中的端口访问模式</span></span><br><span class="line">[Quidway-port-group-100]port link-type access		<span class="comment"># (这里设置为access模式，也可以是trunk模式的)；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将端口组加入到vlan</span></span><br><span class="line">[Quidway-port-group-100]port default vlan 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将22和21端口从端口组200中移除</span></span><br><span class="line">[Quidway]port-group 200</span><br><span class="line">[Quidway-port-group-200]undo  group-member GigabitEthernet 0/0/22 GigabitEthernet 0/0/21</span><br></pre></td></tr></table></figure>
<h3 id="四常用路由配置">四、常用路由配置</h3>
<p>常用配置命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">常用配置命令：</span><br><span class="line">1.进入视图模式</span><br><span class="line">	&lt;Huawei&gt;sys</span><br><span class="line">2.进入接口</span><br><span class="line">	[Huawei]int g0/0/1				<span class="comment">#进入指定接口</span></span><br><span class="line">	[Huawei]user-interface console 0			<span class="comment">#进入console口</span></span><br><span class="line">	[Huawei-ui-console0]authentication-mode password	<span class="comment">#配置console口密码验证</span></span><br><span class="line">3.查看指定接口信息包括ip地址</span><br><span class="line">	[Huawei-GigabitEthernet0/0/1]display ip interface g0/0/1</span><br><span class="line">4.为指定接口配置ip地址</span><br><span class="line">	[Huawei-GigabitEthernet0/0/1]ip add 192.168.1.111 24		<span class="comment">#配ip</span></span><br><span class="line">	[Huawei-GigabitEthernet0/0/1]undo ip add 192.168.1.111 24	<span class="comment">#删除配置的ip</span></span><br><span class="line">5.查看路由器ip配置表</span><br><span class="line">	[Huawei]display current-configuration			<span class="comment">#查看ip</span></span><br><span class="line">	[Huawei]display  ip routing-table			<span class="comment">#查看路由表</span></span><br><span class="line">	[Huawei]display  nat  session  all			<span class="comment">#查看nat地址转换表</span></span><br></pre></td></tr></table></figure>
<p>nat配置命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态nat：在公网入站接口配置</span></span><br><span class="line">	[Huawei]interface  g0/0/0</span><br><span class="line">	[Huawei-GigabitEthernet0/0/0]nat server global 39.105.70.100 inside 192.168.1.254	<span class="comment">#将70.100静态nat到1.254</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态pat：</span></span><br><span class="line">	[Huawei]acl number 2000				<span class="comment">#使用acl匹配所有ip流量</span></span><br><span class="line">	[Huawei-acl-basic-2000]rule  1 permit</span><br><span class="line">	[Huawei]interface  g0/0/0</span><br><span class="line">	[Huawei-GigabitEthernet0/0/0]nat outbound  2000	<span class="comment">#在出接口应用这个PAT规则</span></span><br></pre></td></tr></table></figure>
<p>开启telnet配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 路由器开启telnet配置：</span></span><br><span class="line">user-interface maximum-vty 15</span><br><span class="line">user-interface vty 0 4</span><br><span class="line">authentication-mode aaa         		<span class="comment"># 配置认证模式为aaa</span></span><br><span class="line">q</span><br><span class="line">aaa                                			  <span class="comment"># 进入aaa视图</span></span><br><span class="line">local-user admin password cipher huawei    <span class="comment"># 配置用户名为admin，密码为huawei</span></span><br><span class="line">local-user admin privilege level 3               <span class="comment"># 设置用户权限为3</span></span><br><span class="line">local-user admin service-type telnet  ssh     <span class="comment">#  定义用户接入类型为telnet</span></span><br><span class="line">dis this                                   		  <span class="comment">#查看配置</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Switch</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Switch</tag>
      </tags>
  </entry>
  <entry>
    <title>新装的Windows10,11系统和Office激活教程</title>
    <url>/%E6%96%B0%E8%A3%85%E7%9A%84Windows10-11-%E7%B3%BB%E7%BB%9F%E5%92%8COffice-2016%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="第一步">第一步：</h3>
<p>首先我们要准备好激活软件，<code>HEU_KMS_Activator</code>这个软件的下载地址如下：https://github.com/zbezj/HEU_KMS_Activator/releases/tag/26.1.0
<span id="more"></span> <img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071525532.png" />
标志的压缩包就是要下载的软件，解压即可用，解压密码也在图中有展示。</p>
<h3 id="第二步">第二步：</h3>
<p>下载并解压这个软件：</p>
<p>双击运行此软件！</p>
<h3 id="第三步">第三步：</h3>
<p>打开这个软件，对电脑系统和office进行激活即可</p>
<p>运行上面的 <code>HEU_KMS_Activator_v26.0.0.exe</code>如图所示：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071525536.png" /></p>
<p>然后就是点击开始就行了，耐心等待进度条走完，激活完成即可。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071525986.png" /></p>
<h3 id="最后">最后：</h3>
<p>等百分之百的时候会有弹窗出来，即激活完毕。</p>
]]></content>
      <categories>
        <category>Windows教程 运维</category>
      </categories>
      <tags>
        <tag>Windows10&amp;Windows11</tag>
      </tags>
  </entry>
  <entry>
    <title>关于网络打印机教程（二）</title>
    <url>/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E6%89%93%E5%8D%B0%E6%9C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>本次教程主要是针对于<code>Windows11</code>打印机连接，以及扫描仪的相关问题解答</p>
</blockquote>
<p>在一般情况下，网络打印机带扫描仪功能，对于<code>Windows7</code>和<code>Windows10</code>操作系统来说，直接去对应的官网和对应的打印机驱动网站直接下载对应的驱动即可，但是<code>Windows11</code>有点不太一样。
<span id="more"></span>
首先就是<code>Windows11</code>怎么添加打印机，<code>设置</code>-&gt;<code>蓝牙和其他设备</code>-&gt;<code>打印机和扫描仪</code>-&gt;<code>添加设备</code></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211250929234.png" /></p>
<p>如果你是已经连接到了打印机，这时候就可以刷新检测到了</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211250932931.png" /></p>
<p>如果手没有检测到检查线路连接的同时，手动添加设备，手动添加设备如果你不知道流程，可以回看我的教程（一），按照流程走完，检测到驱动以后会自动安装驱动。自此打印机的驱动算是完成了。</p>
<p>重点是扫描仪，如果打印机带扫描仪功能，<code>Windows10</code>操作系统需要你去官网或者是打印机驱动网下载驱动安装，<code>Windows11</code>则是装完驱动以后，自动扫描，如果检测不到扫描仪，原因可能是打印机驱动问题，还有可能就是系统问题，因为这个不确定因素太多，需要逐一排查。</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>打印机</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>关于网络打印机教程（一）</title>
    <url>/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E6%89%93%E5%8D%B0%E6%9C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>注意：本教程只适合网络打印机且同一局域网打印机</p>
</blockquote>
<h3 id="鼠标右键选择个性化">鼠标右键选择<code>个性化</code></h3>
<span id="more"></span>
<h3 id="首先选择主页">首先选择<code>主页</code>：</h3>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211929625.png" /></p>
<h3 id="其次选择设备">其次选择<code>设备</code></h3>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211930726.png" /></p>
<h3 id="再选择设备与打印机">再选择<code>设备与打印机</code></h3>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211933448.png" /></p>
<h3 id="然后选择添加打印机">然后选择<code>添加打印机</code></h3>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211934010.png" /></p>
<blockquote>
<p>注意选择以后，这时候会出现自动搜索界面，搜索打印机，如果你想要连接的打印机没有在搜索的列表中，这时候就需要手动添加。如果有的话，直接选中你要连接的打印机下一步即可。等待驱动自动安装完成就结束了。</p>
<p>有的驱动window10系统是不能自动安装驱动，这时候需要手动下载驱动，到打印机驱动网站下载驱动就行了，网址：http://www.dyjqd.com/，自行下载对应的打印机型号即可，要注意下载时候选择官网下载，不要下载错误。</p>
</blockquote>
<h4
id="下面是以惠普hp-laserjet-m1005-mfp打印机驱动为例子">下面是以<code>惠普HP LaserJet M1005 MFP</code>打印机驱动为例子：</h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211940929.png" /></p>
<p>下载安装即可。</p>
<h4
id="回到刚才如果你在搜索框里面没有找到你的打印机这时候应该怎么做呢">回到刚才如果你在搜索框里面没有找到你的打印机，这时候应该怎么做呢？</h4>
<h4 id="手动添加ip">手动添加IP：</h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211942117.png" /></p>
<ul>
<li>选择我所需要的打印机未列出，然后选择<code>使用IP地址或主机名添加打印机</code></li>
</ul>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211942661.png" /></p>
<ul>
<li>这里选择<code>自动检测</code>或<code>TCP/IP</code>都可以，然后输入你打印机的IP地址，然后下一步即可（PS:下图中的IP地址只是一个例子，根据自己打印机的实际情况而定）</li>
</ul>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211211946943.png" /></p>
<ul>
<li>最后下一步，然后就等着搜索到打印机，安装驱动即可。</li>
</ul>
<p>最后注意，这个教程只适合网络打印机，局域网的情况下，校园网的前提是IP端口没有限制，在同一个路由器下按理来说都可以用的，这篇文章也只是适合小白，或者是不懂计算机的人，如果你在连接有时候遇到什么问题可以联系我<code>QQ：2842888712</code>，如果你是一个高手，希望你可以批评指正，希望这篇文章对你来说有些许的帮助~</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>打印机</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/Nginx/</url>
    <content><![CDATA[<hr />
<p>[TOC]</p>
<h3 id="一引言">一、引言</h3>
<hr />
<h4 id="代理问题">1.1 代理问题</h4>
<blockquote>
<p>客户端到底要将请求发送给哪台服务器。 <span id="more"></span> |
发送给服务器1还是服务器2 | |
:----------------------------------------------------------: | | <img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071023267.png" />
| <!--more--> #### 1.2 负载均衡问题</p>
</blockquote>
<blockquote>
<p>如果所有客户端的请求都发送给了服务器1，那么服务器2将没有任何意义</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">负载均衡问题</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071024949.png"
alt="1589265005701" /></td>
</tr>
</tbody>
</table>
<h4 id="资源优化">1.3 资源优化</h4>
<blockquote>
<p>客户端发送的请求可能是申请动态资源的，也有申请静态资源，但是都是去Tomcat中获取的</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">静态资源访问</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071024993.png" /></td>
</tr>
</tbody>
</table>
<h4 id="nginx处理">1.4 Nginx处理</h4>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">在搭建集群后，使用Nginx</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071024840.png" /></td>
</tr>
</tbody>
</table>
<h3 id="二nginx概述">二、Nginx概述</h3>
<hr />
<blockquote>
<p>Nginx是由俄罗斯人研发的，应对Rambler的网站，并且2004年发布的第一个版本。</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Nginx之父</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071024237.png"
alt="1586502874584" /></td>
</tr>
</tbody>
</table>
<blockquote>
<p>Nginx的特点：</p>
<ul>
<li>稳定性极强。 7*24小时不间断运行。</li>
<li>Nginx提供了非常丰富的配置实例。</li>
<li>占用内存小，并发能力强。</li>
</ul>
</blockquote>
<h3 id="三nginx的安装">三、Nginx的安装</h3>
<hr />
<h4 id="安装nginx">3.1 安装Nginx</h4>
<blockquote>
<p>使用Docker-Compose安装，创建docker-compose.yml写入以下内容：</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/nginx:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@192 ~]<span class="comment"># cd /opt</span></span><br><span class="line">[root@192 opt]<span class="comment"># mkdir docker_nginx</span></span><br><span class="line">[root@192 opt]<span class="comment"># cd docker_nginx/</span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># vim docker-compose.yml</span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># docker-compose up -d</span></span><br><span class="line">Creating network <span class="string">&quot;docker_nginx_default&quot;</span> with the default driver</span><br><span class="line">Pulling nginx (daocloud.io/library/nginx:latest)...</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">45b42c59be33: Pull complete</span><br><span class="line">d0d9e9ea897e: Pull complete</span><br><span class="line">66e650438339: Pull complete</span><br><span class="line">76a3dfe4406b: Pull complete</span><br><span class="line">410ff9d97480: Pull complete</span><br><span class="line">Digest: sha256:1a53eb723d17523512bd25c27299046cfa034cce309f4ed330c943a304513f59</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> daocloud.io/library/nginx:latest</span><br><span class="line">Creating nginx ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>浏览器访问即可（80端口可以省略不写，云服务器记得去开放80端口）</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071024665.png" /></p>
<h4 id="nginx的配置文件">3.2 Nginx的配置文件</h4>
<blockquote>
<p>关于Nginx的核心配置文件nginx.conf</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@192 docker_nginx]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                              COMMAND                  CREATED         STATUS         PORTS                               NAMES</span><br><span class="line">617da0b0dbbb   daocloud.io/library/nginx:latest   <span class="string">&quot;/docker-entrypoint.…&quot;</span>   8 minutes ago   Up 8 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx</span><br><span class="line">[root@192 docker_nginx]<span class="comment"># docker exec -it 617 bash</span></span><br><span class="line">root@617da0b0dbbb:/<span class="comment"># cd /etc/nginx</span></span><br><span class="line">root@617da0b0dbbb:/etc/nginx<span class="comment"># ls</span></span><br><span class="line">conf.d		koi-utf  mime.types  nginx.conf   uwsgi_params</span><br><span class="line">fastcgi_params	koi-win  modules     scgi_params  win-utf</span><br><span class="line">root@617da0b0dbbb:/etc/nginx<span class="comment"># cat nginx.conf </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看nginx.conf 配置文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># 以上统称为全局块， </span></span><br><span class="line"><span class="comment"># worker_processes的数值越大，Nginx的并发能力就越强（由运维人员修改）</span></span><br><span class="line"><span class="comment"># error_log 代表Nginx的错误日志存放的位置</span></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># events块</span></span><br><span class="line"><span class="comment"># worker_connections的数值越大，Nginx的并发能力就越强（由运维人员修改）</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># http块</span></span><br><span class="line"><span class="comment"># include代表引入一个外部的文件 -&gt; /mime.types中放着大量的媒体类型</span></span><br><span class="line"><span class="comment"># include /etc/nginx/conf.d/*.conf; -&gt; 引入了conf.d目录下的以.conf为结尾的配置文件</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>nginx.conf 配置文件中发现，最后一行引入了conf.d目录下的*.conf文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@617da0b0dbbb:/etc/nginx<span class="comment"># ls</span></span><br><span class="line">conf.d		koi-utf  mime.types  nginx.conf   uwsgi_params</span><br><span class="line">fastcgi_params	koi-win  modules     scgi_params  win-utf</span><br><span class="line">root@617da0b0dbbb:/etc/nginx<span class="comment"># cd conf.d/</span></span><br><span class="line">root@617da0b0dbbb:/etc/nginx/conf.d<span class="comment"># ls</span></span><br><span class="line">default.conf</span><br><span class="line">root@617da0b0dbbb:/etc/nginx/conf.d<span class="comment"># cat default.conf </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看default.conf 配置文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># server块</span></span><br><span class="line"><span class="comment"># listen： 代表Nginx监听的端口号</span></span><br><span class="line"><span class="comment"># localhost：代表Nginx接收请求的ip</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 参数说明</span></span><br><span class="line">    <span class="comment"># location块</span></span><br><span class="line">	<span class="comment"># root：将接收到的请求根据/usr/share/nginx/html去查找静态资源</span></span><br><span class="line">	<span class="comment"># index： 默认去上述的路径中找到index.html或者index.htm</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    root           html;</span></span><br><span class="line">    <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">    <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">    <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">    <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">    <span class="comment">#    deny  all;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置数据卷操作nginx">3.3 配置数据卷操作Nginx</h4>
<blockquote>
<p>为了方便修改Nginx配置，修改docker-compose.yml文件，设置 volumes
，重新启动</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/nginx:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_nginx/conf.d/:/etc/nginx/conf.d</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@617da0b0dbbb:/etc/nginx/conf.d<span class="comment"># exit </span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># vim docker-compose.yml </span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># docker-compose down</span></span><br><span class="line">Stopping nginx ... <span class="keyword">done</span></span><br><span class="line">Removing nginx ... <span class="keyword">done</span></span><br><span class="line">Removing network docker_nginx_default</span><br><span class="line">[root@192 docker_nginx]<span class="comment"># docker-compose up -d</span></span><br><span class="line">Creating network <span class="string">&quot;docker_nginx_default&quot;</span> with the default driver</span><br><span class="line">Creating nginx ... <span class="keyword">done</span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># ls</span></span><br><span class="line">conf.d  docker-compose.yml</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时再使用浏览器访问则无法访问nginx.html页面了，此时需要在conf.d目录下创建default.conf文件，配置一个server，再重新启动即可</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@192 docker_nginx]<span class="comment"># cd conf.d/</span></span><br><span class="line">[root@192 conf.d]<span class="comment"># vim default.conf</span></span><br><span class="line">[root@192 conf.d]<span class="comment"># cd ..</span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># docker-compose restart</span></span><br><span class="line">Restarting nginx ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3
id="四nginx的反向代理重点">四、Nginx的反向代理【<code>重点</code>】</h3>
<hr />
<h4 id="正向代理和反向代理介绍">4.1 正向代理和反向代理介绍</h4>
<blockquote>
<p>正向代理：</p>
<ul>
<li>正向代理服务是由客户端设立的。</li>
<li>客户端了解代理服务器和目标服务器都是谁。</li>
<li>帮助咱们实现突破访问权限，提高访问的速度，对目标服务器隐藏客户端的ip地址。</li>
</ul>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">正向代理</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071025691.png"
alt="1586512751639" /></td>
</tr>
</tbody>
</table>
<blockquote>
<p>反向代理：</p>
<ul>
<li>反向代理服务器是配置在服务端的。</li>
<li>客户端是不知道访问的到底是哪一台服务器。</li>
<li>达到负载均衡，并且可以隐藏服务器真正的ip地址。</li>
</ul>
</blockquote>
<figure>
<img src="Pictures/1586513061851.png" alt="1586513061851" />
<figcaption aria-hidden="true">1586513061851</figcaption>
</figure>
<h4 id="基于nginx实现反向代理">4.2 基于Nginx实现反向代理</h4>
<blockquote>
<p>创建三个Tomcat，通过数据卷映射，在映射目录下创建ROOT目录，在对应的ROOT目录下再创建index.html（需要创建三个ROOT目录和三个index.html，index.html内容不要相同，用于测试）</p>
</blockquote>
<blockquote>
<p>docker-compose.yml内容如下：</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  tomcat1:</span><br><span class="line">    restart: always</span><br><span class="line">    image: daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">    container_name: tomcat8081</span><br><span class="line">    ports:</span><br><span class="line">      - 8081:8080</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/docker_tomcats/tomcat_webapps8081:/usr/local/tomcat/webapps</span><br><span class="line">  tomcat2:</span><br><span class="line">    restart: always</span><br><span class="line">    image: daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">    container_name: tomcat8082</span><br><span class="line">    ports:</span><br><span class="line">      - 8082:8080</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/docker_tomcats/tomcat_webapps8082:/usr/local/tomcat/webapps</span><br><span class="line">  tomcat3:</span><br><span class="line">    restart: always</span><br><span class="line">    image: daocloud.io/library/tomcat:8.5.15-jre8</span><br><span class="line">    container_name: tomcat8083</span><br><span class="line">    ports:</span><br><span class="line">      - 8083:8080</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/docker_tomcats/tomcat_webapps8083:/usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure>
<blockquote>
<p>具体步骤如下：</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@192 opt]<span class="comment"># mkdir docker_tomcats</span></span><br><span class="line">[root@192 opt]<span class="comment"># cd docker_tomcats/</span></span><br><span class="line">[root@192 docker_tomcats]<span class="comment"># vim docker-compose.yml </span></span><br><span class="line">[root@192 docker_tomcats]<span class="comment"># docker-compose up -d</span></span><br><span class="line">Creating network <span class="string">&quot;docker_tomcats_default&quot;</span> with the default driver</span><br><span class="line">Creating tomcat8082 ... <span class="keyword">done</span></span><br><span class="line">Creating tomcat8081 ... <span class="keyword">done</span></span><br><span class="line">Creating tomcat8083 ... <span class="keyword">done</span></span><br><span class="line">[root@192 docker_tomcats]<span class="comment"># ls</span></span><br><span class="line">docker-compose.yml  tomcat_webapps8081  tomcat_webapps8082  tomcat_webapps8083</span><br><span class="line">[root@192 docker_tomcats]<span class="comment"># cd tomcat_webapps8081</span></span><br><span class="line">[root@192 tomcat_webapps8081]<span class="comment"># mkdir ROOT</span></span><br><span class="line">[root@192 tomcat_webapps8081]<span class="comment"># cd ROOT</span></span><br><span class="line">[root@192 ROOT]<span class="comment"># vim index.html</span></span><br><span class="line">[root@192 ROOT]<span class="comment"># cd ..</span></span><br><span class="line">[root@192 tomcat_webapps8081]<span class="comment"># cd ..</span></span><br><span class="line">[root@192 docker_tomcats]<span class="comment"># cd tomcat_webapps8082</span></span><br><span class="line">[root@192 tomcat_webapps8082]<span class="comment"># mkdir ROOT</span></span><br><span class="line">[root@192 tomcat_webapps8082]<span class="comment"># cd ROOT</span></span><br><span class="line">[root@192 ROOT]<span class="comment"># vim index.html</span></span><br><span class="line">[root@192 ROOT]<span class="comment"># cd ..</span></span><br><span class="line">[root@192 tomcat_webapps8082]<span class="comment"># cd ..</span></span><br><span class="line">[root@192 docker_tomcats]<span class="comment"># cd tomcat_webapps8083</span></span><br><span class="line">[root@192 tomcat_webapps8083]<span class="comment"># mkdir ROOT</span></span><br><span class="line">[root@192 tomcat_webapps8083]<span class="comment"># cd ROOT</span></span><br><span class="line">[root@192 ROOT]<span class="comment"># vim index.html</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后修改nginx的default.conf配置文件，使其通过Nginx访问到tomcat服务器。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基于反向代理访问到Tomcat服务器</span></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://192.168.25.132:8081/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@192 opt]<span class="comment"># cd docker_nginx/</span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># ls</span></span><br><span class="line">conf.d  docker-compose.yml</span><br><span class="line">[root@192 docker_nginx]<span class="comment"># cd conf.d/</span></span><br><span class="line">[root@192 conf.d]<span class="comment"># ls</span></span><br><span class="line">default.conf</span><br><span class="line">[root@192 conf.d]<span class="comment"># vim default.conf </span></span><br><span class="line">[root@192 conf.d]<span class="comment"># cd ..</span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># docker-compose restart</span></span><br><span class="line">Restarting nginx ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>再次访问时，nginx主页直接显示到对应tomcat的页面了</p>
</blockquote>
<h4 id="关于nginx的location路径映射">4.3
关于Nginx的location路径映射</h4>
<blockquote>
<p>优先级关系如下：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span> 直接匹配</span><br><span class="line">location = / <span class="punctuation">&#123;</span></span><br><span class="line">  # 精准匹配，主机名后面不能带任何的字符串</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 通用匹配</span><br><span class="line">location /xxx <span class="punctuation">&#123;</span></span><br><span class="line">  # 匹配所有以/xxx开头的路径</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span> 正则匹配</span><br><span class="line">location ~ /xxx <span class="punctuation">&#123;</span></span><br><span class="line">  # 匹配所有以/xxx开头的路径</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span> 匹配开头路径</span><br><span class="line">location ^~ /images/ <span class="punctuation">&#123;</span></span><br><span class="line">  # 匹配所有以/images开头的路径</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># <span class="number">5.</span> 匹配后缀</span><br><span class="line">location ~* \.(gif|jpg|png)$ <span class="punctuation">&#123;</span></span><br><span class="line">  # 匹配以gif或者jpg或者png为结尾的路径</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># <span class="number">6.</span> 全部通配</span><br><span class="line">location / <span class="punctuation">&#123;</span></span><br><span class="line">  # 匹配全部路径  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="五nginx负载均衡重点">五、Nginx负载均衡【<code>重点</code>】</h3>
<hr />
<blockquote>
<p>Nginx为我们默认提供了三种负载均衡的策略：</p>
<p>​ 轮询：将客户端发起的请求，平均的分配给每一台服务器。</p>
<p>​ 权重：会将客户端的请求，根据服务器的权重值不同，分配不同的数量。</p>
<p>​
ip_hash：基于当前发起请求的客户端的ip地址，如果ip地址不变，始终会将请求发送到当前的服务器上。</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071025043.png" /></p>
<h4 id="轮询">5.1 轮询</h4>
<blockquote>
<p>想实现Nginx轮询负载均衡机制需要修改default.conf配置文件中的内容：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">upstream 名字 <span class="punctuation">&#123;</span></span><br><span class="line">  server ip<span class="punctuation">:</span>port;</span><br><span class="line">  server ip<span class="punctuation">:</span>port;</span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line">  listen <span class="number">80</span>;</span><br><span class="line">  listen  <span class="punctuation">[</span><span class="punctuation">:</span><span class="punctuation">:</span><span class="punctuation">]</span><span class="punctuation">:</span><span class="number">80</span>;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  </span><br><span class="line">  location / <span class="punctuation">&#123;</span></span><br><span class="line">    proxy_pass http<span class="punctuation">:</span><span class="comment">//upstream的名字/;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>例如：（注意：upstream的名字不要使用下划线）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">upstream my-server &#123;</span><br><span class="line">  server <span class="number">47.100</span><span class="number">.241</span><span class="number">.89</span>:<span class="number">8081</span>;</span><br><span class="line">  server <span class="number">47.100</span><span class="number">.241</span><span class="number">.89</span>:<span class="number">8082</span>;</span><br><span class="line">  server <span class="number">47.100</span><span class="number">.241</span><span class="number">.89</span>:<span class="number">8083</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen <span class="number">80</span>;</span><br><span class="line">  listen  [::]:<span class="number">80</span>;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//my-server/;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@192 opt]<span class="comment"># cd docker_nginx/</span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># ls</span></span><br><span class="line">conf.d  docker-compose.yml</span><br><span class="line">[root@192 docker_nginx]<span class="comment"># cd conf.d/</span></span><br><span class="line">[root@192 conf.d]<span class="comment"># ls</span></span><br><span class="line">default.conf</span><br><span class="line">[root@192 conf.d]<span class="comment"># vim default.conf </span></span><br><span class="line">[root@192 conf.d]<span class="comment"># cd ..</span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># docker-compose restart</span></span><br><span class="line">Restarting nginx ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：若轮询无法实现，把nginx.conf核心配置文件中的 keepalive_timeout 65
改为 keepalive_timeout 0 即可！</p>
</blockquote>
<h4 id="权重">5.2 权重</h4>
<blockquote>
<p>实现权重的方式</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">upstream 名字 <span class="punctuation">&#123;</span></span><br><span class="line">  server ip<span class="punctuation">:</span>port weight=权重比例;</span><br><span class="line">  server ip<span class="punctuation">:</span>port weight=权重比例;</span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line">  listen <span class="number">80</span>;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  </span><br><span class="line">  location / <span class="punctuation">&#123;</span></span><br><span class="line">    proxy_pass http<span class="punctuation">:</span><span class="comment">//upstream的名字/;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>例如：</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">upstream my-server &#123;</span><br><span class="line">  server 47.100.241.89:8081 weight=10;</span><br><span class="line">  server 47.100.241.89:8082 weight=5;</span><br><span class="line">  server 47.100.241.89:80 weight=1;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen  [::]:80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://my-server/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@192 docker_nginx]<span class="comment"># cd conf.d/</span></span><br><span class="line">[root@192 conf.d]<span class="comment"># ls</span></span><br><span class="line">default.conf</span><br><span class="line">[root@192 conf.d]<span class="comment"># vim default.conf </span></span><br><span class="line">[root@192 conf.d]<span class="comment"># cd ..</span></span><br><span class="line">[root@192 docker_nginx]<span class="comment"># docker-compose restart</span></span><br><span class="line">Restarting nginx ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h4 id="ip_hash">5.3 ip_hash</h4>
<blockquote>
<p>ip_hash实现，只需要添加一个 ip_hash
配置即可，在暂时不使用的服务器后面添加down即可</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">upstream 名字 &#123;</span><br><span class="line">  ip_hash; <span class="comment"># 配置ip_hash</span></span><br><span class="line">  server ip:port down;</span><br><span class="line">  server ip:port;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://upstream的名字/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例如：</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">upstream my-server &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  server 192.168.25.140:8081;</span><br><span class="line">  server 192.168.25.140:8082 down;</span><br><span class="line">  server 192.168.25.140:8083 down;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen  [::]:80;</span><br><span class="line">  server_name localhost;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://my-server/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="六nginx动静分离重点">六、Nginx动静分离【<code>重点</code>】</h3>
<hr />
<blockquote>
<p>Nginx的并发能力公式：</p>
<p>worker_processes * worker_connections / 4 | 2 =
Nginx最终的并发能力</p>
<p>动态资源需要/4，静态资源需要/2.</p>
<p>Nginx通过动静分离，来提升Nginx的并发能力，更快的给用户响应。</p>
</blockquote>
<h4 id="动态资源代理">6.1 动态资源代理</h4>
<blockquote>
<p>使用proxy_pass动态代理</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置如下</span></span><br><span class="line">location / &#123;</span><br><span class="line">  proxy_pass 路径;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态资源代理">6.2 静态资源代理</h4>
<blockquote>
<p>使用root静态代理</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置如下</span></span><br><span class="line">location / &#123;</span><br><span class="line">  root 静态资源路径;</span><br><span class="line">  index 默认访问路径下的什么资源;</span><br><span class="line">  autoindex on; <span class="comment"># 代表展示静态资源全的全部内容，以列表的形式展开。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先修改docker，添加一个数据卷，映射到Nginx服务器的一个目录</span></span><br><span class="line"><span class="comment"># 添加了index.html和1.jpg静态资源</span></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost docker_nginx]<span class="comment"># ls</span></span><br><span class="line">conf.d  docker-compose.yml</span><br><span class="line">[root@localhost docker_nginx]<span class="comment"># vim docker-compose.yml </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改docker-compose.yml为如下内容：</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    restart: always</span><br><span class="line">    image: daocloud.io/library/nginx:latest</span><br><span class="line">    container_name: nginx</span><br><span class="line">    ports:</span><br><span class="line">      - 80:80</span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/docker_nginx/conf.d/:/etc/nginx/conf.d</span><br><span class="line">      - /opt/docker_nginx/img/:/data/img</span><br><span class="line">      - /opt/docker_nginx/html/:/data/html</span><br></pre></td></tr></table></figure>
<blockquote>
<p>重启再查看，目录已经创建</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost docker_nginx]<span class="comment"># docker-compose down</span></span><br><span class="line">Stopping nginx ... <span class="keyword">done</span></span><br><span class="line">Removing nginx ... <span class="keyword">done</span></span><br><span class="line">Removing network docker_nginx_default</span><br><span class="line">[root@localhost docker_nginx]<span class="comment"># docker-compose up -d</span></span><br><span class="line">Creating network <span class="string">&quot;docker_nginx_default&quot;</span> with the default driver</span><br><span class="line">Creating nginx ... <span class="keyword">done</span></span><br><span class="line">[root@localhost docker_nginx]<span class="comment"># ls</span></span><br><span class="line">conf.d  docker-compose.yml  html  img</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分别在 html 以及 img 目录中拷贝对应的 html 页面和图片即可，然后修改
Nginx 的 default.conf 配置文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen  [::]:80;</span><br><span class="line">  server_name localhost;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 代理到html的静态资源</span></span><br><span class="line">  location /html &#123;</span><br><span class="line">    root /data;   <span class="comment">#由于location后面写的是/html，所以root后的路径就不用写成/data/html，/html会默认放在/data后面</span></span><br><span class="line">    index student.html;<span class="comment">#默认访问student.html</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 代理到img的静态资源</span></span><br><span class="line">  location /img &#123;</span><br><span class="line">    root /data;</span><br><span class="line">    autoindex on;<span class="comment">#以列表的形式展开</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost docker_nginx]<span class="comment"># cd conf.d/</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># vim default.conf </span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># cd ..</span></span><br><span class="line">[root@localhost docker_nginx]<span class="comment"># docker-compose restart</span></span><br><span class="line">Restarting nginx ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>浏览器分别访问以下地址进行测试：</p>
<p>​ http://39.98.132.196/html/ （查看之前拷贝的student.html页面）</p>
<p>​ http://39.98.132.196/img/2.jpg （注：2.jpg是拷贝的图片名称）</p>
<p>​ http://39.98.132.196/img/ （注：可以看到当前目录下的所有文件）</p>
</blockquote>
<h3 id="七nginx集群">七、Nginx集群</h3>
<hr />
<blockquote>
<p>单点故障，避免nginx的宕机，导致整个程序的崩溃</p>
<p>准备多台Nginx。</p>
<p>准备keepalived，监听nginx的健康情况。</p>
<p>准备haproxy，提供一个虚拟的路径，统一的去接收用户得请求。</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Nginx集群</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071025764.png"
alt="1588755548570" /></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Windows一些常用Command</title>
    <url>/%E5%85%B3%E4%BA%8EWindows%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8Command/</url>
    <content><![CDATA[<h3 id="关机重启注销休眠定时">关机、重启、注销、休眠、定时</h3>
<ul>
<li>关机：<code>shutdown /s</code></li>
<li>重启：<code>shutdown /r</code></li>
<li>注销：<code>shutdown /l</code></li>
<li>休眠：<code>shutdown /h /f</code></li>
<li>取消关机：<code>shutdown /a</code></li>
<li>定时关机：<code>shutdown /s /t 3600</code>（3600 秒后关机）
<span id="more"></span> ### 目录操作</li>
</ul>
<p><strong>切换目录，进入指定文件夹：</strong></p>
<ul>
<li>切换磁盘：<code>d:</code>（进入 d 盘）</li>
<li>切换磁盘和目录：<code>cd /d d:/test</code>（进入 <code>d</code> 盘
<code>test</code> 文件夹）</li>
<li>进入文件夹：<code>cd \test1\test2</code>（进入 <code>test2</code>
文件夹）</li>
<li>返回根目录：<code>cd \</code></li>
<li>回到上级目录：<code>cd ..</code></li>
<li>新建文件夹：<code>md test</code></li>
</ul>
<p><strong>显示目录内容：</strong></p>
<ul>
<li>显示目录中文件列表：<code>dir</code></li>
<li>显示目录结构：<code>tree d:\test</code>（d 盘 test 目录）</li>
<li>显示当前目录位置：<code>cd</code></li>
<li>显示指定磁盘的当前目录位置：<code>cd d:</code></li>
</ul>
<h3 id="网络操作"><strong>网络操作</strong></h3>
<ul>
<li>延迟和丢包率：<code>ping ip/域名</code></li>
<li>Ping 测试 5 次：<code>ping ip/域名 -n 5</code></li>
<li>清除本地 DNS 缓存：<code>ipconfig /flushdns</code></li>
<li>路由追踪：<code>tracert ip/域名</code></li>
</ul>
<h3 id="进程服务操作"><strong>进程/服务操作</strong></h3>
<p><strong>进程管理：</strong></p>
<ul>
<li>显示当前正在运行的进程：<code>tasklist</code></li>
<li>运行程序或命令：<code>start 程序名</code></li>
<li>结束进程，按名称：<code>taskkill /im notepad.exe</code>（关闭记事本）</li>
<li>结束进程，按 PID：<code>taskkill /pid 1234</code>（关闭 PID 为 1234
的进程）</li>
</ul>
<p><strong>服务管理：</strong></p>
<ul>
<li>显示当前正在运行的服务：<code>net start</code></li>
<li>启动指定服务：<code>net start 服务名</code></li>
<li>停止指定服务：<code>net stop 服务名</code></li>
</ul>
<h3 id="保存为-.bat-可执行文件">保存为 .bat 可执行文件</h3>
<p>我们可以将常用的命令输入记事本中，并保存为后缀为 <code>.bat</code>
的可执行文件。</p>
<p>以后只要双击该文件即可执行指定命令；将文件放入系统【启动】目录中，可以实现开机自动运行。</p>
<h3 id="使用的案例">使用的案例</h3>
<p><strong>使用示例 1：</strong></p>
<p>在资源管理器卡死时，我们可以使用 <code>taskkill</code>
命令重启。将下面命令保存为
<code>ReExplorer.bat</code>，在需要时双击即可强制重启资源管理器。或直接打开
CMD 运行命令也可以。</p>
<p>text</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">01taskkill /f /im explorer.exe &amp; start explorer.exe</span><br></pre></td></tr></table></figure>
<p><strong>使用示例 2：</strong></p>
<p>迅雷会在后台自动运行 <code>ThunderPlatform.exe</code> 进程和
<code>XLServicePlatform</code>
服务，如果当前没有使用迅雷的话显然没必要。</p>
<p>我们可以将如下代码保存为
<code>killxl.bat</code>，并放入【启动】目录，开机后会自动运行该脚本，清除这两个进程。</p>
<p>text</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">0102net stop XLServicePlatform</span><br><span class="line">taskkill /F /im ThunderPlatform.exe</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows Command</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Rider引入nuget无法加载包依赖解方式</title>
    <url>/%E5%85%B3%E4%BA%8ERider%E5%BC%95%E5%85%A5nuget%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E5%8C%85%E4%BE%9D%E8%B5%96%E8%A7%A3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>这个问题已经是困扰我三天了，因为<code>C#</code>使用<code>ride</code>r开发的人相对较少，也可能是我自身遇到这个问题比较特殊，终于找到了<code>nuget</code>无法引入包的解决方案
<span id="more"></span> 首先看图：</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211220823203.png" /></p>
<p>我在<code>Nuget</code>下面查找<code>Nunit</code>测试包下面都没有加载出来，其他的包也是加载不出来，下面一直显示的包重置，但是我是默认下载下来的，什么也没有修改，然后我就点开了<code>nuget.config</code>这个配置文件</p>
<p>图中也有，我在网上也没有找到相关的配置说明，当时也没有想到去微软官网去看，因为官网讲的基本都是关于VS的配置。</p>
<p>在默认配置中：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211220828462.png" /></p>
<p>source中默认的feeds连接都是空的，问题就是出在我上面标注出来的包的下载地址。</p>
<p>给下面从微软官方找到的配置地址，复制到<code>nuget.config</code>配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- defaultPushSource key works like the &#x27;defaultPushSource&#x27; key of NuGet.Config files. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- This can be used by administrators to prevent accidental publishing of packages to nuget.org. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;defaultPushSource&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://contoso.com/packages/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Default Package Sources; works like the &#x27;packageSources&#x27; section of NuGet.Config files. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- This collection cannot be deleted or modified but can be disabled/enabled by users. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packageSources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;Contoso Package Source&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://contoso.com/packages/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;nuget.org&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://api.nuget.org/v3/index.json&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">packageSources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Default Package Sources that are disabled by default. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Works like the &#x27;disabledPackageSources&#x27; section of NuGet.Config files. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Sources cannot be modified or deleted either but can be enabled/disabled by users. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disabledPackageSources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;nuget.org&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">disabledPackageSources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>要给这些enable都勾选上</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211220833403.png" /></p>
<p>然后右边的刷新按钮点一下，或者去到设置里面找到</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211220834175.png" /></p>
<p>这时候代表已经添加成功。</p>
<p>回到<code>nuget</code>以后,<code>packages</code>搜索框这时候已经加载出来包了，下图所示：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211220836706.png" /></p>
<p>这时候说明已经成功！！！</p>
<blockquote>
<p>本次版本是<code>.net6,rider版本是2021.3.4</code>，最新版2022版本应该也是可以这样修改，如果能直接加载出来就更好，无法加载可以尝试修改~</p>
</blockquote>
]]></content>
      <categories>
        <category>C#</category>
        <category>后端学习</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器（一）</title>
    <url>/%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="服务器的概述">1.服务器的概述</h3>
<h4 id="什么是服务器">1.什么是服务器</h4>
<blockquote>
<p>服务器是计算机的一种，它比普通计算机运行更快、负载更高、价格更贵。服务器在网络中为其它客户机（如PC机、智能手机、ATM等终端甚至是火车系统等大型设备）提供计算或者应用服务。服务器具有高速的CPU运算能力、长时间的可靠运行、强大的V/O外部数据吞吐能力以及更好的扩展性。根据服务器所提供的服务，一般来说服务器都具备承担响应服务请求、承担服务、保障服务的能力。服务器作为电子设备，其内部的结构十分的复杂，但与普通的计算机内部结构相差不大，如：cpu、硬盘、内存，系统、系统总线等。</p>
</blockquote>
<span id="more"></span>
<h3 id="服务器的作用">2.服务器的作用</h3>
<blockquote>
<p>通俗的说，服务器主要是用来响应终端的服务请求：并进行处理，我们在上网的时候是不可能直接将网客接人互联网的，我们都需要通过服务器米连接网络，真有服务器响应你的联网请求，并且进行处理以后才可以联网：存储的功能，服务器的存储空间一般比较充足，可以存储非常多的信息。</p>
</blockquote>
<h3 id="服务器的分类">3.服务器的分类</h3>
<h5 id="按物理形态">3.1 <strong>按物理形态：</strong></h5>
<p><strong>服务器：</strong>服务器可以理解为放在远程机房的独立计算机，和我们所用的台式机（没有显示器、键微、鼠标）除了外观和配置外，功能上没有差异，你可以通过远程控制自己安装系统及其他软件，同时可以解析和绑定城名，并通过城名或<code>IP</code>访问服务器上的网站。</p>
<p><strong>ECS服务器：</strong>云服务器<code>(Elastic Compute Service)</code>，通常用户可以根据自己的需要选定主机容量、<code>CPU</code>能力、内存大小、带宽及购买时常等，因此也称之为弹性计算服务器，<code>ECS</code>在使用上和独立的服务器没有区别，且可以让企业节省自行购买和维护服务器硬件的成本，<code>ECS</code>已被中小企业广泛使用。</p>
<p><strong>VPS服务器：</strong>虚拟专用服务器<code>(Virtual Private Server)</code>，即将一台独立服务器迎过虚拟技术分割为若干个處拟服务器，每个<code>VPS</code>可以独立安装系统，拥有独立的<code>IP</code>，实现不同<code>VPS</code>间磁盘空问、内存、<code>CPU</code>资源、进程和系统配置的隔商，为用户和应用程序模拟出“独占”使用计算资源的体验。<code>VPS</code>可以像独立服务器一样，重装操作系统，安裝程序，单独重启服务器，形式上和<code>ECS</code>没有区別，但总体性能和付费灵活性不如<code>ECS</code></p>
<p><strong>虚拟主机：</strong>即将一台己安装樣作系统和安全防范的服务器通过技术手段分制为若千个独立的空间，分配给用户独立使用，用户只需要上传网站程序，解析和绑定域名即可使用。虚拟主机不同于服务器，用户无法安装操作系统和操作软件，只能运行网站脚本语言、<code>html</code>文件、图片及其他静态文件等。虚拟主机相当于着干个用户一起租用一台服务器，价格实惠，简单易用，因此大多数企业网站选择了虚拟主机，而自助建站及云建站使用的也是虚拟主机。</p>
<h5 id="按物理位置">3.2 按物理位置：</h5>
<p><strong>国内主机</strong>
<strong>国外主机（美国、德国等地区的主机）</strong>
1、备案方而：国内主机必须备案因外主机不需要提交备案资料的。
2、访问速度：国内主机国内访问快，海外主机海外访问快。
3、线路：国内主机有线路限制，海外主机没有，因内主机线路以联通和电信为主，相同的线路访问不存在速度限制，但相互访问就有点问题了</p>
<h3 id="服务器的关键参数指标">4.服务器的关键参数指标</h3>
<h5 id="操作系统">4.1 操作系统：</h5>
<p><strong>Windows Server：</strong>
重要版本<code>Windows NT Server 4.0</code>、
<code>Windows 2000 Server</code>、 <code>Windows Server 2003</code>、
<code>Windows Server 2003 R2</code>、<code>Windows Server 2008</code> 、
<code>Windows Server 2008 R2</code>、
<code>Windows Server 2012</code>。<code>Windows</code>服务器操作系统派应用，结
合<code>.NET</code>开发环境，为微软企业用户提供了良好的应用框架。
<strong>Netware：</strong>
在一些特定行业和事业单位中，NetWare优秀的批处理功能和安全、稳定的系统性能也有很大的生存空间。NetWare常
用的版本有<code>Novell</code>的<code>3.11</code>、 <code>3.12</code>、
<code>4.10</code>、<code>5.0</code>等中英文版。 <strong>Unix：</strong>
<code>Unix</code>服务器操作系统由<code>AT&amp;T</code>公司和<code>SCO</code>公司共同推出，主要支持大型的文件系统服务、数据服务等应用。市面上流传的
主要有<code>SCO SVR</code>、<code>BSD Unix</code>、
<code>SUN Solaris</code>、 <code>IBM-AIX</code>、 <code>HP-U</code>、
<code>FreeBSDX</code>。 <strong>Linux：</strong>
<code>Linux</code>操作系统虽然与<code>UNIX</code>操作系统类似，但是它不是<code>UNIX</code>操作系统的变种。<code>Torvald</code>从开始编写内核代码时就仿效<code>UNIX</code>，
几乎所有<code>UNIX</code>的工具与外壳都可以运行在<code>LINUX</code>上。(linux系统相比windows更安全，运行效率更高）</p>
<h5 id="支持脚本">4.2 支持脚本：</h5>
<p>即是否网站程序常见的开发语言，主要有<code>asp</code>及<code>.net</code>、<code>php</code>、<code>jsp</code>,
-般需要根据网站程序所使用的开发语言选择，支持的开发语言越少主机越安全和高效</p>
<h5 id="空间容量"><strong>4.3 空间容量：</strong></h5>
<p>存放文件的空间大小，企业网站一般可以根据图片和视频文件大小来选择，以及主机使用的年限，一般1-5G就够用了</p>
<h5 id="主机带宽"><strong>4.4主机带宽：</strong></h5>
<p>主机支持的最大下行访问速度，即直接影响网站访问速度，但虚拟主机并不是带宽越大访问就会越快，还需要考虑同一台服务器上有多少个网站和其他网站是否会消耗带宽资源。</p>
<h5 id="访问流量">4.5 访问流量：</h5>
<p>当一台服务器分割的虚拟主机超过一定数量（如100，很多主机商一台服务器放置了数百个虚拟主机）时，为了限制因某个虚拟主机的网站大量消耗访问带宽（流量）资源，主机提供商不得不在成本和大多数用户的访问速度中找一个平衡点，所以就使用了限制访问流量这个指标。而对于用户来说，当然是不限制流量才没有后顾之忧。</p>
<h5 id="并发量">4.6 并发量：</h5>
<p>即同一时刻请求访问网站的用户数量，虚拟主机提供商为尽可能保障每个虚拟主机用户的网站稳定和公平性，不得己设置了并发量参数，从而可以在一定程度上确保一台服务器上的其他虚拟主机能稳定的访问。对于小型网站来说，同一时刻在线并动态请求的用户数量并不会太大，因此一般的用户感觉不出来自己的网站访问受限。</p>
<h5 id="cpu和内存">4.7 CPU和内存：</h5>
<p>和普通电脑一样，代表服务器的运行计算能力，也就是对网站程序的响应速度和效率，如果在不考虑成本的情况下，当然是CPU多核、内存越大性能越高，但企业网站的数据量是有限的，一般双核、4G就可以满足基本使用。</p>
<h5 id="服务器ip类型独立ip和共享ip">4.8
服务器ip类型：独立ip和共享ip：</h5>
<p>首先，两者的概念不一样，独立<code>IP</code>是指一个服务器拥有自己独立的<code>IP</code>地址，共享<code>IP</code>是指多个服务器共用一个公网IP地址，
群英把两者的优缺点简单概述如下几点：
1.价格方面：共享<code>IP</code>要比独立<code>IP</code>便宜.
2.风险问题：共享<code>IP</code>易受到外来网络攻击，且其中一个网站出现问题就会波及其他站点，而独立<code>IP</code>就不会受到这种连带的
波及问题.
3.收永影响：独立<code>IP</code>更有利于被搜素引擎收录，权重更高.
4.城名绑定区别：独立<code>IP</code>可以实现泛域名绑定，而共享<code>IP</code>无法实现泛域名绑定.
5.能香直接使用<code>IP</code>访问：独立IP可以直接使用<code>IP</code>访问，共享<code>IP</code>不能，若访问就会收到报错的提示。</p>
<h5 id="扩展性能">4.9 扩展性能：</h5>
<p>支持语言，是否支持伪静态、字体</p>
<h3 id="管理服务器">5. 管理服务器</h3>
<h5 id="ftp是什么">5.1 <strong>FTP是什么？</strong></h5>
<blockquote>
<p><code>FTP</code>
<code>(File Transfer Protocol</code>，文件传输协议）是
<code>TCPAP</code>
协议组中的协议之一。<code>FTP</code>协议包括两个组成部分，其一为
<code>FTP</code>服务器，其二为<code>FTP</code>客户端。 作用:
对于客户端：是为了客户端链接主机来管理自己的主机文件
对于主机商：可以用<code>FTP</code>可以用来实现限制不同虚拟主机分配给用户对服务器的管理权限</p>
</blockquote>
<h5 id="ftp链接模式">5.2 FTP链接模式：</h5>
<p>主动模式（<code>port</code>模式）
客户端发送控制链接到服务器的<code>FTP</code>墙口，一般是默认设置为<code>21</code>，然后服务器的数据端口主动去连接用户的客户蠲<code>n+1</code>的数据端口
被动模式（ <code>passive</code>模式）
客户端发送控制链接到服务器的<code>FTP</code>端口，一般是默认设置为<code>21</code>，客服躅的数据端口<code>n+1</code>端口，主动链接的服务器的数据<code>20</code>端口</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>C# windows 环境搭建</title>
    <url>/C-windows-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>注：本次学习开发使用的软件<code>jetbrians Rider</code></p>
</blockquote>
<h3
id="c-语言其实也叫做.net语言所有我们准备必要的开发环境下载链接-httpsdotnet.microsoft.comzh-cndownload">C#
语言，其实也叫做.net语言，所有我们准备必要的开发环境，下载链接:
https://dotnet.microsoft.com/zh-cn/download</h3>
<span id="more"></span>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211120647988.png" /></p>
<h3
id="上面两者软件都可以更推荐长期版本兼容性比较好">上面两者软件都可以，更推荐长期版本，兼容性比较好。</h3>
<h3 id="下载完成以后双击安装即可">下载完成以后双击安装即可：</h3>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211120649963.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211120648869.png" /></p>
<h3
id="当进度条走完时代表已经安装成功">当进度条走完时，代表已经安装成功。</h3>
<p>安装成功</p>
<h3
id="验证自己有没有安装成功在cmd中输入命令">验证自己有没有安装成功，在<code>cmd</code>中，输入命令</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet --list-sdks</span><br></pre></td></tr></table></figure>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211120809434.png" /></p>
<h3
id="出现这个即代表安装成功环境搭建完成">出现这个即代表安装成功，环境搭建完成。</h3>
<p><strong>然后安装 <code>Jerbetbrians Rider</code></strong></p>
<p><strong>官网下载：</strong>https://www.jetbrains.com/rider/</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211120814198.png" /></p>
<p><strong>下载以后双击：</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211131101754.png" /></p>
<p><strong>当出现这个界面的时候，即软件代表安装成功！</strong></p>
<p><strong>然后就是新建项目</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211131104971.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211131104951.png" /></p>
<p><strong>运行：</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211131106148.png" /></p>
<p><strong>运行结果<code>Hello, World！</code></strong></p>
<p><strong>环境搭建结束</strong></p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/Redis/</url>
    <content><![CDATA[<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238373.jfif" /></p>
<span id="more"></span>
<p>[TOC]</p>
<h3 id="一引言">一、引言</h3>
<hr />
<h4 id="数据库压力过大">1.1 数据库压力过大</h4>
<blockquote>
<p>由于用户量增大，请求数量也随之增大，数据压力过大</p>
</blockquote>
<h4 id="数据不同步">1.2 数据不同步</h4>
<blockquote>
<p>多台服务器之间，数据不同步</p>
</blockquote>
<h4 id="传统锁失效">1.3 传统锁失效</h4>
<blockquote>
<p>多台服务器之间的锁，已经不存在互斥性了。</p>
</blockquote>
<h3 id="二redis介绍">二、Redis介绍</h3>
<hr />
<h4 id="关于关系型数据库和nosql数据库键值对存储">2.1
关于关系型数据库和NOSQL数据库（键值对存储）</h4>
<blockquote>
<p>关系型数据库是基于关系表的数据库，最终会将数据持久化到磁盘上，而nosql数据库是基于特殊的结构，并将数据存储到内存的数据库。从性能上而言，nosql数据库要优于关系型数据库，从安全性上而言关系型数据库要优于nosql数据库，所以在实际开发中一个项目中nosql和关系型数据库会一起使用，达到性能和安全性的双保证。</p>
<p>NOSQL产品: redis，mongodb，memcached...</p>
</blockquote>
<blockquote>
<ul>
<li>Redis就是一款NoSQL</li>
<li>NoSQL -&gt; 非关系型数据库 -&gt; Not Only SQL。</li>
<li>Key-Value：Redis ...</li>
<li>文档型：ElasticSearch，Solr，Mongodb ...</li>
<li>面向列：Hbase，Cassandra ...</li>
<li>图形化：Neo4j ...</li>
<li>除了关系型数据库都是非关系型数据库</li>
<li>NoSQL只是一种概念，泛指非关系型数据库，和关系型数据库做一个区分
<!--more--> #### 2.2 Redis介绍</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p>有一位意大利人，在开发一款LLOOGG的统计页面，因为MySQL的性能不好，自己研发了一款非关系型数据库，并命名为Redis。Salvatore。</p></li>
<li><p>Redis（Remote Dictionary
Server）即远程字典服务，Redis是由C语言去编写，Redis是一款基于Key-Value的NoSQL，而且Redis是基于内存存储数据的，Redis还提供了多种持久化机制，性能可以达到110000/s读取数据以及81000/s写入数据，Redis还提供了主从，哨兵以及集群的搭建方式，可以更方便的横向扩展以及垂直扩展。</p></li>
</ul>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Redis之父</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238413.png"
alt="1586747559955" /></td>
</tr>
</tbody>
</table>
<h3 id="三redis安装">三、Redis安装</h3>
<hr />
<h4 id="安装redis">3.1 安装Redis</h4>
<blockquote>
<p>官网：https://redis.io</p>
<p>下载：http://download.redis.io/releases</p>
<p>中文网：https://www.redis.net.cn/</p>
</blockquote>
<blockquote>
<p>官网提供安装方式如下：（安装redis编译的c环境，此步骤没有编译）</p>
<p>Installation</p>
<p>Download, extract and compile Redis with:</p>
<p>$ wget &lt;http://download.redis.io/releases/redis-5.0.5.tar.gz
&gt;</p>
<p>$ tar xzf redis-5.0.5.tar.gz $ cd redis-5.0.5</p>
<p>$ make</p>
<p>The binaries that are now compiled are available in the src
directory. Run Redis with:</p>
<p>$ src/redis-server</p>
<p>You can interact with Redis using the built-in client:</p>
<p>$ src/redis-cli</p>
<p>redis&gt; set foo bar</p>
<p>OK</p>
<p>redis&gt; get foo</p>
<p>"bar"</p>
</blockquote>
<h4 id="安装步骤">3.3 安装步骤</h4>
<blockquote>
<p>1.把下载好的redis-6.2.6.tar.gz安装包拷贝到当前虚拟机root目录下，解压到/usr/local下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tar -zxvf redis-6.2.6.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>
<p>2.编译的c环境，注：安装时如果显示yum正在运行，需要先将yum进程kill后再执行该命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install gcc-c++</span><br></pre></td></tr></table></figure>
<p>3.进入redis-6.2.6目录 使用make命令编译redis（若报错，先make
distclean，再make）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]# make</span><br></pre></td></tr></table></figure>
<p>4.使用make PREFIX=/usr/local/redis-6.2.6
install命令安装（安装后会出现bin目录）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]# make PREFIX=/usr/local/redis-6.2.6 install</span><br></pre></td></tr></table></figure>
<p>5.启动redis服务端（前台启动）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]# cd bin</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ./redis-server </span><br></pre></td></tr></table></figure>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238861.png" /></p>
<p>启动后看到如上欢迎页面，但此窗口不能关闭，窗口关闭就认为redis也关闭了，所以我们需要在后台启动，然后再启动客户端进行连接，所以首先Ctrl+C退出。</p>
<p>解决：可以通过修改配置文件配置redis的后台启动（即服务器启动了但不会创建控制台窗口）</p>
<p>步骤如下：</p>
<p>1.切换到redis-6.2.6目录下，把当前目录下的redis.conf文件拷贝到bin目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# cd ../</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]# cp redis.conf bin/redis.conf</span><br></pre></td></tr></table></figure>
<p>2.切换到bin目录下，修改redis.conf文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.6]# cd bin</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# vim redis.conf </span><br></pre></td></tr></table></figure>
<p>3.将redis.conf文件中的daemonize的值从no修改成yes表示后台启动</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238640.png" /></p>
<p>4.启动redis服务端（后台启动）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ./redis-server redis.conf</span><br></pre></td></tr></table></figure>
<p>5.查看是否启动成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ps -ef | grep redis</span><br></pre></td></tr></table></figure>
<p>6.启动客户端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ./redis-cli</span><br></pre></td></tr></table></figure>
<p>7.存取数据进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name jack</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;jack&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="redis的配置文件">3.4 Redis的配置文件</h4>
<table>
<colgroup>
<col style="width: 13%" />
<col style="width: 29%" />
<col style="width: 57%" />
</colgroup>
<thead>
<tr class="header">
<th>配置项名称</th>
<th>配置项值范围</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>daemonize</td>
<td>yes、no</td>
<td>yes表示启用守护进程，默认是no即不以守护进程方式运行。其中Windows系统下不支持启用守护进程方式运行</td>
</tr>
<tr class="even">
<td>port</td>
<td></td>
<td>指定 Redis 监听端口，默认端口为 6379</td>
</tr>
<tr class="odd">
<td>bind</td>
<td></td>
<td>绑定的主机地址,如果需要设置远程访问则直接将这个属性备注下或者改为bind
* 即可,这个属性和下面的protected-mode控制了是否可以远程访问 。</td>
</tr>
<tr class="even">
<td>protected-mode</td>
<td>yes 、no</td>
<td>默认是yes，即开启。设置外部网络连接redis服务，设置方式如下：1、关闭protected-mode模式，此时外部网络可以直接访问2、开启protected-mode保护模式，需配置bind
ip或者设置访问密码</td>
</tr>
<tr class="odd">
<td>timeout</td>
<td>300</td>
<td>当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能</td>
</tr>
<tr class="even">
<td>loglevel</td>
<td>debug、verbose、notice、warning</td>
<td>日志级别，默认为 notice</td>
</tr>
<tr class="odd">
<td>databases</td>
<td>16</td>
<td>设置数据库的数量，默认的数据库是0。整个通过客户端工具可以看得到</td>
</tr>
<tr class="even">
<td>rdbcompression</td>
<td>yes、no</td>
<td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF
压缩，如果为了节省 CPU
时间，可以关闭该选项，但会导致数据库文件变的巨大。</td>
</tr>
<tr class="odd">
<td>dbfilename</td>
<td>dump.rdb</td>
<td>指定本地数据库文件名，默认值为 dump.rdb</td>
</tr>
<tr class="even">
<td>dir</td>
<td></td>
<td>指定本地数据库存放目录</td>
</tr>
<tr class="odd">
<td>requirepass</td>
<td></td>
<td>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis
时需要通过 AUTH <password> 命令提供密码，默认关闭</td>
</tr>
<tr class="even">
<td>maxclients</td>
<td>0</td>
<td>设置同一时间最大客户端连接数，默认无限制，Redis
可以同时打开的客户端连接数为 Redis
进程可以打开的最大文件描述符数，如果设置 maxclients
0，表示不作限制。当客户端连接数到达限制时，Redis
会关闭新的连接并向客户端返回 max number of clients reached
错误信息。</td>
</tr>
<tr class="odd">
<td>maxmemory</td>
<td>XXX <bytes></td>
<td>指定 Redis 最大内存限制，Redis
在启动时会把数据加载到内存中，达到最大内存后，Redis
会先尝试清除已到期或即将到期的 Key，当此方法处理
后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis
新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap
区。配置项值范围列里XXX为数值。</td>
</tr>
</tbody>
</table>
<h3
id="四redis-benchmark官方自带的性能测试工具">四、redis-benchmark官方自带的性能测试工具</h3>
<hr />
<h4 id="在安装的redis中可以看到redis-benchmark">4.1
在安装的redis中可以看到redis-benchmark</h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238733.png" /></p>
<h4 id="关于redis-benchmark-的一些参数">4.2 关于redis-benchmark
的一些参数</h4>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238626.png" /></p>
<blockquote>
<p>测试：100个并发，十万个请求，单机测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ./redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238323.png" /></p>
<p>====== SET ======<br />
100000 requests completed in 0.94 seconds 表示对十万个请求进行写入测试
100 parallel clients 100个并发客户端 3 bytes payload 每次写入3个字节
keep alive: 1 只有一台服务器处理请求 host configuration "save": 3600 1
300 100 60 10000 RDB持久化方式默认开启的规则 host configuration
"appendonly": no AOF持久化方式未开启 multi-thread: no 多线程未开启</p>
<p>99.998% &lt;= 12.559 milliseconds (cumulative count 99999) 99.999%
&lt;= 12.567 milliseconds (cumulative count 100000) 100.000% &lt;=
12.567 milliseconds (cumulative count 100000) 请求在多少毫秒处理完成</p>
<p>throughput summary: 106837.61 requests per second 每秒处理请求数</p>
</blockquote>
<blockquote>
<p>另一种写法：</p>
<p>只测试 set 和 get 命令后退出</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ./redis-benchmark -h 127.0.0.1 -p 6379 -t set,get -n 10000 -q</span><br></pre></td></tr></table></figure>
<h3 id="五redis的数据类型重点">五、Redis的数据类型【重点】</h3>
<hr />
<blockquote>
<p>常用的5种数据结构：</p>
<ul>
<li>key-string：一个key对应一个值。</li>
<li>key-hash：一个key对应一个Map。</li>
<li>key-list：一个key对应一个列表。</li>
<li>key-set：一个key对应一个集合。</li>
<li>key-zset：一个key对应一个有序的集合。</li>
</ul>
<p>另外三种数据结构：</p>
<ul>
<li>HyperLogLog：计算近似值的。</li>
<li>GEO：地理位置。</li>
<li>BIT：一般存储的也是一个字符串，存储的是一个byte[]。</li>
</ul>
<p>redis是一种高级的key-value的存储系统，其中的key是字符串类型，尽可能满足如下几点：</p>
<p>1.key不要太长，最好不要操作1024个字节，这不仅会消耗内存还会降低查找效率</p>
<p>2.key不要太短，如果太短会降低key的可读性</p>
<p>3.在项目中，key最好有一个统一的命名规范（根据企业的需求）</p>
<p>value最常用的五种数据类型：</p>
<p>1.字符串(String)：最常用的，一般用于存储一个值</p>
<p>2.列表(List)：使用list结构实现栈和队列结构</p>
<p>3.集合(Set) ：交集，差集和并集的操作</p>
<p>4.有序集合(sorted set) ：排行榜，积分存储等操作</p>
<p>5.哈希(Hash)：存储一个对象数据的</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238255.png" /></p>
<h4 id="字符串string">5.1 字符串(String)</h4>
<blockquote>
<p>set key
value：设定key持有指定的字符串value，如果该key存在则进行覆盖操作，总是返回"OK"</p>
<p>get
key：获取key的value。如果与该key关联的value不是String类型，redis将返回错误信息，因为get命令只能用于获取String
value，如果该key不存在，返回null</p>
<p>setex key seconds
value：设置key以及对应的value，还可以设置过期时间</p>
<p>setnx key
value：当key不存在时，设置对应的value，当key存在时，不做任何操作</p>
<p>incr
key：将指定的key的value原子性的递增1.如果该key不存在，其初始值为0，在incr之后其值为1。如果value的值不能转成整型，如hello，该操作将执行失败并返回相应的错误信息。</p>
<p>decr
key：将指定的key的value原子性的递减1.如果该key不存在，其初始值为0，在incr之后其值为-1。如果value的值不能转成整型，如hello，该操作将执行失败并返回相应的错误信息。</p>
<p>incrby key
increment：将指定的key的value原子性增加increment，如果该key不存在，器初始值为0，在incrby之后，该值为increment。如果该值不能转成整型，如hello则失败并返回错误信息。</p>
<p>decrby key
decrement：将指定的key的value原子性减少decrement，如果该key不存在，器初始值为0，在decrby之后，该值为decrement。如果该值不能转成整型，如hello则失败并返回错误信息。</p>
</blockquote>
<blockquote>
<p>使用场景如下：</p>
</blockquote>
<blockquote>
<p>1.简单的缓存存储（最常用）</p>
<p>2.消息的失效性（过期时间的设置）</p>
<p>3.分布式锁的实现（redisson）</p>
</blockquote>
<h4 id="列表list">5.2 列表(List)</h4>
<blockquote>
<p>lpush key value1
value2...：在指定的key所关联的list的头部插入所有的values，如果该key不存在，该命令在插入的之前创建一个与该key关联的空链表，之后再向该链表的头部插入数据。插入成功，返回元素的个数。</p>
<p>rpush key value1 value2…：在该list的尾部添加元素。</p>
<p>lrange key start
end：获取链表中从start到end的元素的值，start、end可为负数，若为-1则表示链表尾部的元素，-2则表示倒数第二个，依次类推….</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238502.png" /></p>
<p>lpop
key：返回并弹出指定的key关联的链表中的第一个元素，即头部元素。</p>
<p>rpop key：从尾部弹出元素。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071238251.png" /></p>
<p>llen key：返回指定的key关联的链表中的元素的数量。</p>
</blockquote>
<blockquote>
<p>使用场景如下：</p>
</blockquote>
<blockquote>
<p>消息流的场景：</p>
<p>1.用户的id作为key，发送的消息作为value，例如：朋友圈发布，微博发布，公众号发布...</p>
</blockquote>
<h4 id="集合set不允许出现重复的元素">5.3
集合(Set，不允许出现重复的元素)</h4>
<blockquote>
<p>sadd key value1
value2…：向set中添加数据，如果该key的值已有则不会重复添加。</p>
<p>smembers key：获取set中所有的成员。</p>
<p>scard key：获取set中成员的数量。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239420.png" /></p>
<p>sismember key
member：判断参数中指定的成员是否在该set中，1表示存在，0表示不存在或者该key本身就不存在。</p>
<p>srem key member1 member2… ：删除set中指定的成员。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239230.png" /></p>
<p>srandmember key：随机返回set中的一个成员。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239870.png" /></p>
<p>spop key：随机返回set中的一个成员并从set中移除。</p>
<p>sdiff key1
key2：返回key1与key2中相差的成员，而且与key的顺序有关，即返回差集。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239621.png" /></p>
<p>sdiffstore destination key1
key2：将key1、key2相差的成员存储在destination上。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239477.png" /></p>
<p>sinter key[key1,key2…]：返回交集。</p>
<p>sinterstore destination key1
key2：将返回的交集存储在destination上。</p>
<p><img
src="E:/notes/Day75-Redis/1.%E8%AF%BE%E4%BB%B6/34.redis/01.%E8%AF%BE%E4%BB%B6/Pictures/18.png" /></p>
<p>sunion key1 key2：返回并集。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239623.png" /></p>
<p>sunionstore destination key1
key2：将返回的并集存储在destination上</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239546.png" /></p>
</blockquote>
<blockquote>
<p>使用场景如下：</p>
</blockquote>
<blockquote>
<p>公司年会，随机抽奖小程序</p>
<p>1.把所有用户统一存入set集合中</p>
<p>2.查看所有抽奖人数</p>
<p>3.随机抽取指定得奖人数并从set集合中删除</p>
<p>实现：</p>
<p>1.sadd choujiang userid1,userid2,userid3...</p>
<p>2.smembers choujiang</p>
<p>3.spop choujiang [count]</p>
</blockquote>
<blockquote>
<p>微信点赞，微博收藏</p>
<p>1.点赞，创建集合并加入对应用户</p>
<p>2.取消点赞，从集合中删除对应用户</p>
<p>3.检查用户是否点过赞</p>
<p>4.获取点赞用户列表</p>
<p>5.获取点赞用户数量</p>
<p>实现：</p>
<p>1.sadd dianzan userid1,userid2,userid3...</p>
<p>2.srem dianzan userid1</p>
<p>3.sismember dianzan userid1</p>
<p>4.smembers dianzan</p>
<p>5.scard dianzan</p>
</blockquote>
<blockquote>
<p>可能认识的人推荐</p>
<p>1.两个集合取交集</p>
<p>实现：</p>
<p>1.sinter user1list,user2list...</p>
<p>2.sinterstore list user1list,user2list...</p>
</blockquote>
<h4 id="有序集合sorted-set">5.4 有序集合(sorted set)</h4>
<blockquote>
<p>zadd key score member score2 member2 …
：将所有成员以及该成员的分数存放到sorted-set中。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239166.png" /></p>
<p>zcard key：获取集合中的成员数量。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239334.png" /></p>
<p>zcount key min max：获取分数在[min,max]之间的成员。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239837.png" /></p>
<p>zincrby key increment member：设置指定成员的增加的分数。</p>
<p>zrangebyscore key min max [withscores] [limit offset
count]：返回分数在[min,max]的成员并按照分数从低到高排序。[withscores]：显示分数；[limit
offset
count]：offset，表明从脚标为offset的元素开始并返回count个成员。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239543.png" /></p>
<p>zrevrangebyscore key min max [withscores] [limit offset
count]：上面类似（score需从大到小），从高到底排序</p>
</blockquote>
<blockquote>
<p>使用场景如下：</p>
</blockquote>
<blockquote>
<p>排行榜实现</p>
<p>1.对播放的视频，分数自增1</p>
<p>2.展示排行榜前十的视频</p>
<p>实现：</p>
<p>1.zincrby videos 1 video1id</p>
<p>2.zrevrangebyscore videos 100 0 withscores limit 0 10
（zrevrangebyscore从大到小排序）</p>
</blockquote>
<h4 id="哈希hash">5.5 哈希(Hash)</h4>
<blockquote>
<p>hset key field value：为指定的key设定field/value对（键值对）。</p>
<p>hget key field：返回指定的key中的field的值。</p>
<p>hgetall key：获取key中的所有filed-vaule。</p>
<p>hlen key：获取key所包含的field的数量。</p>
<p>hincrby key field increment：设置key中filed的值增加increment</p>
<p>hdel key field [field ...]：删除key中的属性</p>
</blockquote>
<blockquote>
<p>使用场景如下：</p>
</blockquote>
<blockquote>
<p>购物车场景：</p>
<p>1.用户的id作为key</p>
<p>2.商品的id作为field（属性）</p>
<p>3.商品的数量作为value（属性值）</p>
<p>购物车操作：</p>
<p>1.用户添加购物车：hset cart:1001 20001 1
（id为1001的用户添加了一个id为20001的商品，数量为1个）</p>
<p>2.增加对应商品数量：hincrby cart:1001 20001 1</p>
<p>3.查询商品总数：hlen cart:1001</p>
<p>4.删除该用户的某个商品：hdel cart:1001 20001</p>
<p>5.查询该用户购物车信息：hgetall cart:1001</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071239965.png" /></p>
<h4 id="通用操作">5.6 通用操作</h4>
<blockquote>
<p>keys
patten：获取所有与patten匹配的key，*表示任意字符，?表示一个字符。</p>
<p>del key1 key2....：删除指定的key。</p>
<p>exists key：判断该key是否存在，1表示存在，0表示不存在。</p>
<p>expire key second：为当前key设置过期时间（单位：秒）。</p>
<p>ttl key：查看当前key剩余过期时间。</p>
<p>flushall: 删除所有key（慎用）</p>
<p>flushdb: 删除所有key（慎用）</p>
</blockquote>
<h3 id="六jedis的使用重点">六、Jedis的使用【重点】</h3>
<hr />
<blockquote>
<p>1.修改/usr/local/redis-5.0.4/bin目录下的redis.conf配置文件，然后启动redis服务端</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240709.png" /></p>
<p>修改redis.conf文件中的bind为：0.0.0.0，然后把保护模式关掉</p>
</blockquote>
<blockquote>
<p>如需设置密码，可以使用以下两种方式：</p>
<p>方式一：通过修改 redis.conf 文件，设置Redis的密码校验</p>
<p>requirepass 密码</p>
<p>方式二：在不修改 redis.conf
文件的前提下，在第一次链接Redis时，输入命令：Config set requirepass
密码</p>
<p>后续连接redis客户端的时候，需要先 AUTH 做一下校验</p>
<p>127.0.0.1:6379&gt; auth 密码</p>
</blockquote>
<blockquote>
<p>2.创建Maven工程，导入依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jedis客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.编写实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.编写测试类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSON;</span><br><span class="line"><span class="keyword">import</span> com.qf.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取客户端对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.126.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//如果有密码，必须设置</span></span><br><span class="line">        <span class="comment">//jedis.auth(&quot;root&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储String类型数据</span></span><br><span class="line">        jedis.set(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;java2203&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取String值</span></span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;content&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userJson</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line">        jedis.set(<span class="string">&quot;user&quot;</span>,userJson);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStringUser</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(jsonStringUser);</span><br><span class="line">        <span class="type">User</span> <span class="variable">db_user</span> <span class="operator">=</span> JSON.parseObject(jsonStringUser, User.class);</span><br><span class="line">        System.out.println(db_user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//通过池拿jedis对象</span></span><br><span class="line">        <span class="comment">//配置一些参数</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        <span class="comment">//配置参数</span></span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">200</span>);<span class="comment">//最大连接数</span></span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">20</span>);<span class="comment">//最大空闲</span></span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">1</span>);<span class="comment">//最小空闲</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建JedisPool对象</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig,<span class="string">&quot;192.168.126.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//获取jedis对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">        <span class="comment">//如果有密码，必须设置</span></span><br><span class="line">        <span class="comment">//jedis.auth(&quot;root&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作List集合</span></span><br><span class="line">        jedis.lpush(<span class="string">&quot;sina001&quot;</span>,<span class="string">&quot;今天中午吃什么？&quot;</span>,<span class="string">&quot;今天晚上喝什么&quot;</span>);</span><br><span class="line">        System.out.println(jedis.lrange(<span class="string">&quot;sina001&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作Set集合</span></span><br><span class="line">        jedis.sadd(<span class="string">&quot;userList&quot;</span>,<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;rose&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        System.out.println(jedis.smembers(<span class="string">&quot;userList&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//有序Set以及Hash</span></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="七redis中的事务了解">七、Redis中的事务【了解】</h3>
<hr />
<blockquote>
<p>Redis中的事务和MySQL中的事务有本质的区别，Redis中的事务是一个单独的隔离操作，事务中所有的命令都会序列化，按照顺序执行，事务在执行的过程中，不会被其他客户端发来的命令所打断，因为Redis服务端是个单线程的架构，不同的Client虽然看似可以同时保持连接，但发出去的命令是序列化执行的，这在通常的数据库理论下是最高级别的隔离。</p>
<p>Redis中的事务的作用就是串联多个命令，防止别的命令插队。</p>
<p>常用命令：multi、exec、discard、watch、unwatch</p>
<p>当输入multi命令时，之后输入的命令都会被放在队列中，但不会执行，直到输入exec后，Redis会将队列中的命令依次执行，discard用来撤销Exec之前被暂存的命令，并不是回滚。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240256.png" /></p>
</blockquote>
<blockquote>
<p>watch/unwatch</p>
<p>在执行multi之前，先执行watch key1 [key2...]
，watch提供的乐观锁功能（初始时一个版本号，exec之后会更新当前版本号），在你exec的那一刻，如果被watch的键发生过改动，则multi到exec之间的指令全部不执行。</p>
<p>watch表示监控，相当于加锁，但在执行完exec时就会解锁。</p>
<p>unwatch取消所有锁。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240336.png" /></p>
</blockquote>
<blockquote>
<p>Redis中的事务的特性总结</p>
<p>1.单独的隔离操作</p>
<p>​
事务中的所有命令都会序列化，然后按顺序执行，在执行过程中，不会被其他客户端发送的命令打断。</p>
<p>2.没有隔离级别的概念</p>
<p>​ 队列中的命令没有被提交之前都不会执行。</p>
<p>3.不能保证原子性</p>
<p>​
Redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，不会回滚</p>
</blockquote>
<h3 id="八redis消息订阅与发布了解">八、Redis消息订阅与发布【了解】</h3>
<hr />
<blockquote>
<p>subscribe channel 订阅频道 例如：subscribe cctv5</p>
<p>publish channel content 在指定频道中发布内容 例如：publish cctv5
basketball</p>
<p>同时打开两个客户端，一个订阅频道，一个在频道中发布内容，订阅频道的客户端会接收到消息。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240777.png" /></p>
</blockquote>
<h3 id="九redis图形化程序界面了解">九、Redis图形化程序界面【了解】</h3>
<hr />
<blockquote>
<p>Redis中默认有16个库，可以在不同的库中存储数据，默认使用0号库存储数据，使用select
0-15可以选择不同的库。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240008.png" /></p>
</blockquote>
<blockquote>
<p>安装之前，需要修改redis.conf文件中的bind为：0.0.0.0（之前已经修改过了）</p>
</blockquote>
<blockquote>
<p>下载地址：https://github.com/lework/RedisDesktopManager-Windows</p>
</blockquote>
<blockquote>
<p>安装之后，输入IP地址登录即可看到如下界面：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240715.png" /></p>
</blockquote>
<h3 id="十redis中的持久化重点">十、Redis中的持久化【重点】</h3>
<hr />
<blockquote>
<p>Redis有两种持久化方式：RDB和AOF。</p>
</blockquote>
<h4 id="rdbredis-database">1.RDB（Redis DataBase）</h4>
<blockquote>
<p>将内存中的数据以快照的方式写入磁盘中，在redis.conf文件中，我们可以找到如下配置：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240254.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240309.png" /></p>
<p>save 900 1</p>
<p>save 300 10</p>
<p>save 60 10000</p>
<p>配置含义：</p>
<p>900秒内，如果超过1个key被修改，则发起快照保存</p>
<p>300秒内，如果超过10个key被修改，则发起快照保存</p>
<p>60秒内，如果1万个key被修改，则发起快照保存</p>
<p>RDB方式存储的数据会在</p>
<p>dump.rdb文件中（在哪个目录启动redis服务端，该文件就会在对应目录下生成），该文件不能查看，如需备份，对Redis操作完成之后，只需拷贝该文件即可（Redis服务端启动时会自动加载该文件）</p>
</blockquote>
<h4 id="aofappend-of-file">2.AOF（Append Of File）</h4>
<blockquote>
<p>AOF默认是不开启的，需要手动开启，同样是在redis.conf文件中开启，如下：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240657.png" /></p>
<p>配置文件中的appendonly修改为yes，开启AOF持久化。开启后，启动redis服务端，发现多了一个appendonly.aof文件。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240766.png" /></p>
<p>之后任何的操作都会保存在appendonly.aof文件中，可以进行查看，Redis启动时会将appendonly.aof文件中的内容执行一遍。</p>
<p>如果AOF和RDB同时开启，系统会默认读取AOF的数据。</p>
</blockquote>
<h4 id="总结">3.总结</h4>
<blockquote>
<p><strong>RDB优点与缺点</strong></p>
<p>优点</p>
<p>如果要进行大规模数据的恢复，RDB方式要比AOF方式恢复速度要快。</p>
<p>RDB是一个非常紧凑(compact)的文件,它保存了某个时间点的数据集，非常适合用作备份，同时也非常适合用作灾难性恢复，它只有一个文件，内容紧凑，通过备份原文件到本机外的其他主机上，一旦本机发生宕机，就能将备份文件复制到redis安装目录下，通过启用服务就能完成数据的恢复。</p>
<p>缺点</p>
<p>RDB这种持久化方式不太适应对数据完整性要求严格的情况，因为，尽管我们可以用过修改快照实现持久化的频率，但是要持久化的数据是一段时间内的整个数据集的状态，如果在还没有触发快照时，本机就宕机了，那么对数据库所做的写操作就随之而消失了并没有持久化本地dump.rdb文件中。</p>
<p><strong>AOF优点与缺点</strong></p>
<p>优点</p>
<p>AOF有着多种持久化策略：</p>
<p>appendfsync
always:每修改同步，每一次发生数据变更都会持久化到磁盘上，性能较差，但数据完整性较好。</p>
<p>appendfsync everysec:
每秒同步，每秒内记录操作，异步操作，如果一秒内宕机，有数据丢失。</p>
<p>appendfsync no:不同步。</p>
<p>AOF文件是一个只进行追加操作的日志文件，对文件写入不需要进行seek，即使在追加的过程中，写入了不完整的命令（例如：磁盘已满），可以使用redis-check-aof工具可以修复这种问题</p>
<p>Redis可以在AOF文件变得过大时，会自动地在后台对AOF进行重写：重写后的新的AOF文件包含了恢复当前数据集所需的最小命令集合。整个重写操作是绝对安全的，因为Redis在创建AOF文件的过程中，会继续将命令追加到现有的AOF文件中，即使在重写的过程中发生宕机，现有的AOF文件也不会丢失。一旦新AOF文件创建完毕，Redis就会从旧的AOF文件切换到新的AOF文件，并对新的AOF文件进行追加操作。</p>
<p>缺点</p>
<p>对于相同的数据集来说，AOF文件要比RDB文件大。</p>
<p>根据所使用的持久化策略来说，AOF的速度要慢于RDB。一般情况下，每秒同步策略效果较好。不使用同步策略的情况下，AOF与RDB速度一样快。</p>
</blockquote>
<h3 id="十一redis的主从复制-重点">十一、Redis的主从复制 【重点】</h3>
<hr />
<blockquote>
<p>主从复制是指将一台Redis服务器的数据，复制到其它的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。</p>
<p>默认情况下，每台Redis服务器都是主节点，且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071240740.png" /></p>
<blockquote>
<p>主从复制的作用：</p>
<p>1.数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p>
<p>2.故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，但实际上是一种服务的冗余.</p>
<p>3.负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p>
<p>4.高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础.</p>
</blockquote>
<blockquote>
<p><strong>配置步骤：</strong></p>
<p>1.查看当前库的信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br></pre></td></tr></table></figure>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241232.png" /></p>
<p>2.关闭当前运行的redis，打开四个链接，进行测试，拷贝三个redis.conf文件（改成6379，6380，6381）</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241363.png" /></p>
<p>3.分别修改这三个文件信息，需要修改：端口，pid名字，log文件名字，dump.rdb名字</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241463.png" /></p>
<p>port 6379</p>
<p>pidfile /var/run/redis_6379.pid</p>
<p>logfile "6379.log"</p>
<p>dbfilename dump6379.rdb</p>
<p>port 6380</p>
<p>pidfile /var/run/redis_63780pid</p>
<p>logfile "6380.log"</p>
<p>dbfilename dump6380.rdb</p>
<p>port 6381</p>
<p>pidfile /var/run/redis_6381.pid</p>
<p>logfile "6381.log"</p>
<p>dbfilename dump6381.rdb</p>
<p>4.分别在三个链接中启动6379，6380，6381三台redis-server，在第四个链接中查看</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241739.png" /></p>
<p>查看状态</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241022.png" /></p>
<p>5.配置一主二从</p>
<p>默认情况下，每台Redis都是主节点，我们只需要配置从机即可，我们这里使用6379为主机，6380和6381为从机.</p>
<p>在对应6380的链接中进行配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ./redis-cli -p 6380</span><br><span class="line"></span><br><span class="line">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241702.png" /></p>
<p>6380从机配置成功之后，可以去主机中查看对应信息</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241494.png" /></p>
<p>6381从机配置方式和6380一样，配置成功之后可以再去看一下主机</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241741.png" /></p>
<p>6.由于这里使用的是命令进行配置，所以是暂时的，一般公司配置会在配置文件中进行配置，属于永久性配置，相当于一打开当前服务器，该服务器就是从机，一般主机可以写，从机不能写只能读，主机中的所有信息和数据都会被从机保存！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241875.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241162.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241729.png" /></p>
<p>即使主机断开链接（127.0.0.1:6379&gt;shutdown），从机仍然可以连接到主机，如果使用的是命令行配置的从机，从机一旦断开链接后，就会变回主机了，如果再次变回从机，仍旧可以获取主机中的值.</p>
<p>如果主机断开链接，从机可以使用命令：127.0.0.1:6380&gt;slaveof no one
使自己成为主机</p>
<p>7.主从复制原理</p>
<p>Slave启动成功连接到master后会发送一个sync同步命令，Master接到命令后，会启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕后，master将传送整个数据文件到salve，并完成一次完整的同步.</p>
<p>全量复制：salve服务在接收到数据库文件数据后，将其存盘并加载到内存中.</p>
<p>增量复制：master继续将新的所有收集到的修改命令依次传递给salve，完成同步.</p>
</blockquote>
<blockquote>
<p>如果是配置文件配置，可直接在对应的redis.conf文件中添加： slaveof
127.0.0.1 6379 （和命令一样）</p>
</blockquote>
<h3 id="十二redis的哨兵模式重点">十二、Redis的哨兵模式【重点】</h3>
<hr />
<blockquote>
<p>当主服务器宕机后，并且我们并没有及时发现，这时候就可能会出现数据丢失或程序无法运行。此时，redis的哨兵模式就派上用场了，可以用它来做redis的高可用.</p>
<p>每个哨兵都是监控主节点，主节点宕机，哨兵不会宕机！</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241034.png" /></p>
<blockquote>
<p>功能作用：</p>
<p>1.监控(monitoring)：Sentinel
会不断地检查你的主服务器和从服务器是否运作正常。</p>
<p>2.提醒(Notifation)：当被监控的某个 Redis 服务器出现问题时， Sentinel
可以通过 API 向管理员或者其他应用程序发送通知。</p>
<p>3.自动故障转移(Automatic failover)：当一个主服务器不能正常工作时，
Sentinel 会开始一次自动故障迁移操作，
它会将失效主服务器的其中一个从服务器升级为新的主服务器，
并让失效主服务器的其他从服务器改为复制新的主服务器；
当客户端试图连接失效的主服务器时，
集群也会向客户端返回新主服务器的地址，
使得集群可以使用新主服务器代替失效服务器。</p>
</blockquote>
<blockquote>
<p><strong>配置步骤：</strong></p>
<p>1.创建哨兵配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# vim sentinel.conf</span><br></pre></td></tr></table></figure>
<p>sentinel.conf文件内容如下：（格式：sentinel monitor 被监控名称 host
port 1）</p>
<p>sentinel monitor myredis 127.0.0.1 6379 1</p>
<p>注意：需要修改redis.conf文件中的bind为：0.0.0.0（之前已经修改过了），如果是三台阿里云服务器，每个服务器都要设置sentinel.conf文件并启动哨兵，127.0.0.1改成主机的IP地址，（从机也是监控主机IP，相当于三台服务器的sentinel.conf的内容都是一样的：sentinel
monitor myredis 主机IP地址 6379
1），后面的数字1表示有1个sentinel认为一个master失效时，master就算真正失效，slave会以投票的方式选举成为主机，一般设置的值为从机数量一半以上，比如说：三个从机就设置为：2</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241771.png" /></p>
<p>2.启动哨兵</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ./redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>
<p><img src="Pictures\59.png" /></p>
<p>3.如果Master节点断开了（主机宕机了），过一会，会发送哨兵日志，并自动通过算法在其他两个从机中选择一个成为主机.</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071241535.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242550.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242883.png" /></p>
<p>如果之前的主机6379又重新启动了，过一会，哨兵检测到了之后，会把6379设置为从机！</p>
<p>哨兵模式的优缺点</p>
<p>优点</p>
<p>1.哨兵集群模式是基于主从模式的，所有主从的优点，哨兵模式同样具有。</p>
<p>2.主从可以切换，故障可以转移，系统可用性更好。</p>
<p>3.哨兵模式是主从模式的升级，系统更健壮，可用性更高。</p>
<p>缺点</p>
<p>1.Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</p>
<p>2.实现哨兵模式的配置也不简单，甚至可以说有些繁琐</p>
</blockquote>
<h3
id="十三redis缓存穿透击穿雪崩倾斜">十三、Redis缓存穿透，击穿，雪崩，倾斜</h3>
<hr />
<h4 id="缓存穿透查不到">1.1 缓存穿透（查不到）</h4>
<blockquote>
<p>概念：当用户去查询数据的时候，发现redis内存数据库中没有，于是向持久层数据库查询，发现也没有，于是查询失败，当用户过多时，缓存都没有查到，于是都去查持久层数据库，这会给持久层数据库造成很大的压力，此时相当于出现了缓存穿透。</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242308.png" /></p>
<blockquote>
<p>解决方案：</p>
<p>1.布隆过滤器：是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的压力，但是，布隆过滤器有误差，说myql
有该id ，不一定有，说myql 没有该id，一定没有 ！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242234.png" /></p>
<p>2.缓存空对象：当存储层查不到时，即使返回的空对象也将其缓存起来，同时设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护后端数据.</p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242723.png" /></p>
<p>但会有两个问题：</p>
<p>1.如果空值被缓存起来，就意味着需要更多的空间存储更多的键，会有很多空值的键.</p>
<p>2.即使对空值设置了过期时间，还是会存在
缓存层和存储层会有一段时间窗口不一致，这对于需要保持一致性的业务会有影响.</p>
</blockquote>
<h4 id="缓存击穿访问量大缓存过期">1.2
缓存击穿（访问量大，缓存过期）</h4>
<blockquote>
<p>指对某一个key的频繁访问，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就会直接请求数据库，就像在一个屏障上凿开了一个洞，例如微博由于某个热搜导致宕机.</p>
<p>​</p>
<p>其实就是：当某个key在过期的瞬间，有大量的请求并发访问，这类数据一段是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并回写缓存，导致数据库瞬间压力过大。</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242941.png" /></p>
<blockquote>
<p>解决方案：</p>
<p>1.设置热点数据永不过期：从缓存层面上来说，不设置过期时间，就不会出现热点key过期后产生的问题.</p>
<p>2.添加互斥锁：使用分布式锁，保证对每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可，这种方式将高并发的压力转移到了分布式锁上，对分布式锁也是一种极大的考验.</p>
</blockquote>
<h4 id="缓存雪崩">1.3 缓存雪崩</h4>
<blockquote>
<p>指在某一个时间段，缓存集中过期失效或Redis宕机导致的，例如双十一抢购热门商品，这些商品都会放在缓存中，假设缓存时间为一个小时，一个小时之后，这些商品的缓存都过期了，访问压力瞬间都来到了数据库上，此时数据库会产生周期性的压力波峰，所有的请求都会到达存储层，存储层的调用量暴增，造成存储层挂掉的情况.</p>
</blockquote>
<p><img src="Pictures\67.png" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242355.png" /></p>
<blockquote>
<p>其实比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网，因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，此时的数据库还是可以顶住压力的，而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，有可能瞬间就把服务器压垮.</p>
<p>解决方案：</p>
<p>1.配置Redis的高可用：其实就是搭建集群环境，有更多的备用机.</p>
<p>2.限流降级：在缓存失效后，通过加锁或者队列来控制读服务器以及写缓存的线程数量，比如对某个key只允许一个线程查询数据和写缓存，其他线程等待.</p>
<p>3.数据预热：在项目正式部署之前，把可能用的数据预先访问一边，这样可以把一些数据加载到缓存中，在即将发生大并发访问之前手动触发加载缓存中不同的key，设置不同的过期时间，让缓存失效的时间尽量均衡.</p>
</blockquote>
<h4 id="缓存倾斜">1.4 缓存倾斜</h4>
<blockquote>
<p>指某一台redis服务器压力过大而导致该服务器宕机.</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242384.png" /></p>
<h3 id="十四redis集群搭建">十四、Redis集群搭建</h3>
<hr />
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071242006.png" /></p>
<h3 id="十五redis其他常见问题">十五、Redis其他常见问题</h3>
<hr />
<h4
id="key的生存时间到了redis会立即删除吗">1.key的生存时间到了，Redis会立即删除吗？</h4>
<blockquote>
<p><strong>不会立即删除</strong></p>
<p>1.1定期删除：Redis每隔一段时间就去会去查看Redis设置了过期时间的key，会再100ms的间隔中默认查看3个key。</p>
<p>1.2惰性删除：如果当你去查询一个已经过了生存时间的key时，Redis会先查看当前key的生存时间，是否已经到了，直接删除当前key，并且给用户返回一个空值。</p>
</blockquote>
<h4 id="redis的淘汰机制">2.Redis的淘汰机制</h4>
<blockquote>
<p>在Redis内存已经满的时候，添加了一个新的数据，执行淘汰机制。(redis.conf中配置)</p>
<p>2.1
volatile-lru：在内存不足时，Redis会在设置过了生存时间的key中干掉一个最近最少使用的key。</p>
<p>2.2
allkeys-lru：在内存不足时，Redis会在全部的key中干掉一个最近最少使用的key。</p>
<p>2.3
volatile-lfu：在内存不足时，Redis会在设置过了生存时间的key中干掉一个最近最少频次使用的key。</p>
<p>2.4
allkeys-lfu：在内存不足时，Redis会在全部的key中干掉一个最近最少频次使用的key。</p>
<p>2.5
volatile-random：在内存不足时，Redis会在设置过了生存时间的key中随机干掉一个。</p>
<p>2.6
allkeys-random：在内存不足时，Redis会在全部的key中随机干掉一个。</p>
<p>2.7
volatile-ttl：在内存不足时，Redis会在设置过了生存时间的key中干掉一个剩余生存时间最少的key。</p>
<p>2.8 noeviction：（默认）在内存不足时，直接报错。</p>
<p>方案：指定淘汰机制的方式：maxmemory-policy具体策略，设置Redis的最大内存：maxmemory
字节大小</p>
</blockquote>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/RabbitMQ/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="一引言">一、引言</h3>
<blockquote>
<p>模块之间的耦合度过高，一旦一个模块宕机后，全部功能都不能用了，并且同步通讯的成本过高，用户体验差。</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">RabbitMQ引言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071256754.png" /></td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h3 id="二rabbitmq介绍">二、RabbitMQ介绍</h3>
<hr />
<blockquote>
<p>市面上比较火爆的几款MQ：</p>
<p>ActiveMQ，RocketMQ，Kafka，RabbitMQ。</p>
<ul>
<li><p>语言的支持：ActiveMQ，RocketMQ只支持Java语言，Kafka可以支持多门语言，RabbitMQ支持多种语言。</p></li>
<li><p>效率方面：ActiveMQ，RocketMQ，Kafka效率都是毫秒级别，RabbitMQ是微秒级别的。</p></li>
<li><p>消息丢失，消息重复问题：
RabbitMQ针对消息的持久化，和重复问题都有比较成熟的解决方案。</p></li>
<li><p>学习成本：RabbitMQ非常简单。</p></li>
</ul>
<p>RabbitMQ是由Rabbit公司去研发和维护的，最终是在Pivotal，由Erlang语言开发（并发的编程语言）</p>
<p>RabbitMQ严格的遵循AMQP协议，高级消息队列协议，帮助我们在进程之间传递异步消息。</p>
</blockquote>
<blockquote>
<p>​
RabbitMQ是用Erlang实现的一个高并发高可靠AMQP消息队列服务器。支持消息的持久化、事务、拥塞控制、负载均衡等特性，使得RabbitMQ拥有更加广泛的应用场景。RabbitMQ跟Erlang和AMQP有关。下面简单介绍一下Erlang和AMQP。</p>
<p>​
Erlang是一门动态类型的函数式编程语言，它也是一门解释型语言，由Erlang虚拟机解释执行。从语言模型上说，Erlang是基于Actor模型的实现。在Actor模型里面，万物皆Actor，每个Actor都封装着内部状态，Actor相互之间只能通过消息传递这一种方式来进行通信。对应到Erlang里，每个Actor对应着一个Erlang进程，进程之间通过消息传递进行通信。相比共享内存，进程间通过消息传递来通信带来的直接好处就是消除了直接的锁开销(不考虑Erlang虚拟机底层实现中的锁应用)。</p>
<p>​ AMQP(Advanced Message Queue
Protocol)定义了一种消息系统规范。这个规范描述了在一个分布式的系统中各个子系统如何通过消息交互。而RabbitMQ则是AMQP的一种基于erlang的实现。AMQP将分布式系统中各个子系统隔离开来，子系统之间不再有依赖。子系统仅依赖于消息。子系统不关心消息的发送者，也不关心消息的接受者。</p>
</blockquote>
<blockquote>
<p>优点</p>
<p>1、解耦：降低系统模块的耦合度</p>
<p>2、提高系统响应时间</p>
<p>3、异步消息</p>
<p>4、过载保护，流量削峰</p>
</blockquote>
<blockquote>
<p>1.应用解耦</p>
<p>场景：双11购物，用户下单后，订单系统需要通知库存系统，传统的做法就是订单系统调用库存系统的接口.</p>
<p>这种做法有一个缺点:</p>
<ul>
<li>当库存系统出现故障时，订单就会失败.</li>
<li>订单系统和库存系统高耦合.</li>
</ul>
</blockquote>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071256494.png"
alt="1617864607294" />
<figcaption aria-hidden="true">1617864607294</figcaption>
</figure>
<blockquote>
<p>引入消息队列</p>
<ul>
<li><p>订单系统:
用户下单后，订单系统完成持久化处理，将消息写入消息队列,返回用户订单下单成功。</p></li>
<li><p>库存系统: 订阅下单的消息,获取下单消息，进行库操作。
就算库存系统出现故障，消息队列也能保证消息的可靠投递，不会导致消息丢失</p></li>
</ul>
</blockquote>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071256472.png"
alt="1617864757691" />
<figcaption aria-hidden="true">1617864757691</figcaption>
</figure>
<blockquote>
<p>2.异步处理
场景说明：用户注册后，需要发注册邮件和注册短信，传统的做法有两种 1.
串行的方式 2. 并行的方式</p>
<p>串行方式:
将注册信息写入数据库后,发送注册邮件，再发送注册短信，以上三个任务全部完成后才返回给客户端。
这有一个问题是，邮件，短信并不是必须的，它只是一个通知,而这种做法让客户端等待没有必要等待的东西.</p>
</blockquote>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071256803.png"
alt="1617865002916" />
<figcaption aria-hidden="true">1617865002916</figcaption>
</figure>
<blockquote>
<p>并行方式:将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间</p>
</blockquote>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257793.png"
alt="1617865040355" />
<figcaption aria-hidden="true">1617865040355</figcaption>
</figure>
<blockquote>
<p>假设三个业务节点分别使用50ms，串行方式使用时间150ms,并行使用时间100ms。虽然并性已经提高的处理时间，但是，前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,英爱是写入数据库后就返回.</p>
</blockquote>
<blockquote>
<p>消息队列</p>
<p>引入消息队列后，把发送邮件，短信不是必须的业务逻辑异步处理，引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计)，引入消息队列后处理后，响应时间是串行的3倍，是并行的2倍</p>
</blockquote>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257549.png"
alt="1617865161427" />
<figcaption aria-hidden="true">1617865161427</figcaption>
</figure>
<blockquote>
<p>3.流量削峰</p>
<p>流量削峰一般在秒杀活动中应用广泛</p>
<p>场景:秒杀活动，一般会因为流量过大，导致应用挂掉，为了解决这个问题，一般在应用前端加入消息队列。</p>
<p>作用: 1.可以控制活动人数，超过此一定阀值的订单直接丢弃</p>
<p>2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单)</p>
</blockquote>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257803.png"
alt="1617865250142" />
<figcaption aria-hidden="true">1617865250142</figcaption>
</figure>
<blockquote>
<p>这样我们就可以采用队列的机制来处理，如同我们在超市结算一样，并不会一窝蜂一样涌入收银台，而是排队结算，一个接着一个的处理，不能插队，因为同时结算就只能达到这么多。</p>
</blockquote>
<h3 id="三rabbitmq安装">三、RabbitMQ安装</h3>
<hr />
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/rabbitmq:management</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/rabbitmq</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@192 ~]<span class="comment"># cd /opt</span></span><br><span class="line">[root@192 opt]<span class="comment"># mkdir docker_rabbitmq</span></span><br><span class="line">[root@192 opt]<span class="comment"># cd docker_rabbitmq/</span></span><br><span class="line">[root@192 docker_rabbitmq]<span class="comment"># vim docker-compose.yml</span></span><br><span class="line">[root@192 docker_rabbitmq]<span class="comment"># docker-compose up -d</span></span><br><span class="line">Creating network <span class="string">&quot;docker_rabbitmq_default&quot;</span> with the default driver</span><br><span class="line">Pulling rabbitmq (daocloud.io/library/rabbitmq:management)...</span><br><span class="line">management: Pulling from library/rabbitmq</span><br><span class="line">01bf7da0a88c: Pull complete</span><br><span class="line">f3b4a5f15c7a: Pull complete</span><br><span class="line">57ffbe87baa1: Pull complete</span><br><span class="line">5ef3ef76b1b5: Pull complete</span><br><span class="line">82a3ce07c0eb: Pull complete</span><br><span class="line">1da219d9bd70: Pull complete</span><br><span class="line">446554ac749d: Pull complete</span><br><span class="line">8e4c09e200e7: Pull complete</span><br><span class="line">7a8620611ebf: Pull complete</span><br><span class="line">c70a2924b273: Pull complete</span><br><span class="line">3b0b9e36b4e9: Pull complete</span><br><span class="line">7619a9a42512: Pull complete</span><br><span class="line">965a8e1f1b1c: Pull complete</span><br><span class="line">Digest: sha256:4cc2267788b21e0f34523b4f2d9b32ee1c2867bf2de75d572158d6115349658c</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> daocloud.io/library/rabbitmq:management</span><br><span class="line">Creating rabbitmq ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>浏览器访问：http://ip:15672
（注：ip指当前云服务器的地址，云服务器记得开放 15672 和 5672 端口）</p>
<p>用户名和密码默认都是：guest</p>
</blockquote>
<h3 id="四rabbitmq架构重点">四、RabbitMQ架构【<code>重点</code>】</h3>
<hr />
<h4 id="官方的简单架构图">4.1 官方的简单架构图</h4>
<blockquote>
<ul>
<li><p>Publisher - 生产者：发布消息到RabbitMQ中的Exchange</p></li>
<li><p>Consumer - 消费者：监听RabbitMQ中的Queue中的消息</p></li>
<li><p>Exchange - 交换机：和生产者建立连接并接收生产者的消息</p></li>
<li><p>Queue -
队列：Exchange会将消息分发到指定的Queue，Queue和消费者进行交互</p></li>
<li><p>Routes - 路由：交换机以什么样的策略将消息发布到Queue</p></li>
</ul>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">简单架构图</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257617.png"
alt="1587703812776" /></td>
</tr>
</tbody>
</table>
<h4 id="rabbitmq的完整架构图">4.2 RabbitMQ的完整架构图</h4>
<blockquote>
<p>完整架构图</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">完整架构图</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257828.png"
alt="1587705504342" /></td>
</tr>
</tbody>
</table>
<h4 id="rabbitmq-通讯方式">4.3 RabbitMQ 通讯方式</h4>
<blockquote>
<p>https://www.rabbitmq.com/getstarted.html</p>
</blockquote>
<h4 id="hello-world案例演示">4.4 Hello-World案例演示</h4>
<blockquote>
<ol type="1">
<li>导入依赖</li>
</ol>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="2" type="1">
<li>创建生产者 Publisher</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Publisher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Publisher...&quot;</span>);</span><br><span class="line">        <span class="comment">//配置连接参数</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.25.132&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//获取Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//配置队列参数</span></span><br><span class="line">        <span class="comment">//参数1：queue - 指定队列的名称</span></span><br><span class="line">        <span class="comment">//参数2：durable - 当前队列是否需要持久化,值为true时表示持久化，rabbitmq宕机或重启后，队列依然在</span></span><br><span class="line">        <span class="comment">//参数3：exclusive - 当前队列是否为排他队列，值为true时表示与当前连接（connection）绑定，连接关闭，队列消失</span></span><br><span class="line">        <span class="comment">//参数4：autoDelete - 当前队列是否自动删除，值为true时表示队列中的消息一旦被消费，该队列会消失</span></span><br><span class="line">        <span class="comment">//参数5：arguments - 指定当前队列的相关参数</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;helloworldQueue&quot;</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//发布消息到exchange，同时指定路由的规则</span></span><br><span class="line">        <span class="comment">// 参数1：指定exchange，目前测试没有创建交换机，使用&quot;&quot;</span></span><br><span class="line">        <span class="comment">// 参数2：指定路由的规则，或者使用具体的队列名称</span></span><br><span class="line">        <span class="comment">// 参数3：指定传递的消息所携带的properties，目前测试不需要，使用null</span></span><br><span class="line">        <span class="comment">// 参数4：指定发布的具体消息，byte[]类型，目前测试需要，传递数据进行类型转换</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;helloworldQueue&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;helloworld&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="3" type="1">
<li>创建消费者 Consumer</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Consumer...&quot;</span>);</span><br><span class="line">        <span class="comment">//配置连接参数</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.25.132&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//获取Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//监听队列</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;来自生产者的消息：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费消息</span></span><br><span class="line">        <span class="comment">//参数1：queue - 指定消费哪个队列</span></span><br><span class="line">        <span class="comment">//参数2：autoAck - 指定是否自动ACK （true表示接收到消息后，会立即告知RabbitMQ，false表示不告知）</span></span><br><span class="line">        <span class="comment">//参数3：consumer - 指定消费回调</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;helloworldQueue&quot;</span>,<span class="literal">true</span>,defaultConsumer);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分别启动生产者和消费者进行测试（生产一次才能消费一次）</p>
</blockquote>
<h4 id="基本原理">4.5 基本原理</h4>
<blockquote>
<p>RabbitMQ是消息队列的一种实现，那么一个消息队列到底需要什么？答案是队列，即Queue，那么接下来所有名词都是围绕这个<strong>Queue</strong>来拓展的。</p>
<p>​
就RabbimtMQ而言，Queue是其中的一个逻辑上的实现，我们需要连接到RabbitMQ来操作队列进而实现业务功能，所以就会有<strong>Connection</strong>，我们发一条消息连接一次，这样很显然是浪费资源的，建立连接的过程也很耗时，所以我们就会做一个东西让他来管理连接，当我用的时候，直接从里边拿出来已经建立好的连接发信息，那么<strong>ConnectionFactory</strong>应运而生。</p>
<p>​
接下来，当程序开发时，可能不止用到一个队列，可能有订单的队列、消息的队列、任务的队列等等，那么就需要给不同的queue发信息，那么和每一个队列连接的这个概念，就叫<strong>Channel</strong>。</p>
<p>​
再往下来，当我们开发的时候还有时候会用到这样一种功能，就是当我发送一条消息，需要让几个queue都收到，那么怎么解决这个问题呢，难道我要给每一个queue发送一次消息？那岂不是浪费带宽又浪费资源，我们能想到什么办法呢，当然是我们发送给RabbitMQ服务器一次，然后让RabbitMQ服务器自己解析需要给哪个Queue发，那么<strong>Exchange</strong>就是干这件事的
但是我们给Exchange发消息，他怎么知道给哪个Queue发呢？这里就用到了<strong>RoutingKey和BindingKey</strong>
BindingKey是Exchange和Queue绑定的规则描述，这个描述用来解析当Exchange接收到消息时，Exchange接收到的消息会带有RoutingKey这个字段，Exchange就是根据这个RoutingKey和当前Exchange所有绑定的BindingKey做匹配，如果满足要求，就往BindingKey所绑定的Queue发送消息，这样我们就解决了我们向RabbitMQ发送一次消息，可以分发到不同的Queue的过程</p>
<p>至此，我们就把所有的名词贯通咯，接下来做个概要描述：</p>
<ul>
<li>Broker:提供一种传输服务,它的角色就是维护一条从生产者到消费者的路线，保证数据能按照指定的方式进行传输</li>
<li>ConnectionFactory：与RabbitMQ服务器连接的管理器</li>
<li>Connection：与RabbitMQ服务器的TCP连接</li>
<li>Channel：与Exchange的连接，一个Connection可以包含多个Channel。之所以需要Channel，是因为TCP连接的建立和释放都是十分昂贵的，为了多路复用。RabbitMQ建议客户端线程之间不要共用Channel，但是建议尽量共用Connection。</li>
<li>Queue:消息的载体,每个消息都会被投到一个或多个队列。</li>
<li>Exchange：接受消息生产者的消息，并根据消息的RoutingKey和
Exchange绑定的BindingKey，以及Binding规则将消息路由给服务器中的队列。ExchangeType决定了Exchange路由消息的行为，例如，在RabbitMQ中，ExchangeType有direct、Fanout和Topic三种，不同类型的Exchange路由的行为是不一样的。</li>
<li>Message Queue：消息队列，用于存储还未被消费者消费的消息。</li>
<li>Message:
由Header和Body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、由哪个Message
Queue接受、优先级是多少等。而Body是真正需要传输的APP数据。</li>
<li>RoutingKey：由Producer发送Message时指定，指定当前消息被谁接受</li>
<li>BindingKey：由Consumer在Binding Exchange与Message
Queue时指定，指定当前Exchange下，什么样的RoutingKey会被下派到当前绑定的Queue中</li>
<li>Binding:联系了Exchange与Message Queue。Exchange在与多个Message
Queue发生Binding后会生成一张路由表，路由表中存储着Message
Queue所需消息的限制条件即Binding
Key。当Exchange收到Message时会解析其Header得到Routing
Key，Exchange根据Routing Key与<strong>Exchange
Type</strong>将Message路由到Message Queue。Binding
Key由Consumer在Binding Exchange与Message Queue时指定，而Routing
Key由Producer发送Message时指定，两者的匹配方式由Exchange Type决定。</li>
<li>Server: 接受客户端连接，实现AMQP消息队列和路由功能的进程。</li>
<li>Virtual
Host:其实是一个虚拟概念，类似于权限控制组，可以通过命令分配给用户Virtual
Host的权限，默认的guest用户是管理员权限，初始空间有/，一个Virtual
Host里面可以有若干个Exchange和Queue，但是权限控制的最小粒度是Virtual
Host</li>
</ul>
</blockquote>
<h3
id="五springboot整合rabbitmq的使用重点">五、SpringBoot整合RabbitMQ的使用【<code>重点</code>】</h3>
<hr />
<h4 id="导入依赖">5.1 导入依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="在application.properties中增加配置">5.2
在application.properties中增加配置</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对于rabbitMQ的支持</span></span><br><span class="line">spring.rabbitmq.host=192.168.153.136</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br></pre></td></tr></table></figure>
<h4 id="hello-world-简单队列">5.3 Hello-World 简单队列</h4>
<blockquote>
<p>一个生产者，一个默认的交换机，一个队列，一个消费者</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">结构图</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257229.png"
alt="1587715551088" /></td>
</tr>
</tbody>
</table>
<blockquote>
<p>1）创建配置类，用于创建队列对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.simple;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleQueueConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">simple</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;simpleQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2）创建生产者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.simple;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleQueueProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SimpleQueueProducer&quot;</span>);</span><br><span class="line">        <span class="comment">//发送消息，第一个参数为队列名称，第二参数为消息内容</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;simpleQueue&quot;</span>,<span class="string">&quot;简单模式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3）创建消费者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.simple;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleQueueCustomer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitListener(queues=&quot;simpleQueue&quot;)</span><span class="comment">//监听指定的消息队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SimpleQueueCustomer&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;来SimpleQueueProducer的信息：&quot;</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4）在src01ApplicationTests.java进行测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture;</span><br><span class="line"><span class="keyword">import</span> com.couture.simple.SimpleQueueProducer;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbitmq01ApplicationTests</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpleQueueProducer simpleQueueProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueueProducer</span><span class="params">()</span>&#123;</span><br><span class="line">        simpleQueueProducer.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果传递的是 JavaBean
对象，该实体类需要实现序列化接口，具体流程如下：</p>
</blockquote>
<blockquote>
<ol type="1">
<li>导入lombok依赖，创建User类</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="2" type="1">
<li>修改生产者中的代码</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimplePublisher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SimplePublisher...&quot;</span>);</span><br><span class="line">        <span class="comment">//rabbitTemplate.convertAndSend(&quot;&quot;,&quot;simpleQueue&quot;,&quot;简单模式&quot;);</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;&quot;</span>,<span class="string">&quot;simpleQueue&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;123&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="3" type="1">
<li>修改消费者中的代码</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RabbitListener(queues = &quot;simpleQueue&quot;)</span></span><br><span class="line"><span class="comment">//    public void receive(String content)&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;SimpleConsumer...&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;来自SimplePublisher的消息：&quot;+content);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simpleQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SimpleConsumer...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;来自SimplePublisher的消息：&quot;</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="4" type="1">
<li>运行测试类即可！</li>
</ol>
</blockquote>
<h4 id="work-工作队列">5.4 Work 工作队列</h4>
<blockquote>
<p>一个生产者，一个默认的交换机，一个队列，两个消费者</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">结构图</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257641.png"
alt="1587718055260" /></td>
</tr>
</tbody>
</table>
<blockquote>
<p>1）创建配置类，用于创建队列对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkQueueConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;workQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2）创建生产者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkQueueProducer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WorkQueueProducer&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;workQueue&quot;</span>,<span class="string">&quot;工作队列模式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3）创建消费者，本案例创建两个消费者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkQueueCustomer_01</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitListener(queues=&quot;workQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WorkQueueCustomer_01：&quot;</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkQueueCustomer_02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues=&quot;workQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WorkQueueCustomer_02：&quot;</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4）在测试类中添加对象和方法进行测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WorkQueueProducer workQueueProducer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueueProducer</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">        workQueueProducer.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="publishsubscribe-发布订阅模式">5.5 Publish/Subscribe
发布订阅模式</h4>
<blockquote>
<p>一个生产者，一个交换机，两个队列，两个消费者</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">结构图</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257569.png"
alt="1587720941513" /></td>
</tr>
</tbody>
</table>
<blockquote>
<p>使用该模式需要借助交换机，生产者将消息发送到交换机，再通过交换机到达队列.</p>
<p>有四种交换机：direct/topic/headers/fanout，默认交换机是direct，发布与订阅的实现使用第四个交换器类型fanout</p>
<p>使用交换机时，每个消费者有自己的队列，生产者将消息发送到交换机(X)，每个队列都要绑定到交换机</p>
</blockquote>
<blockquote>
<p>本例中：</p>
<p>创建2个消息队列</p>
<p>创建一个fanout交换机对象</p>
<p>Bind交换机和队列</p>
</blockquote>
<blockquote>
<p>1）创建配置类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建两个队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanoutQueue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanoutQueue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanoutExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将两个队列绑定到交换机上</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingFanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingFanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>2）创建生产者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FanoutProducer&quot;</span>);</span><br><span class="line">        <span class="comment">//第一个参数是交换机的名称 ，第二个参数是routerKey 这里设置为空字符串即可，第三个参数是要发送的消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;fanoutExchange&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;发布/订阅&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3）创建消费者，本案例创建两个消费者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutCustomer_01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanoutQueue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FanoutCustomer_01：&quot;</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutCustomer_02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanoutQueue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FanoutCustomer_02：&quot;</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4）在测试类中添加对象和方法进行测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FanoutProducer fanoutProducer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutProducer</span><span class="params">()</span>&#123;</span><br><span class="line">    fanoutProducer.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="routing-路由模式">5.6 Routing 路由模式</h4>
<blockquote>
<p>一个生产者，一个交换机，两个队列，两个消费者</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">结构图</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257024.png"
alt="1587724886159" /></td>
</tr>
</tbody>
</table>
<blockquote>
<p>生产者将消息发送到direct交换机（路由模式需要借助直连交换机实现），在绑定队列和交换机的时候有一个路由key，生产者发送的消息会指定一个路由key，那么消息只会发送到相应key相同的队列，接着监听该队列的消费者消费消息。也就是让消费者有选择性的接收消息。</p>
</blockquote>
<blockquote>
<p>本例中：</p>
<p>创建2个消息队列</p>
<p>创建一个direct交换机对象</p>
<p>Bind交换机和队列</p>
</blockquote>
<blockquote>
<p>1）创建配置类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;directQueue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;directQueue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;directExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bingDirectQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bingDirectQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2）创建生产者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DirectExchange directExchange;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DirectProducer&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(directExchange.getName(),<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;zhangsanContent&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(directExchange.getName(),<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;lisiContent&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3）创建两个消费者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectCustomer_01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;directQueue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DirectCustomer_01：&quot;</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectCustomer_02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;directQueue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DirectCustomer_02：&quot;</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4）在测试类中添加对象和方法进行测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DirectProducer directProducer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectProducer</span><span class="params">()</span>&#123;</span><br><span class="line">    directProducer.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="topic-主题模式">5.7 Topic 主题模式</h4>
<blockquote>
<p>一个生产者，一个交换机，两个队列，两个消费者</p>
</blockquote>
<table>
<colgroup>
<col style="width: 100%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">结构图</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257254.png"
alt="1587727436898" /></td>
</tr>
</tbody>
</table>
<blockquote>
<p>又称通配符模式（可以理解为模糊匹配，路由模式相当于精确匹配）</p>
<p>使用直连交换机可以改善我们的系统，但是它仍有局限性，它不能实现多重条件的路由。</p>
<p>在消息系统中，我们不仅想要订阅基于路由键的队列，还想订阅基于生产消息的源。这时候可以使用topic交换机。</p>
<p>使用主题交换机时不能采用任意写法的路由键，路由键的形式应该是由点分割的有意义的单词。例如"goods.stock.info"等。路由key最多255字节。</p>
</blockquote>
<blockquote>
<p>*号代表一个单词</p>
<p>#号代表0个或多个单词</p>
</blockquote>
<blockquote>
<p>1）创建配置类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.topic;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topicQueue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topicQueue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;topicExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bingTopicQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class="string">&quot;wangwu.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bingTopicQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="string">&quot;zhaoliu.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2）创建生产者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TopicExchange topicExchange;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TopicProducer&quot;</span>);</span><br><span class="line"> rabbitTemplate.convertAndSend(topicExchange.getName(),<span class="string">&quot;wangwu.abc&quot;</span>,<span class="string">&quot;wangwuContent&quot;</span>);    rabbitTemplate.convertAndSend(topicExchange.getName(),<span class="string">&quot;zhaoliu.xyz.qwer&quot;</span>,<span class="string">&quot;zhaoliuContent&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3）创建两个消费者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicCustomer_01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topicQueue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TopicCustomer_01：&quot;</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicCustomer_02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topicQueue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TopicCustomer_02：&quot;</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4）在测试类中添加对象和方法进行测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TopicProducer topicProducer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicProducer</span><span class="params">()</span>&#123;</span><br><span class="line">    topicProducer.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="手动ack">5.8手动Ack</h4>
<blockquote>
<p>RabbitMQ中的Ack：
主要是确认消息被消费者消费完成后通知服务器将队列里面的消息清除，spring-boot-data-amqp
是自动ACK机制，就意味着 MQ
会在消息发送完毕后，自动帮我们去ACK，然后删除队列中的消息，这样会存在一些问题：如果消费者处理消息需要较长时间，或者在消费消息的时候出现异常，都会出现问题，手动Ack可以避免消息重复消费。</p>
</blockquote>
<h5 id="原生方式测试">5.8.1 原生方式测试</h5>
<blockquote>
<p>1.以简单模式为例，只需要修改消费者即可，启动生产者进行测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者启动...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//设置参数</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.25.134&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//浏览器访问的是：15672</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回调，创建Consumer</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//获取消息</span></span><br><span class="line">                    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(body, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    <span class="comment">//模拟异常</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">                    <span class="comment">//手动ack</span></span><br><span class="line">                    <span class="comment">//参数1：deliveryTag:投递过来消息的标签,由MQ打的，从1开始，1,2,3...</span></span><br><span class="line">        			<span class="comment">//参数2：multiple：是否批量确认之前已经消费过的消息，一般为false</span></span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//捕获所有异常</span></span><br><span class="line">                    <span class="comment">//第三个参数：requeue -&gt; true表示重新放入队列，false -&gt; 放弃该消息</span></span><br><span class="line">                    <span class="comment">//channel.basicNack(envelope.getDeliveryTag(), false, true);</span></span><br><span class="line">                    <span class="comment">//抛弃此条消息</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//关闭，否则一直循环当前操作</span></span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取消息</span></span><br><span class="line">        <span class="comment">//1.队列名称（从哪个队列中获取消息）</span></span><br><span class="line">        <span class="comment">//2.true表示自动ack（消费完消息之后，自动告诉rabbitmq）</span></span><br><span class="line">        <span class="comment">//  false表示手动ack，需要自己收到调用方法</span></span><br><span class="line">        <span class="comment">//3.回调</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;helloworld&quot;</span>,<span class="literal">false</span>,defaultConsumer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭，消费方一般不关闭，有消息过来就需要及时处理</span></span><br><span class="line">        <span class="comment">//channel.close();</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="springboot中测试">5.8.2 SpringBoot中测试</h5>
<blockquote>
<p>1.在 application.properties 中添加配置</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置手动Ack</span></span><br><span class="line">spring.rabbitmq.listener.simple.acknowledge-mode=manual</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.在之前测试的任意模式中添加 AckCustomer 演示</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者：监听队列中的消息，然后获取消息</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simpleQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AckCustomer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理消息（获取消息，进一步操作）</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message,Channel channel,Message msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AckCustomer...&quot;</span>);</span><br><span class="line">        <span class="comment">//获取消息内容</span></span><br><span class="line">        <span class="keyword">if</span>(message!=<span class="literal">null</span> &amp;&amp; message.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;获取消息：&quot;</span>+message);</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">                <span class="comment">//手动确认</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> msg.getMessageProperties().getDeliveryTag();</span><br><span class="line">                System.out.println(<span class="string">&quot;deliveryTag：&quot;</span>+deliveryTag);</span><br><span class="line">                channel.basicAck(deliveryTag,<span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//捕获所有异常</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消息处理...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//重新放入队列中</span></span><br><span class="line">                    <span class="comment">//channel.basicNack(msg.getMessageProperties().getDeliveryTag(),false,true);</span></span><br><span class="line">                    <span class="comment">//放弃消息</span></span><br><span class="line">                    channel.basicNack(msg.getMessageProperties().getDeliveryTag(),<span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//关闭</span></span><br><span class="line">                    channel.getConnection().close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有消息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注释或打开异常进行测试即可！</p>
</blockquote>
<h3 id="六事务与confirm机制">六、事务与confirm机制</h3>
<hr />
<h4 id="消息的可靠性">6.1 消息的可靠性</h4>
<blockquote>
<p>思考？</p>
<p>1.如果消息已经到达RabbitMQ，RabbitMQ宕机了，消息是不是就丢失了？</p>
<p>可以使用Queue的持久化机制</p>
<p>2.消费者在消费消息的时候，程序执行到一半，消费者宕机了怎么办？</p>
<p>可以手动Ack</p>
<p>3.生产者发送消息时，由于网络问题，导致消息没有发送到RabbitMQ怎么办？</p>
<p>RabbitMQ提供了事务操作和Confirm以及Return机制</p>
</blockquote>
<blockquote>
<p>保证消息的传递可以使用RabbitMQ中的事务，事务可以保证消息100%传递，可以通过事务的回滚去记录日志，后面定时再次发送当前消息，但是事务操作效率太低。</p>
<p>RabbitMQ中除了事务，还提供了Confirm的确认机制，这个效率比事务高很多。</p>
</blockquote>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071257525.png"
alt="1587727436898" />
<figcaption aria-hidden="true">1587727436898</figcaption>
</figure>
<h4 id="rabbitmq事务">6.2 RabbitMQ事务</h4>
<blockquote>
<p>RabbitMQ的事务是对AMQP协议的实现，通过设置<code>Channel</code>
的模式来完成，具体操作如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.txSelect();  <span class="comment">//开启事务</span></span><br><span class="line"><span class="comment">// ....本地事务操作</span></span><br><span class="line">channel.txCommit();  <span class="comment">//提交事务</span></span><br><span class="line">channel.txRollback(); <span class="comment">//回滚事务</span></span><br></pre></td></tr></table></figure>
<p><font color="red"><strong>特别说明：RabbitMQ的事务机制是同步操作，会极大的降低RabbitMQ的性能。</strong></font></p>
<h4 id="confirm机制">6.3 Confirm机制</h4>
<blockquote>
<p>由于RabbitMQ的事务性能的问题，于是就又推出了发送方确认模式。</p>
</blockquote>
<h5 id="创建工具类">6.3.1 创建工具类</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 创建连接工厂（ConnectionFactory）</span></span><br><span class="line"><span class="comment">     * 2. 创建连接 (Connection)</span></span><br><span class="line"><span class="comment">     * 3. 创建通道  (Channel)</span></span><br><span class="line"><span class="comment">     Connection conn = connectionFactory.newConnection();</span></span><br><span class="line"><span class="comment">     Channel channel = conn.createChannel();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        connectionFactory = <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.25.134&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">            ioException.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Channel channel, Connection connection)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != channel) &#123;</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != connection)&#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="单条消息确认">6.3.2 单条消息确认</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.confirmSelect(); <span class="comment">//开启发送方确认模式</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.在RabbitMq控制台页面，创建一个direct类型的交换机，再创建一个队列并绑定</p>
</blockquote>
<blockquote>
<p>channel.waitForConfirms(); //对于单条消息的确认，true表示成功</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.confirm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.utils.RabbitMQUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComfirmTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//开启confirm</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//发送消息（前提：队列已经通过routingKey绑定到该交换机上）</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;myExchange&quot;</span>,<span class="string">&quot;my&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;消息内容&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断消息到达交换机，true表示到达，若没有交换机则系统会直接报错</span></span><br><span class="line">        <span class="keyword">if</span>(channel.waitForConfirms())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息已到达交换机&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        RabbitMQUtils.close(channel,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="批量消息确认">6.3.2 批量消息确认</h5>
<blockquote>
<p>channel.waitForConfirmsOrDie();
//批量消息确认，如果有一条消息没有发送成功，会抛出异常</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.confirm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.utils.RabbitMQUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComfirmTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//开启confirm</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//发送消息（前提：队列已经通过routingKey绑定到该交换机上）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//判断</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">                <span class="comment">//前提是系统中没有名为myExchange2的交换机</span></span><br><span class="line">                channel.basicPublish(<span class="string">&quot;myExchange2&quot;</span>, <span class="string">&quot;my&quot;</span>, <span class="literal">null</span>, (<span class="string">&quot;消息内容&quot;</span>+ i).getBytes());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;myExchange&quot;</span>, <span class="string">&quot;my&quot;</span>, <span class="literal">null</span>, (<span class="string">&quot;消息内容&quot;</span>+ i).getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定批量操作是否成功</span></span><br><span class="line">        <span class="comment">//当发送的全部消息，有一个失败的时候，就直接全部失败 抛出异常</span></span><br><span class="line">        channel.waitForConfirmsOrDie();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        RabbitMQUtils.close(channel,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="回调方式确认">6.3.3 回调方式确认</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.confirm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.utils.RabbitMQUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConfirmListener;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComfirmTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//开启confirm</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息（前提：队列已经通过routingKey绑定到该交换机上）</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;myExchange&quot;</span>,<span class="string">&quot;my&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;消息内容&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启异步回调</span></span><br><span class="line">        channel.addConfirmListener(<span class="keyword">new</span> <span class="title class_">ConfirmListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAck</span><span class="params">(<span class="type">long</span> deliveryTag, <span class="type">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功达到交换机&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleNack</span><span class="params">(<span class="type">long</span> deliveryTag, <span class="type">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有到达交换机&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        RabbitMQUtils.close(channel,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="return机制">6.4 Return机制</h4>
<blockquote>
<p>Confirm只能保证消息到达exchange，无法保证消息可以被exchange分发到指定queue</p>
<p>而且exchange是不能持久化消息的，queue是可以持久化消息</p>
<p>采用Return机制来监听消息是否从exchange送到了指定的queue中</p>
</blockquote>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071258092.png"
alt="1587727436898" />
<figcaption aria-hidden="true">1587727436898</figcaption>
</figure>
<blockquote>
<p>开启Return机制，在发送消息时，需要指定mandatory为true</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.confirm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.utils.RabbitMQUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReturnTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//开启confirm</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        <span class="comment">//注意：指定mandatory参数为true，设置没有绑定的routingkey</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;myExchange&quot;</span>,<span class="string">&quot;my2&quot;</span>,<span class="literal">true</span>,<span class="literal">null</span>,<span class="string">&quot;消息内容&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启异步回调</span></span><br><span class="line">        channel.addConfirmListener(<span class="keyword">new</span> <span class="title class_">ConfirmListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAck</span><span class="params">(<span class="type">long</span> deliveryTag, <span class="type">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功达到交换机&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleNack</span><span class="params">(<span class="type">long</span> deliveryTag, <span class="type">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有到达交换机&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有到达队列的时候触发</span></span><br><span class="line">        channel.addReturnListener(<span class="keyword">new</span> <span class="title class_">ReturnListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturn</span><span class="params">(<span class="type">int</span> replyCode, String replyText, String exchange,</span></span><br><span class="line"><span class="params">                                     String routingKey, AMQP.BasicProperties properties,</span></span><br><span class="line"><span class="params">                                     <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;没有到达队列&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        RabbitMQUtils.close(channel,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="springboot实现">6.5 SpringBoot实现</h4>
<blockquote>
<p>1.在 application.properties 中添加配置</p>
</blockquote>
<blockquote>
<p>spring.rabbitmq.publisher-confirm-type 对应值的说明</p>
<ul>
<li>NONE ：禁用发布确认模式，是默认值</li>
<li>CORRELATED：发布消息成功到交换器后会触发回调方法</li>
<li>SIMPLE：两种效果</li>
</ul>
<ol type="1">
<li>和CORRELATED值一样会触发回调方法</li>
<li>在发布消息成功后使用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是waitForConfirmsOrDie方法如果返回false则会关闭channel，则接下来无法发送消息到broker</li>
</ol>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置开启Confirm和Return</span></span><br><span class="line">spring.rabbitmq.publisher-confirm-type: simple</span><br><span class="line">spring.rabbitmq.publisher-returns: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.创建配置类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ReturnedMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherConfirmAndReturnConfig</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback,RabbitTemplate.ReturnsCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="built_in">this</span>);</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;到达交换机&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有到达交换机&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returnedMessage)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;没有到达队列&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.修改生产者发送消息方法中的routingKey，然后启动测试类测试即可！</p>
</blockquote>
<h3 id="七.-死信队列">七. 死信队列</h3>
<hr />
<blockquote>
<p>死信队列并不是一个特殊的队列，只是一个普通的队列，只是我们把他们取名叫做死信队列。</p>
<p>死信队列的设计是在某个队列的头信息中设定<code>x-dead-letter-exchange</code>
(死信交换机)和<code>x-dead-letter-routing-key</code>(死信路由键)即可。关联到一个绑定到某个死信交换机的队列上。然后给该队列指定过期时间或者指定的消息的过期时间，那么该消息到期后会自动到达死信队列中。</p>
</blockquote>
<h5 id="场景">7.1 场景</h5>
<blockquote>
<p>场景一：未支付订单在规定的时间取消。实现的方式为，将订单消息放入到一个队列中，并指定其过期时间。当过期时间到了之后，就进入到了死信队列，那么可以直接在死信队列的消费端取出对应的消息即可。</p>
</blockquote>
<blockquote>
<p>场景二：某条消息在消费端曾多次尝试消费，但是均未消费成功，那么就进入死信队列，让人工干预。</p>
</blockquote>
<h5 id="测试">7.2 测试</h5>
<blockquote>
<p>提前创建RabbitMQUtils工具类并测试即可</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.dead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.utils.RabbitMQUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadQueueTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//死信交换机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">dead_letter_exchange</span> <span class="operator">=</span> <span class="string">&quot;dead_letter_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//死信路由键</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">dead_letter_routing_key</span> <span class="operator">=</span> <span class="string">&quot;dead_letter_routing_key&quot;</span>;</span><br><span class="line">    <span class="comment">//死信队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">dead_letter_queue</span> <span class="operator">=</span> <span class="string">&quot;dead_letter_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">people_exchange</span> <span class="operator">=</span> <span class="string">&quot;people_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">people_routing_key</span> <span class="operator">=</span> <span class="string">&quot;people_routing_key&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">people_queue</span> <span class="operator">=</span> <span class="string">&quot;people_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> RabbitMQUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个死信的交换机</span></span><br><span class="line">        channel.exchangeDeclare(dead_letter_exchange, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建死信队列</span></span><br><span class="line">        channel.queueDeclare(dead_letter_queue, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 将死信队列绑定到死信交换机，路由键为 &quot;dead_letter_routing_key&quot;</span></span><br><span class="line">        channel.queueBind(dead_letter_queue, dead_letter_exchange, dead_letter_routing_key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置队列参数</span></span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, dead_letter_exchange);</span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, dead_letter_routing_key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建当前交换机，队列以及路由键</span></span><br><span class="line">        channel.exchangeDeclare(people_exchange, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">//最后一个参数是当前队列的属性</span></span><br><span class="line">        channel.queueDeclare(people_queue, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, arguments);</span><br><span class="line">        channel.queueBind(people_queue, people_exchange, people_routing_key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置消息的过期时间，单位：毫秒</span></span><br><span class="line">        AMQP.<span class="type">BasicProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties.Builder()</span><br><span class="line">                .expiration(<span class="string">&quot;15000&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        channel.basicPublish(people_exchange, people_routing_key, properties, <span class="string">&quot;dead_message&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        RabbitMQUtils.close(channel, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="八.-避免消息重复消费">八. 避免消息重复消费</h3>
<hr />
<h4 id="幂等性">8.1 幂等性</h4>
<blockquote>
<p>所有的消息中间件都会存在这样一个问题，那就是消息的重复消费问题，所以我们必须做幂等性设计，所谓幂等性设计就是，一条消息无论消费多少次所产生的结果都是相同的。</p>
<p>重复消费消息，是对非幂等性操作造成问题，重复消费消息的原因是因为消费者没有给RabbitMQ一个Ack</p>
</blockquote>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071258024.png"
alt="1587727436898" />
<figcaption aria-hidden="true">1587727436898</figcaption>
</figure>
<blockquote>
<p>为了解决消息重复消费的问题，可以采用Redis，在消费者消费消息之前，现将消息的id放到Redis中，</p>
<p>id-0（正在执行业务）</p>
<p>id-1（执行业务成功）</p>
<p>如果ack失败，在RabbitMQ将消息交给其他的消费者时，先执行setnx，如果key已经存在，获取他的值，如果是0，当前消费者就什么都不做，如果是1，直接ack。</p>
<p>极端情况：第一个消费者在执行业务时，出现了死锁，在setnx的基础上，再给key设置一个生存时间。</p>
</blockquote>
<h4 id="解决方案">8.2 解决方案</h4>
<blockquote>
<p>方案一：为每条消息生成全局唯一ID，将ID和业务数据放在同一个事务中，每次消费消息之后都将ID在表中插入一条数据，每次消费之前先查询ID是否存在，如果不存在就执行对应的逻辑；如果存在则直接确认。</p>
</blockquote>
<blockquote>
<p>方案二（推荐）：利用redis+数据库的方案来实现幂等性的设计，实现的思路与redis的缓存击穿方案类似；当插入数据的时候，将唯一ID同时插入数据库，然后放入到redis中，设置过期时间，每次从redis中判断。</p>
</blockquote>
<h4 id="在springboot中测试">8.3 在springboot中测试</h4>
<h5 id="导入依赖-1">8.3.1 导入依赖</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="配置application.properties">8.3.2
配置application.properties</h5>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对于rabbitMQ的支持</span></span><br><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="string">192.168.25.140</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=<span class="string">guest</span></span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=<span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.rabbitmq.listener.simple.acknowledge-mode</span>=<span class="string">manual</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure>
<h5 id="这里以简单模式演示">8.3.3 这里以简单模式演示</h5>
<blockquote>
<p>1.编写配置类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.AmqpException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置类，创建队列</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleQueueConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">simpleQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;simpleQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建MessagePostProcessor对象，用于在生产者中把id等参数传给消费者</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessagePostProcessor <span class="title function_">correlationIdProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MessagePostProcessor</span> <span class="variable">messagePostProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message, Correlation correlation)</span> &#123;</span><br><span class="line">                <span class="type">MessageProperties</span> <span class="variable">messageProperties</span> <span class="operator">=</span> message.getMessageProperties();</span><br><span class="line">                <span class="comment">//通过Correlation对象存储id参数，Message获取id参数</span></span><br><span class="line">                <span class="keyword">if</span> (correlation <span class="keyword">instanceof</span> CorrelationData) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">correlationId</span> <span class="operator">=</span> ((CorrelationData) correlation).getId();</span><br><span class="line">                    messageProperties.setCorrelationId(correlationId);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//返回</span></span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> messagePostProcessor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.编写生产者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessagePostProcessor messagePostProcessor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>();</span><br><span class="line">        System.out.println(correlationData.getId());</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;&quot;</span>,<span class="string">&quot;simpleQueue&quot;</span>,<span class="string">&quot;简单队列&quot;</span>,messagePostProcessor,correlationData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.编写消费者</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//监听指定队列</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simpleQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AckCustomer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(String msg, Channel channel, Message message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.获取MessageId</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> message.getMessageProperties().getCorrelationId();</span><br><span class="line">        System.out.println(messageId);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(messageId, <span class="string">&quot;0&quot;</span>, <span class="number">600</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//2.设置key到Redis</span></span><br><span class="line">        <span class="keyword">if</span>(aBoolean) &#123;</span><br><span class="line">            <span class="comment">//3.消费消息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;正在处理消息....&quot;</span>);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;接收到消息：&quot; + msg);</span></span><br><span class="line">            <span class="comment">//4.设置key的value为1</span></span><br><span class="line">            <span class="comment">//redisTemplate.opsForValue().set(messageId,&quot;1&quot;,600, TimeUnit.SECONDS);</span></span><br><span class="line">            <span class="comment">//5.手动ack</span></span><br><span class="line">            <span class="comment">//channel.basicAck(message.getMessageProperties().getDeliveryTag(),false);</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断消息是否已经消费：1 -&gt; 已消费 0 -&gt; 未消费</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;0&quot;</span>.equalsIgnoreCase(redisTemplate.opsForValue().get(messageId)))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到消息：&quot;</span> + msg);</span><br><span class="line">            redisTemplate.opsForValue().set(messageId,<span class="string">&quot;1&quot;</span>,<span class="number">600</span>, TimeUnit.SECONDS);</span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取Redis中的value即可 如果是1，直接手动ack，不需要再次消费了</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equalsIgnoreCase(redisTemplate.opsForValue().get(messageId)))&#123;</span><br><span class="line">                channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.测试类测试即可</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.simple.SimpleProducer;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot14RabbitmqApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpleProducer simpleProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        simpleProducer.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试成功后，到redis中查看即可！</p>
</blockquote>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro</title>
    <url>/Shiro/</url>
    <content><![CDATA[<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249775.png" /></p>
<p>[TOC]</p>
<h3 id="一rbac介绍">一、RBAC介绍</h3>
<hr />
<h4 id="rbac简介">1.1 RBAC简介</h4>
<blockquote>
<p>RBAC是基于角色的访问控制（Role-Based Access Control ）在 RBAC
中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。这样管理都是层级相互依赖的，权限赋予给角色，而把角色又赋予用户，这样的权限设计很清楚，管理起来很方便。</p>
</blockquote>
<blockquote>
<p>在RBAC模型里面，有3个基础组成部分，分别是：用户、角色和权限。</p>
<p>RBAC通过定义角色的权限，并对用户授予某个角色从而来控制用户的权限，实现了用户和权限的逻辑分离，极大地方便了权限的管理，在讲解之前，先介绍一些名词：
<span id="more"></span></p>
<p>User（用户）：每个用户都有唯一的UID识别，并被授予不同的角色</p>
<p>Role（角色）：不同角色具有不同的权限</p>
<p>Permission（权限）：访问权限</p>
<p>用户-角色映射：用户和角色之间的映射关系</p>
<p>角色-权限映射：角色和权限之间的映射</p>
</blockquote>
<h4 id="权限管理">1.2 权限管理</h4>
<blockquote>
<p>只要有用户参与的系统一般都要有权限管理，权限管理实现对用户访问系统的控制，按照安全规则或者<a
href="http://baike.baidu.com/view/160028.htm_blank">安全策略</a>控制用户可以访问而且只能访问自己被授权的资源。</p>
<p>权限管理包括用户认证和授权两部分。</p>
</blockquote>
<h3 id="二-用户认证">二、 用户认证</h3>
<blockquote>
<p>用户认证，用户去访问系统，系统要验证用户身份的合法性。最常用的用户身份验证的方法：</p>
<p>1、用户名密码方式、2、指纹打卡机、3、基于证书验证方法。。系统验证用户身份合法，用户方可访问系统的资源。</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249502.png" /></p>
<blockquote>
<p>关键对象：</p>
<p>subject：主体，理解为用户,可能是程序，都要去访问系统的资源，系统需要对subject进行身份认证。</p>
<p>principal：身份信息，通常是唯一的，一个主体还有多个身份信息，但是都有一个主身份信息（primary
principal）</p>
<p>credential：凭证信息，可以是密码 、证书、指纹。</p>
<p>总结：主体在进行身份认证时需要提供身份信息和凭证信息。</p>
</blockquote>
<h3 id="三用户授权">三、用户授权</h3>
<hr />
<blockquote>
<p>用户授权，简单理解为访问控制，在用户认证通过后，系统对用户访问资源进行控制，用户具有资源的访问权限方可访问。</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249558.png" /></p>
<blockquote>
<p>关键对象</p>
<p>授权的过程理解为：who对what(which)进行how操作。</p>
<p>who：主体即subject，subject在认证通过后系统进行访问控制。</p>
<p>what(which)：资源(Resource)，subject必须具备资源的访问权限才可访问该
资源。资源比如：系统用户列表页面、商品修改菜单、商品id为001的商品信息。</p>
<p>资源分为资源类型和资源实例：</p>
<p>系统的用户信息就是资源类型，相当于java类。</p>
<p>系统中id为001的用户就是资源实例，相当于new的java对象。</p>
<p>how：权限/许可(permission)
，针对资源的权限或许可，subject具有permission访问资源，如何访问/操作需要定义permission，权限比如：用户添加、用户修改、商品删除。</p>
</blockquote>
<h3 id="四权限模型">四、权限模型</h3>
<hr />
<blockquote>
<p>主体（账号、密码）</p>
<p>角色（角色名称）</p>
<p>权限（权限名称、资源id）</p>
<p>主体和角色关系（主体id、角色id）</p>
<p>角色和权限关系（角色id、权限id）</p>
<p>资源（资源名称、访问地址）</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249586.png" /></p>
<blockquote>
<p>通常企业开发中将资源和权限表合并为一张权限表，如下：</p>
<p>资源（资源名称、访问地址）</p>
<p>权限（权限名称、资源id）</p>
<p>合并为：权限（权限名称、资源名称、资源访问地址）</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249079.png" /></p>
<blockquote>
<p>上图常被称为权限管理的通用模型，不过企业在开发中根据系统自身的特点还会对上图进行修改，但是用户、角色、权限、用户角色关系、角色权限关系是需要去理解的。</p>
</blockquote>
<blockquote>
<p>分配权限：用户需要分配相应的权限才可访问相应的资源。权限是对于资源的操作许可，通常给用户分配资源权限需要将权限信息持久化，比如存储在关系数据库中，把用户信息、权限管理、用户分配的权限信息写到数据库（权限数据模型）。</p>
</blockquote>
<h3 id="五shiro介绍">五、Shiro介绍</h3>
<hr />
<blockquote>
<p>shiro是apache的一个开源框架，是一个权限管理的框架，实现
用户认证、用户授权，功能强大、且
简单、灵活，且不跟任何的框架或者容器绑定，可以独立运行。</p>
<p>spring中有spring security
(原名Acegi)，是一个权限框架，使用起来很方便，和spring依赖过于紧密。</p>
</blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249240.png" /></p>
<blockquote>
<p>subject：主体，可以是用户也可以是程序，主体要访问系统，系统需要对主体进行认证、授权。</p>
<p>securityManager：安全管理器，主体进行认证和授权都是通过securityManager进行。</p>
<p>authenticator：认证器，主体进行认证最终通过authenticator进行的。</p>
<p>authorizer：授权器，主体进行授权最终通过authorizer进行的。</p>
<p>sessionManager：web应用中一般是用web容器对session进行管理，shiro也提供一套session管理的方式。</p>
<p>SessionDao：通过SessionDao管理session数据，针对个性化的session数据存储需要使用sessionDao。</p>
<p>cache
Manager：缓存管理器，主要对session和授权数据进行缓存，比如将授权数据通过cacheManager进行缓存管理，和ehcache整合对缓存数据进行管理。</p>
<p>realm：域，领域，相当于数据源，通过realm存取认证、授权相关数据。</p>
<p>注：在realm中存储授权和认证的逻辑。</p>
<p>cryptography：密码管理，提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。</p>
<p>比如：md5信息摘要算法。</p>
</blockquote>
<h3 id="六认证流程">六、认证流程</h3>
<hr />
<h4 id="section"><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249741.png" /></h4>
<h4 id="创建maven工程并导入依赖">6.1 创建Maven工程并导入依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 后期整合springboot工程时会产生接口冲突问题 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;1.8.0&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure>
<h4
id="在resources目录下创建shiro.ini文件ieda需要安装.ini并重启方可生效">6.2
在resources目录下创建shiro.ini文件，IEDA需要安装*.ini并重启方可生效</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对用户的配置</span></span><br><span class="line">[<span class="built_in">users</span>]</span><br><span class="line"><span class="comment">#对用户的用户名和密码的配置</span></span><br><span class="line">jack=123</span><br><span class="line">tom=456</span><br></pre></td></tr></table></figure>
<h4 id="创建认证测试类">6.3 创建认证测试类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.authentication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户登陆和退出</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLoginAndLogout</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建securityManager工厂，通过ini配置文件创建securityManager工厂</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(</span><br><span class="line">                <span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建SecurityManager</span></span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将securityManager设置当前的运行环境中</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从SecurityUtils里边创建一个subject</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在认证提交前准备token（令牌）</span></span><br><span class="line">        <span class="comment">// 这里的账号和密码 将来是由用户输入进去</span></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行认证提交</span></span><br><span class="line">        subject.login(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否认证通过</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAuthenticated</span> <span class="operator">=</span> subject.isAuthenticated();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是否认证通过：&quot;</span> + isAuthenticated);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 退出操作</span></span><br><span class="line">        subject.logout();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否认证通过</span></span><br><span class="line">        isAuthenticated = subject.isAuthenticated();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是否认证通过：&quot;</span> + isAuthenticated);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="执行流程">6.4 执行流程</h4>
<blockquote>
<p>1、通过ini配置文件创建securityManager</p>
<p>2、调用subject.login方法主体提交认证，提交的token</p>
<p>3、securityManager进行认证，securityManager最终由ModularRealmAuthenticator进行认证。</p>
<p>4、ModularRealmAuthenticator调用IniRealm(给realm传入token)
去ini配置文件中查询用户信息</p>
<p>5、IniRealm根据输入的token（UsernamePasswordToken）从
shiro.ini查询用户信息，根据账号查询用户信息 （账号和密码）</p>
<p>​
如果查询到用户信息，就给ModularRealmAuthenticator返回用户信息（账号和密码）</p>
<p>​ 如果查询不到，就给ModularRealmAuthenticator返回null</p>
<p>6、ModularRealmAuthenticator接收IniRealm返回Authentication认证信息</p>
<p>​ 如果返回的认证信息是null，ModularRealmAuthenticator抛出异常</p>
<p>（org.apache.shiro.authc.UnknownAccountException）</p>
<p>​
如果返回的认证信息不是null（说明inirealm找到了用户），对IniRealm返回用户密码
（在ini文件中存在）</p>
<p>​ 和 token中的密码 进行对比，如果不一致抛出异常</p>
<p>（org.apache.shiro.authc.IncorrectCredentialsException）</p>
</blockquote>
<h4 id="总结">6.5 总结</h4>
<blockquote>
<p>ModularRealmAuthenticator作用是进行认证，需要调用realm来查询用户信息（在数据库中存在用户信息）并且进行密码对比（认证过程）</p>
<p>realm：需要根据token中的身份信息去查询数据库（入门程序使用ini配置文件），如果查到用户返回认证信息，如果查询不到返回null</p>
</blockquote>
<h3 id="七使用realm认证">七、使用realm认证</h3>
<hr />
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071249769.png" /></p>
<h4 id="创建自定义realm">7.1 创建自定义realm</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">realmDemo</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">realmName</span>  <span class="operator">=</span> <span class="string">&quot;realmDemo&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken </span></span><br><span class="line"><span class="params">authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">		<span class="comment">//从token中取出用户信息</span></span><br><span class="line">        <span class="comment">//用户名，身份信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String)authenticationToken.getPrincipal();</span><br><span class="line">        System.out.println(principal);</span><br><span class="line">        <span class="comment">//密码，凭证</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">credentials</span> <span class="operator">=</span> authenticationToken.getCredentials();</span><br><span class="line">		<span class="comment">//类型转化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>((<span class="type">char</span>[]) credentials);</span><br><span class="line">        System.out.println(password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;jack&quot;</span>.equals(principal) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(password))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">SimpleAuthenticationInfo</span> <span class="variable">simpleAuthenticationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(principal,password,realmName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="在resource目录下创建shiro-realm.ini注意realm路径别配置错了">7.2
在resource目录下创建shiro-realm.ini（注意：realm路径别配置错了）</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line"><span class="comment">#自定义realm</span></span><br><span class="line">realmDemo=com.qf.realm.realmDemo</span><br><span class="line"><span class="comment">#将realm设置到securityManager</span></span><br><span class="line">securityManager.realms=<span class="variable">$realmDemo</span></span><br></pre></td></tr></table></figure>
<h4 id="在authenticationdemo类中添加方法进行测试">7.3
在AuthenticationDemo类中添加方法进行测试</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义realm</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRealmDemo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建securityManager工厂，通过ini配置文件创建securityManager工厂</span></span><br><span class="line">    Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(</span><br><span class="line">            <span class="string">&quot;classpath:shiro-realm.ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SecurityManager</span></span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将securityManager设置当前的运行环境中</span></span><br><span class="line">    SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从SecurityUtils里边创建一个subject</span></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在认证提交前准备token（令牌）</span></span><br><span class="line">    <span class="comment">// 这里的账号和密码 将来是由用户输入进去</span></span><br><span class="line">    <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行认证提交</span></span><br><span class="line">        subject.login(token);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否认证通过</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isAuthenticated</span> <span class="operator">=</span> subject.isAuthenticated();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;是否认证通过：&quot;</span> + isAuthenticated);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>访问controller测试即可</p>
</blockquote>
<h3 id="八md5加密">八、MD5加密</h3>
<hr />
<blockquote>
<p>通常需要对密码 进行散列，常用的有MD5、SHA，</p>
<p>对MD5密码，如果知道散列后的值可以通过穷举算法，得到md5密码对应的明文（指加密前的密码）。</p>
<p>建议对MD5进行散列时加salt（盐），进行加密相当于对原始密码+盐进行散列。</p>
<p>正常使用时散列方法：</p>
<p>在程序中对原始密码+盐进行散列，将散列值存储到数据库中，并且还要将盐也要存储在数据库中。</p>
<p>如果进行密码对比时，使用相同方法，将原始密码+盐进行散列，进行比对。</p>
</blockquote>
<h4 id="创建md5demo测试类进行测试">8.1.创建MD5Demo测试类，进行测试</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MD5Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 原始 密码</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">		<span class="comment">// 盐</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">		<span class="comment">// 散列次数</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">hashIterations</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">		<span class="comment">// 上边散列1次：7bc6c31880aeda581aa34e218af25753</span></span><br><span class="line">		<span class="comment">// 上边散列2次：6585096f3f6735025449cfb351c8cff9</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 第一种方式</span></span><br><span class="line">		<span class="comment">// 构造方法中：</span></span><br><span class="line">		<span class="comment">// 第一个参数：明文，原始密码</span></span><br><span class="line">		<span class="comment">// 第二个参数：盐，通过使用随机数</span></span><br><span class="line">		<span class="comment">// 第三个参数：散列的次数，比如散列两次，相当 于md5(md5(&#x27;&#x27;))</span></span><br><span class="line">		<span class="type">Md5Hash</span> <span class="variable">md5Hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(password, salt, hashIterations);</span><br><span class="line"></span><br><span class="line">		<span class="type">String</span> <span class="variable">password_md5</span> <span class="operator">=</span> md5Hash.toString();</span><br><span class="line">		System.out.println(password_md5);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 第二种方式</span></span><br><span class="line">		<span class="comment">// 第一个参数：散列算法</span></span><br><span class="line">		<span class="type">SimpleHash</span> <span class="variable">simpleHash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleHash</span>(<span class="string">&quot;md5&quot;</span>, password, salt,</span><br><span class="line">				hashIterations);</span><br><span class="line">		System.out.println(simpleHash.toString());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4
id="在authenticationdemo类中添加方法进行测试-1">8.2在AuthenticationDemo类中添加方法进行测试</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试MD5</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMD5</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建securityManager工厂，通过ini配置文件创建securityManager工厂</span></span><br><span class="line">    Factory&lt;SecurityManager&gt; factory =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro-realm-md5.ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建SecurityManager</span></span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将securityManager设置当前的运行环境中</span></span><br><span class="line">    SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从SecurityUtils里边创建一个subject</span></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在认证提交前准备token（令牌）</span></span><br><span class="line">    <span class="comment">// 这里的账号和密码 将来是由用户输入进去</span></span><br><span class="line">    <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行认证提交</span></span><br><span class="line">        subject.login(token);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否认证通过</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isAuthenticated</span> <span class="operator">=</span> subject.isAuthenticated();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;是否认证通过：&quot;</span> + isAuthenticated);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建shiro-realm-md5.ini">8.3创建shiro-realm-md5.ini</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line"><span class="comment">#自定义realm</span></span><br><span class="line">realmDemo=com.qf.realm.realmDemoMD5</span><br><span class="line"><span class="comment">#将realm设置到securityManager</span></span><br><span class="line">securityManager.realms=<span class="variable">$realmDemo</span></span><br></pre></td></tr></table></figure>
<h4 id="创建realmmd5">8.4创建realmMD5</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">realmDemoMD5</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">realmName</span>  <span class="operator">=</span> <span class="string">&quot;realmDemoMD5&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String)authenticationToken.getPrincipal();</span><br><span class="line">        <span class="comment">//System.out.println(principal);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">credentials</span> <span class="operator">=</span> authenticationToken.getCredentials();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>((<span class="type">char</span>[]) credentials);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Md5Hash</span> <span class="variable">md5Hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(password, <span class="string">&quot;abcde&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password_md5</span> <span class="operator">=</span> md5Hash.toString();</span><br><span class="line">        System.out.println(password_md5);</span><br><span class="line">        <span class="comment">//从数据库查出来的密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dbpassword</span> <span class="operator">=</span> <span class="string">&quot;6585096f3f6735025449cfb351c8cff9&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;jack&quot;</span>.equals(principal) &amp;&amp;password_md5.equals(dbpassword))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">SimpleAuthenticationInfo</span> </span><br><span class="line"><span class="variable">simpleAuthenticationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(principal,password,realmName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="九授权流程">九、授权流程</h3>
<hr />
<p><img
src="https://cdn.jsdelivr.net/gh/CoutureOne/blogimg@main/img/202211071250363.png" /></p>
<h4
id="创建shiro-permission.inishiro-permission.ini里边的内容相当于在数据库">9.1创建shiro-permission.ini（shiro-permission.ini里边的内容相当于在数据库）</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户</span></span><br><span class="line">[<span class="built_in">users</span>]</span><br><span class="line"><span class="comment">#用户jack的密码是123，此用户具有role1和role2两个角色</span></span><br><span class="line">jack=123,role1,role2</span><br><span class="line">tom=456,role2</span><br><span class="line"></span><br><span class="line"><span class="comment">#权限</span></span><br><span class="line">[roles]</span><br><span class="line"><span class="comment">#角色role1对资源user拥有create、update权限</span></span><br><span class="line">role1=user:create,user:update</span><br><span class="line"><span class="comment">#角色role2对资源user拥有create、delete权限</span></span><br><span class="line">role2=user:create,user:delete</span><br><span class="line"><span class="comment">#角色role3对资源user拥有query权限</span></span><br><span class="line">role3=user:query</span><br></pre></td></tr></table></figure>
<h4 id="创建authorizationdemo">9.2创建AuthorizationDemo</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 角色授权、资源授权测试</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAuthorization</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建SecurityManager工厂</span></span><br><span class="line">		Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(</span><br><span class="line">				<span class="string">&quot;classpath:shiro-permission.ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建SecurityManager</span></span><br><span class="line">		<span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将SecurityManager设置到系统运行环境，将SecurityManager配置spring容器中，一般单例管理</span></span><br><span class="line">		SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建subject</span></span><br><span class="line">		<span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建token令牌</span></span><br><span class="line">		<span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//认证</span></span><br><span class="line">        subject.login(token);</span><br><span class="line">        <span class="comment">//是否认证成功</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">authenticated</span> <span class="operator">=</span> subject.isAuthenticated();</span><br><span class="line">        System.out.println(<span class="string">&quot;是否认证成功：&quot;</span>+authenticated);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//--------认证通过之后进行授权----------</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//基于角色的授权 </span></span><br><span class="line">        <span class="comment">//单个角色判断</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">role1</span> <span class="operator">=</span> subject.hasRole(<span class="string">&quot;role1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;role1：&quot;</span>+role1);</span><br><span class="line">        <span class="comment">//多个角色判断</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allRoles</span> <span class="operator">=</span> subject.hasAllRoles(Arrays.asList(<span class="string">&quot;role1&quot;</span>, <span class="string">&quot;role2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;role1 + role2：&quot;</span>+allRoles);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//subject.checkRole(&quot;role3&quot;);//检查是否有当前角色</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//基于资源的授权</span></span><br><span class="line">        <span class="comment">//单个权限判断</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">permitted</span> <span class="operator">=</span> subject.isPermitted(<span class="string">&quot;user:create&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user:create：&quot;</span>+permitted);</span><br><span class="line">        <span class="comment">//多个权限判断</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">permittedAll</span> <span class="operator">=</span> subject.isPermittedAll(<span class="string">&quot;user:create&quot;</span>, <span class="string">&quot;user:update&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user:create + user:update：&quot;</span>+permittedAll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//subject.checkPermissions(&quot;user:query&quot;, &quot;user:add&quot;);</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="十使用realm授权">十、使用realm授权</h3>
<hr />
<blockquote>
<p>需求</p>
<p>上边的程序通过shiro-permission.ini对权限信息进行静态配置，实际开发中从数据库中获取权限数据。就需要自定义realm，由realm从数据库查询权限数据，realm会根据用户身份查询权限数据，将权限数据返回给authorizer（授权器）。</p>
</blockquote>
<h4
id="修改之前realmdemo.java中的dogetauthorizationinfo方法">10.1修改之前realmDemo.java中的doGetAuthorizationInfo方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//授权</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 principals获取主身份信息</span></span><br><span class="line">    <span class="comment">// 将getPrimaryPrincipal方法返回值转为真实身份类型（在上边的doGetAuthenticationInfo认证通过填充到SimpleAuthenticationInfo中身份类型）</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">primaryPrincipal</span> <span class="operator">=</span> (String)principalCollection.getPrimaryPrincipal();</span><br><span class="line">    System.out.println(<span class="string">&quot;primaryPrincipal：&quot;</span>+primaryPrincipal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据身份信息获取权限信息</span></span><br><span class="line">    <span class="comment">// 连接数据库...</span></span><br><span class="line">    <span class="comment">// 模拟从数据库获取到数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//把数据库中查到的角色放进集合中</span></span><br><span class="line">    ArrayList&lt;String&gt; roles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    roles.add(<span class="string">&quot;role1&quot;</span>);</span><br><span class="line">    roles.add(<span class="string">&quot;role2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把数据库中查到的资源放进集合中</span></span><br><span class="line">    HashSet&lt;String&gt; permissions = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    permissions.add(<span class="string">&quot;user:add&quot;</span>);</span><br><span class="line">    permissions.add(<span class="string">&quot;user:update&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查到权限数据，返回授权信息（包括以上的角色或者资源）</span></span><br><span class="line">    <span class="type">SimpleAuthorizationInfo</span> <span class="variable">simpleAuthorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">    <span class="comment">//通过角色授权</span></span><br><span class="line">    <span class="comment">//simpleAuthorizationInfo.addRoles(roles);</span></span><br><span class="line">    <span class="comment">//通过资源授权</span></span><br><span class="line">    simpleAuthorizationInfo.addStringPermissions(permissions);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4
id="创建shiro-realm.ini文件配置自定义的realm将realm设置到securitymanager中因为之前已经配置过该步骤可以省略">10.2创建shiro-realm.ini文件，配置自定义的realm，将realm设置到securityManager中，因为之前已经配置过，该步骤可以省略</h4>
<h4
id="在authorizationdemo中添加方法进行测试">10.3在AuthorizationDemo中添加方法进行测试</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//授权</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAuthorization</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备环境</span></span><br><span class="line">    <span class="type">IniSecurityManagerFactory</span> <span class="variable">iniSecurityManagerFactory</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro-realm.ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> iniSecurityManagerFactory.getInstance();</span><br><span class="line"></span><br><span class="line">    SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">    <span class="comment">//获取主体</span></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">    <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    subject.login(token);</span><br><span class="line">    <span class="comment">//是否认证成功</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">authenticated</span> <span class="operator">=</span> subject.isAuthenticated();</span><br><span class="line">    System.out.println(<span class="string">&quot;是否认证成功：&quot;</span>+authenticated);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------认证通过之后进行授权----------</span></span><br><span class="line">    <span class="comment">//单个角色判断</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">role1</span> <span class="operator">=</span> subject.hasRole(<span class="string">&quot;role1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;role1：&quot;</span>+role1);</span><br><span class="line">    <span class="comment">//多个角色判断</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">allRoles</span> <span class="operator">=</span> subject.hasAllRoles(Arrays.asList(<span class="string">&quot;role1&quot;</span>, <span class="string">&quot;role2&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;role1 + role2：&quot;</span>+allRoles);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//subject.checkRole(&quot;role3&quot;);//检查是否有当前角色</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------判断权限--------</span></span><br><span class="line">    <span class="comment">//单个权限判断</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">permitted</span> <span class="operator">=</span> subject.isPermitted(<span class="string">&quot;user:create&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user:create：&quot;</span>+permitted);</span><br><span class="line">    <span class="comment">//多个权限判断</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">permittedAll</span> <span class="operator">=</span> subject.isPermittedAll(<span class="string">&quot;user:create&quot;</span>, <span class="string">&quot;user:update&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user:create + user:update：&quot;</span>+permittedAll);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//subject.checkPermissions(&quot;user:query&quot;, &quot;user:add&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="授权流程">10.4 授权流程</h4>
<blockquote>
<p>1、对subject进行授权，调用方法isPermitted（"permission串"）
2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权
3、ModularRealmAuthorizer执行realm（自定义的Realm）从数据库查询权限数据，调用realm的doGetAuthorizationInfo授权方法
4、realm从数据库查询权限数据，返回ModularRealmAuthorizer
5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对
6、如果比对后，isPermitted中"permission串"在realm查询到权限数据中，说明用户访问permission串有权限，否则
没有权限，抛出异常。</p>
</blockquote>
<h3 id="十一springboot整合shiro">十一、SpringBoot整合Shiro</h3>
<hr />
<h4 id="导入依赖">11.1导入依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="配置application.yml">11.2配置application.yml</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">session:</span></span><br><span class="line">      <span class="comment">#去除访问路径后携带sessionid</span></span><br><span class="line">      <span class="attr">tracking-modes:</span> <span class="string">cookie</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shiro?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment">#驼峰形式</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="编写shirorealm">11.3编写ShiroRealm</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="编写shiroconfig">11.4编写ShiroConfig</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> at.pollux.thymeleaf.shiro.dialect.ShiroDialect;</span><br><span class="line"><span class="keyword">import</span> com.qf.realm.ShiroRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.CookieRememberMeManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.servlet.SimpleCookie;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ShiroRealm <span class="title function_">getShiroRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//安全管理对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityManager <span class="title function_">getSecurityManager</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(getShiroRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Shiro过滤器配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="comment">//创建Shiro工厂对象</span></span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//未认证访问页面</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        <span class="comment">//认证成功跳转页面（一般不设置，默认登录成功跳转当前页面）</span></span><br><span class="line">        <span class="comment">//shiroFilterFactoryBean.setSuccessUrl(&quot;/index&quot;);</span></span><br><span class="line">        <span class="comment">//未授权访问页面</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/refuse&quot;</span>);</span><br><span class="line">        <span class="comment">//通过map配置访问流程（顺序很重要）</span></span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//配置静态资源</span></span><br><span class="line">        map.put(<span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/jquery/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/layui/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="comment">//配置login页面</span></span><br><span class="line">        map.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="comment">//配置logout退出</span></span><br><span class="line">        <span class="comment">//map.put(&quot;/logout&quot;,&quot;logout&quot;);</span></span><br><span class="line">        <span class="comment">//配置授权</span></span><br><span class="line">        <span class="comment">//map.put(&quot;/delete&quot;,&quot;perms[user:delete]&quot;);</span></span><br><span class="line">        <span class="comment">//map.put(&quot;/select&quot;,&quot;perms[user:select]&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//user设置记住我（二次登录不做认证操作）</span></span><br><span class="line">        <span class="comment">//map.put(&quot;/index&quot;,&quot;user&quot;);</span></span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;/**&quot;</span>,<span class="string">&quot;authc&quot;</span>);<span class="comment">//该路径认证后才能访问</span></span><br><span class="line">        <span class="comment">//map.put(&quot;/**&quot;,&quot;anon&quot;);//所有路径都可以匿名访问</span></span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 85%" />
</colgroup>
<thead>
<tr class="header">
<th>过滤器简称</th>
<th>对应的java类</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>anon</td>
<td>org.apache.shiro.web.filter.authc.AnonymousFilter</td>
</tr>
<tr class="even">
<td>authc</td>
<td>org.apache.shiro.web.filter.authc.FormAuthenticationFilter</td>
</tr>
<tr class="odd">
<td>authcBasic</td>
<td>org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</td>
</tr>
<tr class="even">
<td>perms</td>
<td>org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</td>
</tr>
<tr class="odd">
<td>port</td>
<td>org.apache.shiro.web.filter.authz.PortFilter</td>
</tr>
<tr class="even">
<td>rest</td>
<td>org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</td>
</tr>
<tr class="odd">
<td>roles</td>
<td>org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</td>
</tr>
<tr class="even">
<td>ssl</td>
<td>org.apache.shiro.web.filter.authz.SslFilter</td>
</tr>
<tr class="odd">
<td>user</td>
<td>org.apache.shiro.web.filter.authc.UserFilter</td>
</tr>
<tr class="even">
<td>logout</td>
<td>org.apache.shiro.web.filter.authc.LogoutFilter</td>
</tr>
</tbody>
</table>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">anon：admins<span class="comment">/**=anon 没有参数，表示可以匿名使用。</span></span><br><span class="line"><span class="comment">authc：/admins/user/**=authc表示需要认证(登录)才能使用，FormAuthenticationFilter是表单认证，没有参数 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">roles：/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles[&quot;admin,guest&quot;],每个参数通过才算通过，相当于hasAllRoles()方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">perms：/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如/admins/user/**=perms[&quot;user:add:*,user:modify:*&quot;]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rest：/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">port：/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal：//serverName:8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ssl：/admins/user/**=ssl没有参数，表示安全的url请求，协议为https</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">user：/admins/user/**=user没有参数表示必须存在用户, 身份认证通过或通过记住我认证通过的可以访问，当登入操作时不做检查</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>anon，authcBasic，authc，user是认证过滤器</p>
<p>perms，roles，ssl，rest，port是授权过滤器</p>
</blockquote>
<h4 id="创建controller">11.5创建controller</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;toLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toLgoin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;toLogin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;refuse&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">refuse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;refuse&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/refuse&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;select&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">select</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/select&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/delete&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(&quot;logout&quot;)</span></span><br><span class="line"><span class="comment">//    public String logout()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;logout&quot;);</span></span><br><span class="line"><span class="comment">//        Subject subject = SecurityUtils.getSubject();</span></span><br><span class="line"><span class="comment">//        subject.logout();</span></span><br><span class="line"><span class="comment">//        return &quot;/login&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>启动工程，进行测试</p>
</blockquote>
<h4
id="编写对应的login.html页面以及其他页面">11.6编写对应的login.html页面（以及其他页面）</h4>
<blockquote>
<p>login.html</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>refuse.html</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>拒绝访问！！！<span class="tag">&lt;/<span class="name">font</span>&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>index.html</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>主页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;select&quot;</span>&gt;</span>查询用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>删除用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;update&quot;</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>add.html</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>select.html</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>查询用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>delete.html</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>删除用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4
id="实现用户认证修改usercontroller中的login方法">11.7实现用户认证，修改UserController中的login方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;login&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">    <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line"></span><br><span class="line">    subject.login(token);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">authenticated</span> <span class="operator">=</span> subject.isAuthenticated();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(authenticated)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4
id="修改shirorealm中的authenticationinfo方法">11.8修改ShiroRealm中的AuthenticationInfo方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//身份信息，用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String)token.getPrincipal();</span><br><span class="line">        System.out.println(principal);</span><br><span class="line">        <span class="comment">//凭证信息，密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">credentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>((<span class="type">char</span>[])token.getCredentials());</span><br><span class="line">        System.out.println(credentials);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;jack&quot;</span>.equals(principal) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(credentials))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(principal,credentials,<span class="string">&quot;ShiroRealm&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>访问路径进行测试即可！</p>
</blockquote>
<h4
id="实现用户授权在shiroconfig中的shirofilter方法中添加被授权的信息">11.9实现用户授权，在ShiroConfig中的shiroFilter方法中添加被授权的信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置授权</span></span><br><span class="line">map.put(<span class="string">&quot;/delete&quot;</span>,<span class="string">&quot;perms[user:delete]&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/select&quot;</span>,<span class="string">&quot;perms[user:select]&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置之后重启项目，访问该资源路径时则无法访问，此时需要配置授权信息</p>
</blockquote>
<h4
id="修改shirorealm中的dogetauthorizationinfo方法">11.10修改ShiroRealm中的doGetAuthorizationInfo方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleAuthorizationInfo</span> <span class="variable">simpleAuthorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line"></span><br><span class="line">    HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    set.add(<span class="string">&quot;user:select&quot;</span>);</span><br><span class="line">    set.add(<span class="string">&quot;user:update&quot;</span>);</span><br><span class="line"></span><br><span class="line">    simpleAuthorizationInfo.addStringPermissions(set);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后重启项目，再次访问相应授权路径页面</p>
</blockquote>
<h4 id="shiro整合thymleaf标签">11.11Shiro整合thymleaf标签</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="在shiroconfig中添加该方法">11.12在ShiroConfig中添加该方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroDialect <span class="title function_">getShiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改index.html页面中测试">11.13修改index.html页面中测试</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>主页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;select&quot;</span>&gt;</span>查询用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:delete&quot;</span>&gt;</span>删除用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;update&quot;</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>启动工程，再次进行测试即可</p>
</blockquote>
<h4
id="实现用户退出两种方式在相关index.html页面中添加超链接">11.14实现用户退出（两种方式），在相关index.html页面中添加超链接</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4
id="在shiroconfig中的shirofilter方法中添加退出配置第一种">11.15在ShiroConfig中的shiroFilter方法中添加退出配置（第一种）</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置退出</span></span><br><span class="line">map.put(<span class="string">&quot;/logout&quot;</span>,<span class="string">&quot;logout&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4
id="在usercontroller中添加logout方法第二种">11.16在UserController中添加logout方法（第二种）</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;logout&quot;</span>);</span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">    subject.logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4
id="记住我rememberme在login.html页面中添加记住我">11.17记住我rememberMe，在login.html页面中添加记住我</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rememberMe&quot;</span>&gt;</span>记住我<span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4
id="在usercontroller中的login方法配置rememberme参数">11.18在UserController中的login方法配置rememberMe参数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password,<span class="type">boolean</span> rememberMe)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;login&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">    <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password,rememberMe);</span><br><span class="line"></span><br><span class="line">    subject.login(token);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">authenticated</span> <span class="operator">=</span> subject.isAuthenticated();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(authenticated)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4
id="在shiroconfig类中添加相关方法以及代码">11.19在ShiroConfig类中添加相关方法以及代码</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> at.pollux.thymeleaf.shiro.dialect.ShiroDialect;</span><br><span class="line"><span class="keyword">import</span> com.qf.realm.ShiroRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.CookieRememberMeManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.servlet.SimpleCookie;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CookieRememberMeManager <span class="title function_">getCookieRememberMeManager</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleCookie</span> <span class="variable">simpleCookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(<span class="string">&quot;renemberMe&quot;</span>);</span><br><span class="line">        simpleCookie.setMaxAge(<span class="number">3600</span>*<span class="number">24</span>*<span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CookieRememberMeManager</span> <span class="variable">cookieRememberMeManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CookieRememberMeManager</span>();</span><br><span class="line">        cookieRememberMeManager.setCookie(simpleCookie);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cookieRememberMeManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ShiroRealm <span class="title function_">getShiroRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityManager <span class="title function_">getSecurityManager</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(getShiroRealm());</span><br><span class="line">        securityManager.setRememberMeManager(getCookieRememberMeManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置ShiroDialect</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">getShiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shiro过滤器配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//未认证访问页面</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        <span class="comment">//认证成功跳转页面（一般不设置，默认登录成功跳转当前页面）</span></span><br><span class="line">        <span class="comment">//shiroFilterFactoryBean.setSuccessUrl(&quot;/index&quot;);</span></span><br><span class="line">        <span class="comment">//未授权访问页面</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/refuse&quot;</span>);</span><br><span class="line">        <span class="comment">//通过map配置访问流程（顺序很重要）</span></span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//配置静态资源</span></span><br><span class="line">        map.put(<span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/jquery/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/layui/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="comment">//配置login页面</span></span><br><span class="line">        map.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="comment">//配置logout退出</span></span><br><span class="line">        map.put(<span class="string">&quot;/logout&quot;</span>,<span class="string">&quot;logout&quot;</span>);</span><br><span class="line">        <span class="comment">//配置授权</span></span><br><span class="line">        map.put(<span class="string">&quot;/delete&quot;</span>,<span class="string">&quot;perms[user:delete]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/select&quot;</span>,<span class="string">&quot;perms[user:select]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//user设置记住我（二次登录不做认证操作）</span></span><br><span class="line">        map.put(<span class="string">&quot;/index&quot;</span>,<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;/**&quot;</span>,<span class="string">&quot;authc&quot;</span>);<span class="comment">//该路径认证后才能访问</span></span><br><span class="line">        <span class="comment">//map.put(&quot;/**&quot;,&quot;anon&quot;);//所有路径都可以匿名访问</span></span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>ps:</code>登录页面勾选 记住我 进行测试</p>
</blockquote>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础操作（二）</title>
    <url>/Docker%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="docker基础操作和配置">Docker基础操作和配置</h2>
<p>配置阿里云Docker Yum源</p>
<p>shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum install -y yum-utils device-mapper-persistent-data lvm2 git</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>
<p>安装指定版本</p>
<p>shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  查看Docker版本：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum list docker-ce --showduplicates</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>安装较旧版本（比如Docker 17.03.2) ： FROM：指定基础镜像
MAINTAINER：作者的信息 RUN：执行什么命令 EXPOSE：容器对外暴露的端口
WORKDIR：进入到容器后进入到哪个目录 ENV：配置环境变量
ADD：将文件拷贝到镜像中并解压 COPY：将文件拷贝到镜像中
VOLUME：配置数据卷 CMD：容器启动时候执行的命令
ENTRYPOINT：容器启动时候执行的命令</p>
<p>--------------------------Dockerfile参考配置---------------------------------</p>
<p>FROM <a
href="http://daocloud.io/library/tomcat:8.5.15-jre8">daocloud.io/library/tomcat:8.5.15-jre8</a>
#指定要生成的镜像的基础镜像，开头第一句话必须也只能是FROM COPY music.war
/usr/local/tomcat/webapps #拷贝工程到tomcat指定目录 MAINTAINER <a
href="mailto:scouture@163.com">scouture@163.com</a> #指定作者是谁 RUN
mkdir -p /datas/ ADD jdk-8u60-linux-x64.tar.gz /datas/
#将文件拷贝到镜像中并解压 ENV JAVA_HOME=/datas/jdk1.8.0_60
#配置JAVA_HOME ENV PATH=JAVA_HOME/bin:JAVAH​OME/bin:PATH #配置PATH
WORKDIR /dev/ #启动容器后，如果启动交互模式，直接进入到哪个目录 CMD
[“/bin/bash”] #启动容器的时候，进入到/bin/bash这种命令行</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础操作（一）</title>
    <url>/Docker%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="docker基本命令">Docker基本命令</h2>
<h3 id="一docker的安装">一、Docker的安装</h3>
<hr />
<h4 id="下载docker依赖的环境">1.1 下载Docker依赖的环境</h4>
<blockquote>
<p>想安装Docker，需要先将依赖的环境全部下载，就像Maven依赖JDK一样</p>
<p>参考：https://developer.aliyun.com/article/110806</p>
<p>如果已安装，可以先删除</p>
<p>[root@localhost ~]# yum -y remove docker-ce <span id="more"></span></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">01[root@localhost <span class="built_in">local</span>]<span class="comment"># yum -y install yum-utils device-mapper-persistent-data lvm2</span></span><br></pre></td></tr></table></figure>
<h4 id="指定docker镜像源">1.2 指定Docker镜像源</h4>
<blockquote>
<p>默认下载Docker回去国外服务器下载，速度较慢，我们可以设置为阿里云镜像源，速度更快</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">01[root@localhost ~]<span class="comment"># yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>
<h4 id="安装docker">1.3 安装Docker</h4>
<blockquote>
<p>依然采用yum的方式安装</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0102[root@localhost ~]<span class="comment"># yum makecache fast</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install docker-ce</span></span><br></pre></td></tr></table></figure>
<h4 id="启动docker并测试">1.4 启动Docker并测试</h4>
<blockquote>
<p>安装成功后，需要手动启动，设置为开机自启，并测试一下Docker</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">01020304<span class="comment"># 启动Docker服务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl start docker</span></span><br><span class="line"><span class="comment"># 测试 hello-world</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run hello-world</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：关闭防火墙之后docker需要重启</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">01[root@localhost ~]<span class="comment">#service docker restart</span></span><br></pre></td></tr></table></figure>
<h3 id="二docker的中央仓库">二、Docker的中央仓库</h3>
<hr />
<blockquote>
<ul>
<li>Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度较慢。</li>
</ul>
</blockquote>
<pre><code>&gt;
&gt;   https://hub.docker.com/</code></pre>
<blockquote>
<ul>
<li>国内的镜像网站：网易蜂巢，daoCloud等，下载速度快，但是镜像相对不全。</li>
</ul>
</blockquote>
<pre><code>&gt;
&gt;   https://c.163yun.com/hub#/home
&gt;
&gt;   http://hub.daocloud.io/ （推荐使用）</code></pre>
<blockquote>
<ul>
<li>在公司内部会采用私服的方式拉取镜像，需要添加配置，如下……</li>
</ul>
</blockquote>
<pre><code>&gt;
&gt;   https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</code></pre>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">0102030405060708</span># 需要创建/etc/docker/daemon.json，并添加如下内容</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ip:port&quot;</span><span class="punctuation">]</span>   </span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># 重启两个服务</span><br><span class="line">systemctl daemon-rd9oeload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="三镜像的操作重点">三、镜像的操作【<code>重点</code>】</h3>
<hr />
<h4 id="拉取镜像">3.1 拉取镜像</h4>
<blockquote>
<p>从中央仓库拉取镜像到本地</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">010203docker pull 镜像名称[:tag]</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker pull daocloud.io/library/tomcat:8.5.15-jre8</span></span><br></pre></td></tr></table></figure>
<h4 id="查看本地全部镜像">3.2 查看本地全部镜像</h4>
<blockquote>
<p>查看本地已经安装过的镜像信息，包含标识，名称，版本，更新时间，大小</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">01[root@localhost ~]<span class="comment"># docker images</span></span><br></pre></td></tr></table></figure>
<h4 id="删除本地镜像">3.3 删除本地镜像</h4>
<blockquote>
<p>镜像会占用磁盘空间，可以直接手动删除，表示通过查看获取</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">010203docker rmi 镜像的标识（需要先删除该镜像创建的容器，删除容器需要先停止容器）</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker rmi b8dfe9ade316</span></span><br></pre></td></tr></table></figure>
<h3 id="四容器操作重点">四、容器操作【<code>重点</code>】</h3>
<hr />
<h4 id="运行容器">4.1 运行容器</h4>
<blockquote>
<p>运行容器需要制定具体镜像，如果镜像不存在，会直接下载</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单操作</span></span><br><span class="line">docker run 镜像的标识|镜像名称[:tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用的参数</span></span><br><span class="line">docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]</span><br><span class="line"><span class="comment"># -d：代表后台运行容器</span></span><br><span class="line"><span class="comment"># -p 宿主机端口:容器端口：为了映射当前Linux的端口和容器的端口</span></span><br><span class="line"><span class="comment"># --name 容器名称：指定容器的名称(自定义)</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d -p 8888:8080 --name mytomcat8.5 b8dfe9ade316</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试：浏览器访问：虚拟机ip:8888（访问之前需要关闭防火墙以及开放安全组中的对应端口号）</span></span><br></pre></td></tr></table></figure>
<h4 id="查看正在运行的容器">4.2 查看正在运行的容器</h4>
<blockquote>
<p>查看全部正在运行的容器信息</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps [-qa]</span><br><span class="line"><span class="comment"># -a：查看全部的容器，包括没有运行</span></span><br><span class="line"><span class="comment"># -q：只查看容器的标识</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps</span></span><br></pre></td></tr></table></figure>
<h4 id="查看容器日志">4.3 查看容器日志</h4>
<blockquote>
<p>查看容器日志，以查看容器运行的信息</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">01020304docker logs -f 容器<span class="built_in">id</span></span><br><span class="line"><span class="comment"># -f：可以滚动查看日志的最后几行</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker logs -f 4411f56f1fbb</span></span><br></pre></td></tr></table></figure>
<h4 id="进入容器内部">4.4 进入容器内部</h4>
<blockquote>
<p>可以进入容器内部进行操作</p>
</blockquote>
<p>sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bash</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it 4411f56f1fbb bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出当前容器 exit</span></span><br><span class="line">root@4411f56f1fbb:/usr/local/tomcat<span class="comment"># exit</span></span><br></pre></td></tr></table></figure>
<h4 id="复制内容到容器">4.5 复制内容到容器</h4>
<blockquote>
<p>将宿主机的文件复制到容器内部的指定目录</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">01020304050607docker <span class="built_in">cp</span> 文件名称 容器<span class="built_in">id</span>:容器内部路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把主机root目录下的a.txt文件拷贝到容器的temp目录下（由于tomcat默认路径在/usr/local/tomcat）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker cp /root/a.txt 441:/usr/local/tomcat/temp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把容器的temp目录下的a.txt拷贝到主机root目录下</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker cp 441:/usr/local/tomcat/temp/a.txt /root</span></span><br></pre></td></tr></table></figure>
<h4 id="重启启动停止删除容器">4.6
重启&amp;启动&amp;停止&amp;删除容器</h4>
<blockquote>
<p>容器的启动，停止，删除等操作，后续经常会使用到</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0102030405060708091011121314151617<span class="comment"># 重新启动容器</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker restart 容器id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动停止运行的容器</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker start 容器id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止指定的容器（删除容器前，需要先停止容器）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker stop 容器id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止全部容器</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker stop $(docker ps -qa)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定容器</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker rm 容器id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部容器</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker rm $(docker ps -qa)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（一）</title>
    <url>/Spring%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="介绍">1.介绍</h3>
<blockquote>
<p>官网：https://spring.io/</p>
</blockquote>
<blockquote>
<p>Spring 让每个人都可以更快、更轻松、更安全地编写 Java。Spring
对速度、简单性和生产力的关注使其成为<a
href="https://snyk.io/blog/jvm-ecosystem-report-2018-platform-application/">世界上最受欢迎的</a>Java
框架。</p>
</blockquote>
<blockquote>
<p>我们使用了 Spring
框架附带的许多工具，并获得了许多开箱即用的解决方案所带来的好处，并且不必担心编写大量额外的代码——这确实为我们节省了一些时间和能量。
<span id="more"></span> ### 2.特征</p>
</blockquote>
<blockquote>
<ul>
<li><a
href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html">核心技术</a>：依赖注入、事件、资源、i18n、验证、数据绑定、类型转换、SpEL、AOP。</li>
<li><a
href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html">测试</a>：模拟对象、TestContext
框架、Spring MVC 测试、<code>WebTestClient</code>.</li>
<li><a
href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/data-access.html">数据访问</a>：事务、DAO
支持、JDBC、ORM、编组 XML。</li>
<li><a
href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html">Spring
MVC</a>和 <a
href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html">Spring
WebFlux</a> Web 框架。</li>
<li><a
href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/integration.html">集成</a>：远程处理、JMS、JCA、JMX、电子邮件、任务、调度、缓存。</li>
<li><a
href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/languages.html">语言</a>：Kotlin、Groovy、动态语言。</li>
</ul>
</blockquote>
<h3 id="核心技术">3.核心技术</h3>
<blockquote>
<p>IOC：控制反转，将对象的创建权交给了Spring去管理</p>
<p>DI：依赖注入，把数据给创建好的对象中的属性进行赋值</p>
<p>AOP：面向切面编程，底层是代理模式</p>
</blockquote>
<h3 id="bean的创建">4.Bean的创建</h3>
<blockquote>
<p><code>org.springframework.beans</code>和<code>org.springframework.context</code>包是
Spring Framework 的 IoC 容器的基础。该 <a
href="https://docs.spring.io/spring-framework/docs/5.3.20/javadoc-api/org/springframework/beans/factory/BeanFactory.html"><code>BeanFactory</code></a>
接口提供了一种高级配置机制，能够管理任何类型的对象。 <a
href="https://docs.spring.io/spring-framework/docs/5.3.20/javadoc-api/org/springframework/context/ApplicationContext.html"><code>ApplicationContext</code></a>
是 <code>BeanFactory</code>的子接口。它补充说：</p>
<ul>
<li>更容易与 Spring 的 AOP 功能集成</li>
<li>消息资源处理（用于国际化）</li>
<li>活动发布</li>
<li>应用层特定上下文，例如<code>WebApplicationContext</code> 用于 Web
应用程序的上下文。</li>
</ul>
</blockquote>
<blockquote>
<p><code>org.springframework.context.ApplicationContext</code>接口代表
Spring IoC 容器，负责实例化、配置和组装 bean。</p>
</blockquote>
<h4 id="无参构造创建">4.1无参构造创建</h4>
<blockquote>
<p>导入依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建User实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coutrue.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>编写applicationContext.xml配置文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    该id属性是标识单个 bean 定义的字符串。(不能重复)</span></span><br><span class="line"><span class="comment">    该class属性定义 bean 的类型并使用完全限定的类名。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coutrue.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>编写测试类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//需要加载配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据bean标签中的id属性值，获取bean对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="工厂创建">4.2工厂创建</h4>
<blockquote>
<p>创建工厂类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过实例方法获取User对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 User 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return new User();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射 + 配置文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>  (User)Class.forName(<span class="string">&quot;com.qf.pojo.User&quot;</span>).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//return null;</span></span><br><span class="line">        <span class="comment">//手动抛异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;创建User对象异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过静态方法获取 User 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUserStatic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return new User();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射 + 配置文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>  (User)Class.forName(<span class="string">&quot;com.qf.pojo.User&quot;</span>).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//return null;</span></span><br><span class="line">        <span class="comment">//手动抛异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;创建User对象异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置applicationContext.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    该id属性是标识单个 bean 定义的字符串。(不能重复)</span></span><br><span class="line"><span class="comment">    该class属性定义 bean 的类型并使用完全限定的类名。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id = &quot;user&quot; class = &quot;com.coutrue.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 工厂中的实例方法创建Bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id = &quot;userFactoryBean&quot; class = &quot;com.coutrue.factory.UserFactory&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id = &quot;user&quot; factory-bean=&quot;userFactoryBean&quot; factory-method=&quot;getUser&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 工厂中的静态方法创建Bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coutrue.factory.UserFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserStatic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="简单工厂模式">4.3简单工厂模式</h4>
<blockquote>
<p>Car</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Car 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供 run 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Car 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoSJ</span>  <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保时捷在飞驰...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Car 的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FaLL</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;法拉利在飞驰...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂模式：代码集中，不符合 OCP 原则（ open - close ）：对代码的扩展是开放的，对代码的修改是关闭的</span></span><br><span class="line"><span class="comment"> * 车工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供创建保时捷的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaoSJ <span class="title function_">creatBaoSJ</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (BaoSJ)Class.forName(<span class="string">&quot;com.coutrue.factorymode.simplefactory.BaoSJ&quot;</span>).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供创建法拉利的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FaLL <span class="title function_">creatFaLL</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (FaLL)Class.forName(<span class="string">&quot;com.coutrue.factorymode.simplefactory.FaLL&quot;</span>).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.simplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象，调用方法</span></span><br><span class="line">        <span class="comment">//BaoSJ baoSJ = new BaoSJ();</span></span><br><span class="line">        <span class="type">BaoSJ</span> <span class="variable">baoSJ</span> <span class="operator">=</span> CarFactory.creatBaoSJ();</span><br><span class="line">        baoSJ.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象，调用方法</span></span><br><span class="line">        <span class="comment">//FaLL faLL = new FaLL();</span></span><br><span class="line">        <span class="type">FaLL</span> <span class="variable">faLL</span> <span class="operator">=</span> CarFactory.creatFaLL();</span><br><span class="line">        faLL.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="抽象工厂模式">4.4抽象工厂模式</h4>
<blockquote>
<p>Car</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Car 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供 run 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Car 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoSJ</span>  <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保时捷在飞驰...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Car 的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FaLL</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;法拉利在飞驰...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CarFactory</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂模式：符合开闭原则</span></span><br><span class="line"><span class="comment"> * 车工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建车的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保时捷的车工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoSJFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建保时捷车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (BaoSJ)Class.forName(<span class="string">&quot;com.qf.factorymode.abstractfactory.BaoSJ&quot;</span>).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 法拉利车工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FaLLFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (FaLL)Class.forName(<span class="string">&quot;com.qf.factorymode.abstractfactory.FaLL&quot;</span>).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.factorymode.abstractfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象，调用方法</span></span><br><span class="line">        <span class="type">BaoSJFactory</span> <span class="variable">baoSJFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaoSJFactory</span>();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">baoSJ</span> <span class="operator">=</span> baoSJFactory.createCar();</span><br><span class="line">        baoSJ.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象，调用方法</span></span><br><span class="line">        <span class="type">FaLLFactory</span> <span class="variable">faLLFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FaLLFactory</span>();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">faLL</span> <span class="operator">=</span> faLLFactory.createCar();</span><br><span class="line">        faLL.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bean的作用范围">5.Bean的作用范围</h3>
<h5 id="scope属性">5.1scope属性</h5>
<blockquote>
<p>bean标签的scope属性：指定当前bean的作用范围</p>
<p>取值：</p>
<p>singleton：单例（ 默认值 ）</p>
<p>prototype：多例</p>
<p>request：作用于Web应用的请求范围</p>
<p>session：作用于Web应用的会话范围</p>
<p>global-session：作用于集群环境Web应用的会话范围（全局会话）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    该id属性是标识单个 bean 定义的字符串。(不能重复)</span></span><br><span class="line"><span class="comment">    该class属性定义 bean 的类型并使用完全限定的类名。</span></span><br><span class="line"><span class="comment">    scope：常用的是单例（singleton）和多例（prototype）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;user&quot;</span> <span class="attr">class</span> = <span class="string">&quot;com.couture.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="单例模式-懒汉式">5.2单例模式-懒汉式</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.singletonmode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：懒汉式（在第一次调用的时候实例化自己）</span></span><br><span class="line"><span class="comment"> * 优势：第一次调用才会初始化，避免内存消耗</span></span><br><span class="line"><span class="comment"> * 劣势：必须加锁才能保证单例，加锁会影响效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonLazy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonLazy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingletonLazy</span> <span class="variable">singletonLazy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化，线程安全</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonLazy <span class="title function_">getSingletonLazy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == singletonLazy) &#123;</span><br><span class="line">            singletonLazy = <span class="keyword">new</span> <span class="title class_">SingletonLazy</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> singletonLazy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="单例模式-饿汉式">5.3单例模式-饿汉式</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.singletonmode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式：比较常用，容易产生垃圾（ GC回收 ）</span></span><br><span class="line"><span class="comment"> * 优势：没有加锁，效率会提高</span></span><br><span class="line"><span class="comment"> * 劣势：类加载时就进行初始化，消耗内存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonHungry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonHungry</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingletonHungry</span> <span class="variable">singletonHungry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonHungry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonHungry <span class="title function_">getSingletonHungry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singletonHungry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="单例模式-双重校验锁">5.4单例模式-双重校验锁</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.singletonmode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重校验锁</span></span><br><span class="line"><span class="comment"> * 优势：安全，在多线程情况下保证较高的性能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonLock</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingletonLock</span> <span class="variable">singletonLock</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonLock <span class="title function_">getSingletonLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先检查当前实例是否为空，如果不存在再进行同步</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == singletonLock)&#123;</span><br><span class="line">            <span class="comment">//同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonLock.class) &#123;</span><br><span class="line">                <span class="comment">//再次检查当前实例是否为空</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span> == singletonLock)&#123;</span><br><span class="line">                    <span class="comment">//返回</span></span><br><span class="line">                    singletonLock = <span class="keyword">new</span> <span class="title class_">SingletonLock</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singletonLock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bean生命周期">6.Bean生命周期</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    该id属性是标识单个 bean 定义的字符串。(不能重复)</span></span><br><span class="line"><span class="comment">    该class属性定义 bean 的类型并使用完全限定的类名。</span></span><br><span class="line"><span class="comment">    scope：常用的是单例（singleton）和多例（prototype）</span></span><br><span class="line"><span class="comment">    init-method：创建对象后执行的初始化方法</span></span><br><span class="line"><span class="comment">    destroy-method：对象销毁后执行（如果是多例模式下不执行）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;user&quot;</span> <span class="attr">class</span> = <span class="string">&quot;com.couture.pojo.User&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initUser&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyUser&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法，创建对象后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User 初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁方法，销毁spring容器中对象后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User 销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试生命周期相关方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLife</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//创建ClassPathXmlApplicationContext对象</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span></span><br><span class="line">        <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    applicationContext.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="依赖注入">7.依赖注入</h3>
<blockquote>
<p>DI：Dependency Injection：给创建对象中的属性赋值</p>
</blockquote>
<blockquote>
<p>IOC作用：降低程序间耦合（依赖关系）</p>
<p>依赖关系维护：以后都交给Spring进行管理</p>
</blockquote>
<blockquote>
<p>可注入类型：</p>
<p>基本数据类型以及包装类</p>
<p>String类</p>
<p>类类型（ 其他Bean类型 ）</p>
<p>复杂类型：集合，数组…</p>
</blockquote>
<h4 id="set方法注入">7.1set方法注入</h4>
<blockquote>
<p>applicationContext.xml配置文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 初始化一个Car对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;firstCar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.couture.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保时捷&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    该id属性是标识单个 bean 定义的字符串。(不能重复)</span></span><br><span class="line"><span class="comment">    该class属性定义 bean 的类型并使用完全限定的类名。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;user&quot;</span> <span class="attr">class</span> = <span class="string">&quot;com.coutrue.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- set方法赋值</span></span><br><span class="line"><span class="comment">        property表示当前对象的属性</span></span><br><span class="line"><span class="comment">        name：属性名</span></span><br><span class="line"><span class="comment">        value：给当前属性赋值</span></span><br><span class="line"><span class="comment">        ref：用于注入其他Bean对象（在spring容器中已经创建了）</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;firstCar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qf.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Bean</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span>(User)applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="复杂类型注入">7.2复杂类型注入</h4>
<blockquote>
<p>1.注入数组对应的标签：array</p>
<p>2.注入LIst以及Set集合的标签：list，set</p>
<p>3.注入Map以及Propertis的标签：map，properties</p>
</blockquote>
<blockquote>
<p>创建实体类CollectionVo</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组以及集合类型的属性注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer [] arr;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="keyword">private</span> Set set;</span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在applicationContext.xml文件中添加内容</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 复杂类型注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;collectionVo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coutrue.vo.CollectionVo&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;arr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>789<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- List --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>rose<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Set --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Map --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1001&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;firstCar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc:mysql:///db_name?serverTimezone=Asia/Shanghai<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driverClassName&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试复杂类型注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCollectionVo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Bean</span></span><br><span class="line">    <span class="type">CollectionVo</span> <span class="variable">collectionVo</span> <span class="operator">=</span> (CollectionVo) applicationContext.getBean(<span class="string">&quot;collectionVo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(collectionVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="构造器注入-不常用">7.3构造器注入（ 不常用 ）</h4>
<blockquote>
<p>创建Car</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(Integer cid, String cname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cid = cid;</span><br><span class="line">        <span class="built_in">this</span>.cname = cname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建User</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String name, String password, Car car)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.car = car;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第一个构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把 id 和 name 交换了一下顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> car</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer id,String password, Car car)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.car = car;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第二个构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置applicationContext.xml文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 初始化一个Car对象，要和类中的构造器器匹配 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     id和name用法相同</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;firstCar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.couture.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 构造器注入</span></span><br><span class="line"><span class="comment">        name：获取构造器中指定参数的名称</span></span><br><span class="line"><span class="comment">        value：给构造器中的参数赋值（基本数据类型以及String类型）</span></span><br><span class="line"><span class="comment">        ref：给其他bean类型赋值</span></span><br><span class="line"><span class="comment">        type：指定注入的类型</span></span><br><span class="line"><span class="comment">        index：指定参数的位置，默认从0开始</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20001&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保时捷&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 初始化一个User对象，通过改变 index 来设置通过使用第一个构造器创建对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;user1&quot;</span> <span class="attr">class</span> = <span class="string">&quot;com.couture.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;firstCar&quot;</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 初始化一个User对象，通过改变 index 来设置通过使用第二个构造器创建对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;user2&quot;</span> <span class="attr">class</span> = <span class="string">&quot;com.couture.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;456&quot;</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;firstCar&quot;</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.Car;</span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCar</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) applicationContext.getBean(<span class="string">&quot;firstCar&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注解注入">7.4注解注入</h4>
<blockquote>
<p>注意：需要在applicationContext.xml文件中，导入context约束</p>
</blockquote>
<blockquote>
<p>Car</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 将对象放到 spring 容器中，相当于：&lt;bean id = &quot;&quot; class = &quot;&quot; /&gt;</span></span><br><span class="line"><span class="comment"> * 如果一个注解的属性默认值是 value，在只使用 value 属性的时候可以省略不写</span></span><br><span class="line"><span class="comment"> * value属性：用于指定 bean 的 id，如果不写，默认值就是当前类名，首字母小写</span></span><br><span class="line"><span class="comment"> * 以下三个注解用法和 <span class="doctag">@Component</span> 一样，为了区别不同层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span>：一般用于表现层 （ Web层 ）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Service</span>：一般用于业务逻辑层 （ Service层 ）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Repository</span>：一般用于持久层 （ Dao层 ）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Value</span> 给属性赋值，赋值类型为基本数据类型以及String，可以在属性以及方法上使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Component(&quot;myCar&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;20001&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value(&quot;保时捷&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;保时捷&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCname</span><span class="params">(String cname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cname = cname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>User</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Scope</span> 表示当前对象默认单例（ singleton ），可以设置为多例（ prototype ）</span></span><br><span class="line"><span class="comment"> * 相当于 &lt;bean scope = &quot;&quot; /&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(value = &quot;singleton&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;1001&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;123&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Autowired</span> 表示自动装配，如果 spring容器中有该类型的对象，则自动注入到当前属性中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Qualifier</span> 和 <span class="doctag">@Autowired</span> 一起用，指定要注入具体对象的名称，value 属性：指定注入 bean 的 id</span></span><br><span class="line"><span class="comment">     * 如果只有一个对象，只使用 <span class="doctag">@Autowired</span>，如果有多个同类型的对象，名称不能相同，使用 <span class="doctag">@Qualifier</span> 选择具体的 Bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@Resource</span> 是javaEE中的注解，name 属性：通过名称指定注入的 bean，相当于 <span class="doctag">@Autowired</span> + <span class="doctag">@Qualifier</span></span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@Resource</span> 不常用，如果不生效，则需要导入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;otherCar&quot;)</span></span><br><span class="line">    <span class="comment">//@Resource(name = &quot;otherCar&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@PostConstruct</span> 相当于 &lt;bean init-method = &quot;&quot; /&gt; 表示初始化的方法（ 构造器之后执行 ）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User 初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@PreDestroy</span> 相当于 &lt;bean destroy-method = &quot;&quot; /&gt; 表示销毁的方法 （ 对象销毁之前执行 ）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User 销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>applicationContext.xml配置文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span> <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 扫描对应包下的注解 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.couture&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 初始化一个 Car 对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;otherCar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.couture.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;法拉利&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>bean.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span> <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 导入其他的xml文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.Car;</span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试初始化 Car 对象相关注解的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCar</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) applicationContext.getBean(<span class="string">&quot;car&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试初始化 User 对象相关注解的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试作用范围关注解的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScope</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user1 == user2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试生命周期相关注解的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLife</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过其他配置文件测试</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        applicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整合mybatis-重点">8.整合MyBatis 【重点】</h3>
<h5 id="导入依赖">8.1导入依赖</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.couture<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-05<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis 整合 spring 所需依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="user类">8.2User类</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coutrue.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="usercontroller">8.3UserController</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.couture.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * web层 -&gt; <span class="doctag">@Controller</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入 UserService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="userservice">8.4UserService</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">01020304050607080910111213package com.couture.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="userserviceimpl">8.5UserServiceImpl</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qf.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coutrue.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.coutrue.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.coutrue.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * service层 -&gt; <span class="doctag">@Service</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入 UserMapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="usermapper">8.6UserMapper</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coutrue.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coutrue.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dao层 -&gt; <span class="doctag">@Repository</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="usermapper.xml">8.7UserMapper.xml</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coutrue.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- orm映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.coutrue.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- sql片段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;baseSql&quot;</span>&gt;</span></span><br><span class="line">        select id, name, password from t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 查询所有用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;baseSql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="db.properties">8.8db.properties</h5>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">db.username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">db.url</span> = <span class="string">jdbc:mysql://localhost:3306/java?serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF8</span></span><br><span class="line"><span class="attr">db.driver</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<h5 id="log4j.properties">8.9log4j.properties</h5>
<p>properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Global</span> <span class="string">logging configuration</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure>
<h5 id="mybatis-config.xml">8.10mybatis-config.xml</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="applicationcontext.xml">8.11applicationContext.xml</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span> <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 导入外部配置文件 db.properties --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据源对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 导入 db.properties 中的值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 扫描对应包下的注解 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.coutrue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 必选配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 非必选属性，根据自己需求去配置 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 导入 mybatis-config.xml --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 导入 Mapper.xml 文件，classpath后面不能有空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 扫描 Mapper 接口，生成代理对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定扫描的具体位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.coutrue.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="测试">8.12测试</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_findAll</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> (UserController)applicationContext.getBean(<span class="string">&quot;userController&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userController.findAll();</span><br><span class="line"></span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据源配置类">9.数据源配置类</h3>
<blockquote>
<p>用于替换applicationContext.xml中数据源的相关配置</p>
<p><context:property-placeholder location=“classpath:db.properties”></context:property-placeholder></p>
</blockquote>
<p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coture.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> com.couture.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span> 表示服务器启动时加载当前类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PropertySource</span> 加载对应的配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:db.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;db.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;db.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;db.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化一个 Bean 对象 -&gt; DataSource</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span> 将方法的返回值作为 bean 对象，放到 spring 容器中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置数据源参数</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;driverClassName&quot;</span>, driverClassName);</span><br><span class="line"></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建数据源对象</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回</span></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分页">10.分页</h3>
<h5 id="导入依赖-1">10.1导入依赖</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5
id="第一种方式在mybatis-config.xml中配置">10.2第一种方式在mybatis-config.xml中配置</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库方言，指定对应的数据库进行分页 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum&lt;=0 时会查询第一页， pageNum&gt;pages（超过总数时），会查询最后一页 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reasonable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 支持通过 Mapper 接口参数来传递分页参数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportMethodsArguments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5
id="第二种方式在applicationcontext.xml中配置">10.3第二种方式在applicationContext.xml中配置</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 必选配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非必选属性，根据自己需求去配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 mybatis-config.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 Mapper.xml 文件，classpath后面不能有空格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置分页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--使用下面的方式配置参数，一行配置一个 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                        helperDialect = mysql</span><br><span class="line">                        reasonable = true</span><br><span class="line">                        supportMethodsArguments = true</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="测试-1">10.4 测试</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_findByPage</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> (UserController)applicationContext.getBean(<span class="string">&quot;userController&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">PageInfo</span> <span class="variable">pageInfo</span> <span class="operator">=</span> userController.findByPage(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(pageInfo.getList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="aop">9.AOP</h3>
<blockquote>
<p>Aspect Oriented Programing 面向切面编程</p>
<p>springAOP：在程序运行期通过动态代理的方式向目标类（接口），织入增强的代码，为目标类（接口）中的方法添加额外的功能</p>
<p>采取是横向抽取机制，取代了我们传统的纵向继承方式重复性的代码</p>
<p>底层原理：代理模式</p>
</blockquote>
<h4 id="装饰器模式">9.1装饰器模式</h4>
<blockquote>
<p>装饰器模式：对象本身增强</p>
<p>代理模式：代理对象（代理过程）增强</p>
</blockquote>
<h5 id="info">9.1.1Info</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象构件</span></span><br><span class="line"><span class="comment"> * 抽象类：可以有抽象方法，也可以有普通方法，但是一旦写了抽象方法，这个类一定为抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Info</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自我介绍</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="personinfo">9.1.2PersonInfo</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体构件</span></span><br><span class="line"><span class="comment"> * 继承Info，实现方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonInfo</span> <span class="keyword">extends</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自我介绍&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="decorator">9.1.3Decorator</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰器</span></span><br><span class="line"><span class="comment"> * 抽象装饰</span></span><br><span class="line"><span class="comment"> * 继承Info，实现方法，可以通过其子类扩展具体构件的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">Info</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Info info;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入被装饰对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Info info)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用自我介绍的方法</span></span><br><span class="line">        info.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="singer">9.1.4Singer</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体装饰</span></span><br><span class="line"><span class="comment"> * 继承抽象装饰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singer</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用父类构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Singer</span><span class="params">(Info info)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自己的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">singing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;唱歌&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写方法，达到增强的目的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.info();</span><br><span class="line">        singing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="dancer">9.1.5Dancer</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体装饰</span></span><br><span class="line"><span class="comment"> * 继承抽象装饰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dancer</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dancer</span><span class="params">(Info info)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dancing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跳舞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.info();</span><br><span class="line">        dancing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="magic">9.1.6Magic</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体装饰</span></span><br><span class="line"><span class="comment"> * 继承抽象装饰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Magic</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Magic</span><span class="params">(Info info)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">magic</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;变魔术&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.info();</span><br><span class="line">        magic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="测试-2">9.1.7测试</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单独测试</span></span><br><span class="line"><span class="comment">//        Info personInfo = new PersonInfo();</span></span><br><span class="line"><span class="comment">//        personInfo.info();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;----------------------&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        Decorator singer = new Singer(personInfo);</span></span><br><span class="line"><span class="comment">//        singer.info();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;----------------------&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        Dancer dancer = new Dancer(personInfo);</span></span><br><span class="line"><span class="comment">//        dancer.info();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;----------------------&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//增强测试</span></span><br><span class="line">        <span class="type">Info</span> <span class="variable">personInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonInfo</span>();</span><br><span class="line">        <span class="type">Decorator</span> <span class="variable">singer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singer</span>(personInfo);<span class="comment">//第一次增强</span></span><br><span class="line">        <span class="type">Dancer</span> <span class="variable">dancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dancer</span>(singer);<span class="comment">//第二次增强</span></span><br><span class="line">        <span class="type">Magic</span> <span class="variable">magic1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Magic</span>(dancer);<span class="comment">//第三次增强</span></span><br><span class="line">        <span class="type">Magic</span> <span class="variable">magic2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Magic</span>(magic1);<span class="comment">//第四次增强</span></span><br><span class="line"></span><br><span class="line">        magic2.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="代理模式">9.2代理模式</h4>
<blockquote>
<p>通过代理类对象，为目标类对象添加功能</p>
<p>分类：静态代理和动态代理</p>
<p>静态代理：需要实现接口中的方法，进行增强，代理的功能代码有冗余，维护性较差</p>
<p>动态代理：在不实现接口中所有方法，对接口中的指定的方法进行增强</p>
</blockquote>
<h5 id="静态代理">9.2.1静态代理</h5>
<blockquote>
<p>Rent</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.proxy.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> * 出租房子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出租房子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他的方法</span></span><br><span class="line">    <span class="comment">//public void test();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Owner</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.proxy.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 房东</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Owner</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>OwnerProxy</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.proxy.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 房东的代理对象</span></span><br><span class="line"><span class="comment"> * 静态代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OwnerProxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//房东对象</span></span><br><span class="line">    <span class="keyword">private</span> Owner owner;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OwnerProxy</span><span class="params">(Owner owner)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.owner = owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发布租房信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;带租户看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        publish();</span><br><span class="line">        owner.rent();</span><br><span class="line">        seeHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.proxy.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Owner</span> <span class="variable">owner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Owner</span>();</span><br><span class="line">        owner.rent();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">OwnerProxy</span> <span class="variable">ownerProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OwnerProxy</span>(owner);</span><br><span class="line">        ownerProxy.rent();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="动态代理">9.2.2动态代理</h5>
<blockquote>
<p>分为：JDK动态代理 和 CGLIB动态代理</p>
<p>JDK动态代理：基于接口的动态代理，被代理对象必须实现接口</p>
<p>CGLIB动态代理 ：基于子类的动态代理，对目标对象进行继承代理</p>
</blockquote>
<blockquote>
<p>JDK动态代理</p>
</blockquote>
<blockquote>
<p>Rent</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.proxy.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> * 出租房子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出租房子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Owner</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.proxy.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 房东</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Owner</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>RentJdkProxy</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.proxy.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK动态代理</span></span><br><span class="line"><span class="comment"> * 核心实现 InvocationHandler 接口，调用 invoke 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentJdkProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRent</span><span class="params">(Rent rent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成代理对象</span></span><br><span class="line">    <span class="keyword">public</span> Rent <span class="title function_">getRent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Rent)Proxy.newProxyInstance(</span><br><span class="line">                rent.getClass().getClassLoader(), <span class="comment">//类加载器</span></span><br><span class="line">                rent.getClass().getInterfaces(),<span class="comment">//接口列表</span></span><br><span class="line">                <span class="built_in">this</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对接口中的方法进行增强（扩展），不需要实现接口中的所有方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//声明变量做为方法的返回值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断方法名，对其进行增强</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;rent&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">            publish();</span><br><span class="line">            result = method.invoke(rent,args);</span><br><span class="line">            seeHouse();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = method.invoke(rent,args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发布租房信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;带租户看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.proxy.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Owner</span> <span class="variable">owner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Owner</span>();</span><br><span class="line">        owner.rent();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建RentJdkProxy对象</span></span><br><span class="line">        <span class="type">RentJdkProxy</span> <span class="variable">rentJdkProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RentJdkProxy</span>();</span><br><span class="line">        <span class="comment">//给属性赋值</span></span><br><span class="line">        rentJdkProxy.setRent(owner);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        <span class="type">Rent</span> <span class="variable">proxyRent</span> <span class="operator">=</span> rentJdkProxy.getRent();</span><br><span class="line">        proxyRent.rent();</span><br><span class="line"></span><br><span class="line">        proxyRent.test();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="spring中的aop">9.3Spring中的AOP</h4>
<blockquote>
<p>面向切面编程 (AOP) 通过提供另一种思考程序结构的方式来补充面向对象编程
(OOP)，OOP的延伸</p>
<p>对目标对象中的多个不同方法进行不同程度的增强</p>
</blockquote>
<blockquote>
<p>AOP的术语:
Joinpoint(连接点)：所谓连接点是指那些被拦截到的点，在spring中，这些点指的是方法，spring只支持方法类型的连接点。
Pointcut(切入点)：所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。
Advice(通知/增强)：所谓通知是指拦截到Joinpoint之后所要做的事情就是通知，通知分为前置通知，后置通知，异常通知，最终通知，环绕通知。
Introduction(引介)：可以在运行期为类动态地添加一些方法或Field。
Target(目标对象)：代理的目标对象。
Weaving(织入)：是指把增强应用到目标对象来创建新的代理对象的过程。
Proxy(代理)：一个类被AOP织入增强后，就产生一个代理类。
Aspect(切面)：是切入点和通知（引介）的结合</p>
</blockquote>
<h4 id="xml配置aop">9.4XML配置AOP</h4>
<h5 id="导入依赖-2">9.4.1导入依赖</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="userservice-1">9.4.2UserService</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象 target</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有增强的方法，叫做连接点 JoinPoint</span></span><br><span class="line">    <span class="comment">//被增强的方法，叫做切入点 PointCut</span></span><br><span class="line">    <span class="comment">//增强的代码，叫做通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="userserviceimpl-1">9.4.3UserServiceImpl</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;<span class="comment">//算数异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="myadvice">9.4.4MyAdvice</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通知类：增强的代码</span></span><br><span class="line"><span class="comment"> * 方法名以及功能可以是任意的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知，目标对象调用方法前执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知（最终通知），目标对象调用方法后执行，无论目标对象方法是否发生异常都会执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after_returning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知，目标对象调用方法后执行，目标对象方法发生异常则不执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after_throwing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知，目标对象调用方法发生异常时执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知，目标对象调用方法之前&quot;</span>);</span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知，目标对象调用方法之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="applicationcontext.xml-1">9.4.5applicationContext.xml</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span> <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置userService对象，对该对象中的方法进行增强 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coutrue.service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coutrue.advice.MyAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认使用JDK动态代理，通过 proxy-target-class=&quot;true&quot; 可以设置使用CGLIB动态代理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置切点</span></span><br><span class="line"><span class="comment">             expression：表达式，指定哪些方法是切入点，对那些进行增强</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:pointcut id=&quot;pc&quot; expression=&quot;execution(public void com.qf.service.impl.UserServiceImpl.add())&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.coutrue.service.impl.*ServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 配置切面，把通知配置到切点上 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAdvice&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- aop:before 前置通知，method 表示增强的代码的方法名 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 后置通知（最终通知），目标对象调用方法后执行，无论目标对象方法是否发生异常都会执行 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 后置通知，目标对象调用方法后执行，目标对象方法发生异常则不执行 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;after_returning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 异常通知，目标对象调用方法发生异常时执行 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;after_throwing&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 环绕通知，目标方法调用之前和之后都会执行 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="测试-3">9.4.6测试</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.couture.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.couture.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAop</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span></span><br><span class="line">                <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService)applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.add();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//userService.delete();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端学习</category>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>ssm</tag>
      </tags>
  </entry>
</search>
